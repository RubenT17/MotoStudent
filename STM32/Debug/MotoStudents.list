
MotoStudents.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800c750  0800c750  0001c750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce30  0800ce30  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce30  0800ce30  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce38  0800ce38  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800ce40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000278  0800d0b8  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800d0b8  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c7f  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b6c  00000000  00000000  00036f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00039a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195d5  00000000  00000000  0003be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e0b  00000000  00000000  000553ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f2fe  00000000  00000000  0006b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a4f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006248  00000000  00000000  0010a54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000278 	.word	0x20000278
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c734 	.word	0x0800c734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000027c 	.word	0x2000027c
 80001dc:	0800c734 	.word	0x0800c734

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <write_Bit>:
  *            @arg GPIO_PIN_RESET: to write 0.
  *            @arg GPIO_PIN_SET: to write 1.
  * @retval None.
  */
void write_Bit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState bit_tx)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	2200      	movs	r2, #0
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f003 fd76 	bl	8004a78 <HAL_GPIO_WritePin>
	delayMicro(3);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 fa01 	bl	8001394 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bit_tx);
 8000f92:	787a      	ldrb	r2, [r7, #1]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f003 fd6d 	bl	8004a78 <HAL_GPIO_WritePin>
	delayMicro(57);
 8000f9e:	2039      	movs	r0, #57	; 0x39
 8000fa0:	f000 f9f8 	bl	8001394 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f003 fd64 	bl	8004a78 <HAL_GPIO_WritePin>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <read_Bit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval The bit read.
  */
_Bool read_Bit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
	_Bool bit_rx;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f003 fd54 	bl	8004a78 <HAL_GPIO_WritePin>
	delayMicro(2);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 f9df 	bl	8001394 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f003 fd4b 	bl	8004a78 <HAL_GPIO_WritePin>
	delayMicro(10);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f000 f9d6 	bl	8001394 <delayMicro>
	bit_rx = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f003 fd2b 	bl	8004a48 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
	delayMicro(48);
 8000ffe:	2030      	movs	r0, #48	; 0x30
 8001000:	f000 f9c8 	bl	8001394 <delayMicro>
	return bit_rx;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <write_Byte>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @param  data_tx specifies the byte to be written.
  * @retval None
  */
void write_Byte(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t data_tx)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	807b      	strh	r3, [r7, #2]
 800101a:	4613      	mov	r3, r2
 800101c:	707b      	strb	r3, [r7, #1]
	uint8_t mask = 0b00000001;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_tx = data_tx & mask;
 8001022:	787a      	ldrb	r2, [r7, #1]
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	4013      	ands	r3, r2
 8001028:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i=0; i<8; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	737b      	strb	r3, [r7, #13]
 800102e:	e012      	b.n	8001056 <write_Byte+0x48>
	{
		write_Bit(GPIOx, GPIO_Pin, bit_tx);
 8001030:	7bba      	ldrb	r2, [r7, #14]
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff9a 	bl	8000f70 <write_Bit>
		delayMicro(3);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f9a9 	bl	8001394 <delayMicro>
        mask = mask << 1;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
        bit_tx = data_tx & mask;
 8001048:	787a      	ldrb	r2, [r7, #1]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	4013      	ands	r3, r2
 800104e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i=0; i<8; i++)
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	3301      	adds	r3, #1
 8001054:	737b      	strb	r3, [r7, #13]
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	2b07      	cmp	r3, #7
 800105a:	d9e9      	bls.n	8001030 <write_Byte+0x22>
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <read_Byte>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval The byte read.
  */
uint8_t read_Byte(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
	uint8_t byte_rx = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;  i < 8; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	e012      	b.n	80010a2 <read_Byte+0x3c>
	{
		byte_rx |= read_Bit(GPIOx, GPIO_Pin) << i;
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	4619      	mov	r1, r3
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff99 	bl	8000fb8 <read_Bit>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	b25a      	sxtb	r2, r3
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4313      	orrs	r3, r2
 8001098:	b25b      	sxtb	r3, r3
 800109a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;  i < 8; i++)
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	3301      	adds	r3, #1
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d9e9      	bls.n	800107c <read_Byte+0x16>
	}
	return byte_rx;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <reset_CMD>:
  * @retval This parameter can be one of the enum values:
  *            @arg 0: if there are device(s) on the onewire communication.
  *            @arg 1: if there aren't device(s) on the onewire communication.
  */
_Bool reset_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]
	_Bool fault;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f003 fcd7 	bl	8004a78 <HAL_GPIO_WritePin>
	delayMicro(500);
 80010ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ce:	f000 f961 	bl	8001394 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f003 fccd 	bl	8004a78 <HAL_GPIO_WritePin>
	delayMicro(100);
 80010de:	2064      	movs	r0, #100	; 0x64
 80010e0:	f000 f958 	bl	8001394 <delayMicro>
	fault = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4619      	mov	r1, r3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f003 fcad 	bl	8004a48 <HAL_GPIO_ReadPin>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf14      	ite	ne
 80010f4:	2301      	movne	r3, #1
 80010f6:	2300      	moveq	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
	delayMicro(500);
 80010fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fe:	f000 f949 	bl	8001394 <delayMicro>
	return fault;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <matchROM_CMD>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @param	dirb[] specifies the 64-bit lasered ROM code of the onewire device LSBF.
  * @retval None.
  */
void matchROM_CMD (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t dirb[])
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	460b      	mov	r3, r1
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	817b      	strh	r3, [r7, #10]
	write_Byte(GPIOx, GPIO_Pin, MATCH_ROM);
 800111a:	897b      	ldrh	r3, [r7, #10]
 800111c:	2255      	movs	r2, #85	; 0x55
 800111e:	4619      	mov	r1, r3
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff74 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[0]);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	897b      	ldrh	r3, [r7, #10]
 800112c:	4619      	mov	r1, r3
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f7ff ff6d 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[1]);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	897b      	ldrh	r3, [r7, #10]
 800113c:	4619      	mov	r1, r3
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff ff65 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[2]);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3302      	adds	r3, #2
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	897b      	ldrh	r3, [r7, #10]
 800114c:	4619      	mov	r1, r3
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff ff5d 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[3]);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3303      	adds	r3, #3
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	897b      	ldrh	r3, [r7, #10]
 800115c:	4619      	mov	r1, r3
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff ff55 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[4]);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3304      	adds	r3, #4
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	897b      	ldrh	r3, [r7, #10]
 800116c:	4619      	mov	r1, r3
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f7ff ff4d 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[5]);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3305      	adds	r3, #5
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	897b      	ldrh	r3, [r7, #10]
 800117c:	4619      	mov	r1, r3
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff ff45 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[6]);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3306      	adds	r3, #6
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	897b      	ldrh	r3, [r7, #10]
 800118c:	4619      	mov	r1, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff ff3d 	bl	800100e <write_Byte>
	write_Byte(GPIOx, GPIO_Pin, dirb[7]);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3307      	adds	r3, #7
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	897b      	ldrh	r3, [r7, #10]
 800119c:	4619      	mov	r1, r3
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff35 	bl	800100e <write_Byte>
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <skipROM_CMD>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None.
  */
void skipROM_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
	write_Byte(GPIOx, GPIO_Pin, SKIP_ROM);
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	22cc      	movs	r2, #204	; 0xcc
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff25 	bl	800100e <write_Byte>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <convertT_CMD>:
  * @retval This parameter can be one of the enum values:
  *            @arg 0: if there has been no failure in the conversion.
  *            @arg 1: if there has been failure in the conversion.
  */
_Bool convertT_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
	_Bool fault = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
	write_Byte(GPIOx, GPIO_Pin, CONVERT_T);
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	2244      	movs	r2, #68	; 0x44
 80011e0:	4619      	mov	r1, r3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff13 	bl	800100e <write_Byte>
	for(uint8_t i=0; i<255; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	73bb      	strb	r3, [r7, #14]
 80011ec:	e010      	b.n	8001210 <convertT_CMD+0x44>
	{
		if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	4619      	mov	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f003 fc28 	bl	8004a48 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <convertT_CMD+0x38>
		{
			fault = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
			break;
 8001202:	e008      	b.n	8001216 <convertT_CMD+0x4a>
		}
		delayMicro(50);
 8001204:	2032      	movs	r0, #50	; 0x32
 8001206:	f000 f8c5 	bl	8001394 <delayMicro>
	for(uint8_t i=0; i<255; i++)
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	3301      	adds	r3, #1
 800120e:	73bb      	strb	r3, [r7, #14]
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d1eb      	bne.n	80011ee <convertT_CMD+0x22>
	}
	return fault;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <readScratchpad_CMD>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None.
  */
void readScratchpad_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
	write_Byte(GPIOx, GPIO_Pin, READ_SCRATCHPAD);
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	22be      	movs	r2, #190	; 0xbe
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff feeb 	bl	800100e <write_Byte>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <decode_Temperature>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None.
  */
float decode_Temperature (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
	int8_t k;
	uint8_t temp_LSB, temp_MSB;
	uint16_t u16_temp, mask = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	82bb      	strh	r3, [r7, #20]
	float temperature = 0.0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
	temp_LSB = read_Byte(GPIOx, GPIO_Pin);
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ff03 	bl	8001066 <read_Byte>
 8001260:	4603      	mov	r3, r0
 8001262:	73fb      	strb	r3, [r7, #15]
	temp_MSB = read_Byte(GPIOx, GPIO_Pin);
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	4619      	mov	r1, r3
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fefc 	bl	8001066 <read_Byte>
 800126e:	4603      	mov	r3, r0
 8001270:	73bb      	strb	r3, [r7, #14]

	u16_temp = ((temp_MSB << 8) | temp_LSB);
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	81bb      	strh	r3, [r7, #12]

	for (k = -4; k < 7; k++)
 8001282:	23fc      	movs	r3, #252	; 0xfc
 8001284:	75fb      	strb	r3, [r7, #23]
 8001286:	e022      	b.n	80012ce <decode_Temperature+0x8e>
	{
		if (u16_temp & mask)
 8001288:	89ba      	ldrh	r2, [r7, #12]
 800128a:	8abb      	ldrh	r3, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <decode_Temperature+0x7c>
		{
			temperature += powf(2,k);
 8001294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a0:	eef0 0a67 	vmov.f32	s1, s15
 80012a4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012a8:	f00a fc82 	bl	800bbb0 <powf>
 80012ac:	eeb0 7a40 	vmov.f32	s14, s0
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b8:	edc7 7a04 	vstr	s15, [r7, #16]
		}
		mask = mask << 1;
 80012bc:	8abb      	ldrh	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	82bb      	strh	r3, [r7, #20]
	for (k = -4; k < 7; k++)
 80012c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	75fb      	strb	r3, [r7, #23]
 80012ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	ddd8      	ble.n	8001288 <decode_Temperature+0x48>
	}
	return temperature;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	ee07 3a90 	vmov	s15, r3
}
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <DS18B20_All_Convert>:
  * @retval This parameter can be one of the enum values:
  *            @arg 0: if there has been no failure in the conversion.
  *            @arg 1: if there has been failure in the conversion.
  */
_Bool DS18B20_All_Convert(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]
	_Bool fault = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
	if(reset_CMD(GPIOx, GPIO_Pin))
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fed9 	bl	80010b2 <reset_CMD>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <DS18B20_All_Convert+0x24>
	{
		return fault;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	e00f      	b.n	800132a <DS18B20_All_Convert+0x44>
	}
	skipROM_CMD(GPIOx, GPIO_Pin);
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff4c 	bl	80011ac <skipROM_CMD>
	if(convertT_CMD(GPIOx, GPIO_Pin))
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff57 	bl	80011cc <convertT_CMD>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <DS18B20_All_Convert+0x42>
	{
		return fault;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	e000      	b.n	800132a <DS18B20_All_Convert+0x44>
	}
	return fault;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <DS18B20_Read_Temp>:
  * @retval This parameter can be one of the enum values:
  *            @arg temp: return the device temperature.
  *            @arg fault: return -250.0 if there has been failure
  */
float DS18B20_Read_Temp(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t dirb[])
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	460b      	mov	r3, r1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	817b      	strh	r3, [r7, #10]
	float temp;
	float fault = -250.0;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <DS18B20_Read_Temp+0x5c>)
 8001344:	617b      	str	r3, [r7, #20]
	if(reset_CMD(GPIOx, GPIO_Pin))
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	4619      	mov	r1, r3
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff feb1 	bl	80010b2 <reset_CMD>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <DS18B20_Read_Temp+0x26>
	{
		return fault;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	e012      	b.n	8001380 <DS18B20_Read_Temp+0x4c>
	}
	matchROM_CMD(GPIOx, GPIO_Pin, dirb);
 800135a:	897b      	ldrh	r3, [r7, #10]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4619      	mov	r1, r3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fed3 	bl	800110c <matchROM_CMD>
	readScratchpad_CMD(GPIOx, GPIO_Pin);
 8001366:	897b      	ldrh	r3, [r7, #10]
 8001368:	4619      	mov	r1, r3
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff ff58 	bl	8001220 <readScratchpad_CMD>
	temp = decode_Temperature(GPIOx, GPIO_Pin);
 8001370:	897b      	ldrh	r3, [r7, #10]
 8001372:	4619      	mov	r1, r3
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff ff63 	bl	8001240 <decode_Temperature>
 800137a:	ed87 0a04 	vstr	s0, [r7, #16]
	return temp;
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	ee07 3a90 	vmov	s15, r3
}
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	c37a0000 	.word	0xc37a0000

08001394 <delayMicro>:
 * @note 	Sólo cuenta hasta 65535/f microsegundos. Siendo f la frecuencia en MHz.
 * 		 	Asegurarse de inicializar  HAL_TIM_Base_Start(&htim).
 * 		 	Modificar la frecuencia del timer en MHz (pasado por prescaler).
 */
void delayMicro (uint32_t delay)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
#define RT_FREQUENCY_delayMicro 100
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <delayMicro+0x34>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim10)<(delay*RT_FREQUENCY_delayMicro));
 80013a4:	bf00      	nop
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <delayMicro+0x34>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2164      	movs	r1, #100	; 0x64
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3f6      	bcc.n	80013a6 <delayMicro+0x12>
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000364 	.word	0x20000364

080013cc <read_AllTemp>:
  * @brief	Read all values of DS18B20 sensor temperature.
  * @param 	None
  * @return None.
  */
void read_AllTemp (void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if (!DS18B20_All_Convert(TempDS1_GPIO_Port, TempDS1_Pin))
 80013d0:	2120      	movs	r1, #32
 80013d2:	482b      	ldr	r0, [pc, #172]	; (8001480 <read_AllTemp+0xb4>)
 80013d4:	f7ff ff87 	bl	80012e6 <DS18B20_All_Convert>
 80013d8:	4603      	mov	r3, r0
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d048      	beq.n	8001476 <read_AllTemp+0xaa>
	{
		Temp.Pack1 = DS18B20_Read_Temp(TempDS1_GPIO_Port, TempDS1_Pin, dir1);
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <read_AllTemp+0xb8>)
 80013e6:	2120      	movs	r1, #32
 80013e8:	4825      	ldr	r0, [pc, #148]	; (8001480 <read_AllTemp+0xb4>)
 80013ea:	f7ff ffa3 	bl	8001334 <DS18B20_Read_Temp>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <read_AllTemp+0xbc>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]
	//	Temp.Pack3 = DS18B20_Read_Temp(TempDS1_GPIO_Port, TempDS1_Pin, dir1);
	//	Temp.Pack2 = DS18B20_Read_Temp(TempDS1_GPIO_Port, TempDS1_Pin, dir1);
	//	Temp.Pack4 = DS18B20_Read_Temp(TempDS1_GPIO_Port, TempDS1_Pin, dir1);
		if ((Temp.Pack1 == -250.0) | (Temp.Pack2 == -250.0) | (Temp.Pack3 == -250.0) | (Temp.Pack4 == -250.0))
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <read_AllTemp+0xbc>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800148c <read_AllTemp+0xc0>
 8001402:	eef4 7a47 	vcmp.f32	s15, s14
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <read_AllTemp+0xbc>)
 8001414:	edd3 7a01 	vldr	s15, [r3, #4]
 8001418:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800148c <read_AllTemp+0xc0>
 800141c:	eef4 7a47 	vcmp.f32	s15, s14
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <read_AllTemp+0xbc>)
 8001434:	edd3 7a02 	vldr	s15, [r3, #8]
 8001438:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800148c <read_AllTemp+0xc0>
 800143c:	eef4 7a47 	vcmp.f32	s15, s14
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	bf0c      	ite	eq
 8001446:	2301      	moveq	r3, #1
 8001448:	2300      	movne	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <read_AllTemp+0xbc>)
 8001450:	edd2 7a03 	vldr	s15, [r2, #12]
 8001454:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800148c <read_AllTemp+0xc0>
 8001458:	eef4 7a47 	vcmp.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	bf0c      	ite	eq
 8001462:	2201      	moveq	r2, #1
 8001464:	2200      	movne	r2, #0
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	4313      	orrs	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <read_AllTemp+0xb0>
		{
			flag_error.DS18B20 = 1;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <read_AllTemp+0xc4>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
		}

	}
		else	flag_error.DS18B20 = 1;
}
 8001474:	e002      	b.n	800147c <read_AllTemp+0xb0>
		else	flag_error.DS18B20 = 1;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <read_AllTemp+0xc4>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40020800 	.word	0x40020800
 8001484:	20000000 	.word	0x20000000
 8001488:	20000418 	.word	0x20000418
 800148c:	c37a0000 	.word	0xc37a0000
 8001490:	200003b8 	.word	0x200003b8
 8001494:	00000000 	.word	0x00000000

08001498 <read_ADC1>:
  * @brief	Read all values of ADC1.
  * @param 	None
  * @return None.
  */
void read_ADC1 (void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);// start the ADC
 800149c:	483e      	ldr	r0, [pc, #248]	; (8001598 <read_ADC1+0x100>)
 800149e:	f002 f88d 	bl	80035bc <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 1);
 80014a2:	2101      	movs	r1, #1
 80014a4:	483c      	ldr	r0, [pc, #240]	; (8001598 <read_ADC1+0x100>)
 80014a6:	f002 f970 	bl	800378a <HAL_ADC_PollForConversion>
	ADC1_value.Channel1 = HAL_ADC_GetValue(&hadc1);
 80014aa:	483b      	ldr	r0, [pc, #236]	; (8001598 <read_ADC1+0x100>)
 80014ac:	f002 f9f8 	bl	80038a0 <HAL_ADC_GetValue>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a3a      	ldr	r2, [pc, #232]	; (800159c <read_ADC1+0x104>)
 80014b4:	6013      	str	r3, [r2, #0]
	HAL_ADC_PollForConversion(&hadc1, 1);
 80014b6:	2101      	movs	r1, #1
 80014b8:	4837      	ldr	r0, [pc, #220]	; (8001598 <read_ADC1+0x100>)
 80014ba:	f002 f966 	bl	800378a <HAL_ADC_PollForConversion>
	ADC1_value.Channel2 = HAL_ADC_GetValue(&hadc1);
 80014be:	4836      	ldr	r0, [pc, #216]	; (8001598 <read_ADC1+0x100>)
 80014c0:	f002 f9ee 	bl	80038a0 <HAL_ADC_GetValue>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a35      	ldr	r2, [pc, #212]	; (800159c <read_ADC1+0x104>)
 80014c8:	6053      	str	r3, [r2, #4]
	HAL_ADC_PollForConversion(&hadc1, 1);
 80014ca:	2101      	movs	r1, #1
 80014cc:	4832      	ldr	r0, [pc, #200]	; (8001598 <read_ADC1+0x100>)
 80014ce:	f002 f95c 	bl	800378a <HAL_ADC_PollForConversion>
	ADC1_value.Channel3 = HAL_ADC_GetValue(&hadc1);
 80014d2:	4831      	ldr	r0, [pc, #196]	; (8001598 <read_ADC1+0x100>)
 80014d4:	f002 f9e4 	bl	80038a0 <HAL_ADC_GetValue>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a30      	ldr	r2, [pc, #192]	; (800159c <read_ADC1+0x104>)
 80014dc:	6093      	str	r3, [r2, #8]
	HAL_ADC_PollForConversion(&hadc1, 1);
 80014de:	2101      	movs	r1, #1
 80014e0:	482d      	ldr	r0, [pc, #180]	; (8001598 <read_ADC1+0x100>)
 80014e2:	f002 f952 	bl	800378a <HAL_ADC_PollForConversion>
	ADC1_value.Channel4 = HAL_ADC_GetValue(&hadc1);
 80014e6:	482c      	ldr	r0, [pc, #176]	; (8001598 <read_ADC1+0x100>)
 80014e8:	f002 f9da 	bl	80038a0 <HAL_ADC_GetValue>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a2b      	ldr	r2, [pc, #172]	; (800159c <read_ADC1+0x104>)
 80014f0:	60d3      	str	r3, [r2, #12]
	HAL_ADC_PollForConversion(&hadc1, 1);
 80014f2:	2101      	movs	r1, #1
 80014f4:	4828      	ldr	r0, [pc, #160]	; (8001598 <read_ADC1+0x100>)
 80014f6:	f002 f948 	bl	800378a <HAL_ADC_PollForConversion>
	ADC1_value.Temp_uC = ((3.3*HAL_ADC_GetValue(&hadc1)/4095 - V25)/Avg_Slope)+25;
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <read_ADC1+0x100>)
 80014fc:	f002 f9d0 	bl	80038a0 <HAL_ADC_GetValue>
 8001500:	4603      	mov	r3, r0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f816 	bl	8000534 <__aeabi_ui2d>
 8001508:	a31b      	add	r3, pc, #108	; (adr r3, 8001578 <read_ADC1+0xe0>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f88b 	bl	8000628 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	a319      	add	r3, pc, #100	; (adr r3, 8001580 <read_ADC1+0xe8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f9ac 	bl	800087c <__aeabi_ddiv>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	a316      	add	r3, pc, #88	; (adr r3, 8001588 <read_ADC1+0xf0>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7fe fec1 	bl	80002b8 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	a314      	add	r3, pc, #80	; (adr r3, 8001590 <read_ADC1+0xf8>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f99a 	bl	800087c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <read_ADC1+0x108>)
 8001556:	f7fe feb1 	bl	80002bc <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fb39 	bl	8000bd8 <__aeabi_d2f>
 8001566:	4603      	mov	r3, r0
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <read_ADC1+0x104>)
 800156a:	6113      	str	r3, [r2, #16]

	HAL_ADC_Stop(&hadc1); // stop the adc
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <read_ADC1+0x100>)
 800156e:	f002 f8d9 	bl	8003724 <HAL_ADC_Stop>
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	66666666 	.word	0x66666666
 800157c:	400a6666 	.word	0x400a6666
 8001580:	00000000 	.word	0x00000000
 8001584:	40affe00 	.word	0x40affe00
 8001588:	851eb852 	.word	0x851eb852
 800158c:	3fe851eb 	.word	0x3fe851eb
 8001590:	47ae147b 	.word	0x47ae147b
 8001594:	3f647ae1 	.word	0x3f647ae1
 8001598:	20000428 	.word	0x20000428
 800159c:	20000660 	.word	0x20000660
 80015a0:	40390000 	.word	0x40390000

080015a4 <info_user_transmit>:
  * @brief	Sends info to UART.
  * @param 	None.
  * @return Return 1 when transmission is completed.
  */
uint8_t info_user_transmit (void)
{
 80015a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a8:	ed2d 8b0a 	vpush	{d8-d12}
 80015ac:	b0ff      	sub	sp, #508	; 0x1fc
 80015ae:	af16      	add	r7, sp, #88	; 0x58
	char buffer[400] = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	3304      	adds	r3, #4
 80015ba:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f007 fa77 	bl	8008ab4 <memset>
	sprintf
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <info_user_transmit+0xfc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	60fb      	str	r3, [r7, #12]
	(
			buffer,
			"#########   INICIO ENVIO DE DATOS   #########\r\n\nIMD: \r\n- Frecuencia: %lu\r\n- Duty: %.1f\r\n\nGiroscopio: \r\nAx\tAy\tAz\tGx\tGy\tGz\r\n%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n\nTemperaturas: \r\n- Temp. Pack1: %.1f\r\n- Temp. Pack2: %.1f\r\n\nValores ADC: \r\n- Canal 1: %lu\r\n- Canal 2: %lu\r\n- Canal 3: %lu\r\n- Canal 4: %lu\r\n- Temp. uC: %.1f\r\n\n#########   FIN ENVIO DE DATOS   #########\r\n\n\n",
			IMD.Frequency, IMD.Duty, MPU6050.Ax, MPU6050.Ay, MPU6050.Az, MPU6050.KalmanAngleX,
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <info_user_transmit+0xfc>)
 80015ce:	68db      	ldr	r3, [r3, #12]
	sprintf
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffd1 	bl	8000578 <__aeabi_f2d>
 80015d6:	e9c7 0100 	strd	r0, r1, [r7]
 80015da:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <info_user_transmit+0x100>)
 80015dc:	ed93 8b02 	vldr	d8, [r3, #8]
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <info_user_transmit+0x100>)
 80015e2:	ed93 9b04 	vldr	d9, [r3, #16]
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <info_user_transmit+0x100>)
 80015e8:	ed93 ab06 	vldr	d10, [r3, #24]
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <info_user_transmit+0x100>)
 80015ee:	ed93 bb12 	vldr	d11, [r3, #72]	; 0x48
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <info_user_transmit+0x100>)
 80015f4:	ed93 cb14 	vldr	d12, [r3, #80]	; 0x50
			MPU6050.KalmanAngleY, Temp.Pack1, Temp.Pack2, ADC1_value.Channel1, ADC1_value.Channel2, ADC1_value.Channel3,
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <info_user_transmit+0x104>)
 80015fa:	681b      	ldr	r3, [r3, #0]
	sprintf
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffbb 	bl	8000578 <__aeabi_f2d>
 8001602:	4682      	mov	sl, r0
 8001604:	468b      	mov	fp, r1
			MPU6050.KalmanAngleY, Temp.Pack1, Temp.Pack2, ADC1_value.Channel1, ADC1_value.Channel2, ADC1_value.Channel3,
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <info_user_transmit+0x104>)
 8001608:	685b      	ldr	r3, [r3, #4]
	sprintf
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffb4 	bl	8000578 <__aeabi_f2d>
 8001610:	4680      	mov	r8, r0
 8001612:	4689      	mov	r9, r1
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <info_user_transmit+0x108>)
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <info_user_transmit+0x108>)
 800161c:	685e      	ldr	r6, [r3, #4]
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <info_user_transmit+0x108>)
 8001620:	689d      	ldr	r5, [r3, #8]
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <info_user_transmit+0x108>)
 8001624:	68dc      	ldr	r4, [r3, #12]
			ADC1_value.Channel4, ADC1_value.Temp_uC
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <info_user_transmit+0x108>)
 8001628:	691b      	ldr	r3, [r3, #16]
	sprintf
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffa4 	bl	8000578 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	f107 0010 	add.w	r0, r7, #16
 8001638:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800163c:	9413      	str	r4, [sp, #76]	; 0x4c
 800163e:	9512      	str	r5, [sp, #72]	; 0x48
 8001640:	9611      	str	r6, [sp, #68]	; 0x44
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	9110      	str	r1, [sp, #64]	; 0x40
 8001646:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800164a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800164e:	ed8d cb0a 	vstr	d12, [sp, #40]	; 0x28
 8001652:	ed8d bb08 	vstr	d11, [sp, #32]
 8001656:	ed8d ab06 	vstr	d10, [sp, #24]
 800165a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800165e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8001662:	ed97 7b00 	vldr	d7, [r7]
 8001666:	ed8d 7b00 	vstr	d7, [sp]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4910      	ldr	r1, [pc, #64]	; (80016b0 <info_user_transmit+0x10c>)
 800166e:	f007 fe93 	bl	8009398 <siprintf>
	);

	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10);
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fdbc 	bl	80001f4 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	f107 0110 	add.w	r1, r7, #16
 8001684:	230a      	movs	r3, #10
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <info_user_transmit+0x110>)
 8001688:	f006 f8e5 	bl	8007856 <HAL_UART_Transmit>
	return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001694:	46bd      	mov	sp, r7
 8001696:	ecbd 8b0a 	vpop	{d8-d12}
 800169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800169e:	bf00      	nop
 80016a0:	20000514 	.word	0x20000514
 80016a4:	200003c0 	.word	0x200003c0
 80016a8:	20000418 	.word	0x20000418
 80016ac:	20000660 	.word	0x20000660
 80016b0:	0800c750 	.word	0x0800c750
 80016b4:	20000674 	.word	0x20000674

080016b8 <info_app_transmit>:
  * @brief	Sends info to app via UART.
  * @param 	None.
  * @return Return 1 when transmission is completed.
  */
uint8_t info_app_transmit (void)
{
 80016b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016bc:	ed2d 8b0a 	vpush	{d8-d12}
 80016c0:	b0b5      	sub	sp, #212	; 0xd4
 80016c2:	af16      	add	r7, sp, #88	; 0x58
	char buffer[100] = {0};
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	2260      	movs	r2, #96	; 0x60
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f007 f9ef 	bl	8008ab4 <memset>
	sprintf
 80016d6:	4b35      	ldr	r3, [pc, #212]	; (80017ac <info_app_transmit+0xf4>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	60fb      	str	r3, [r7, #12]
	(
			buffer,
			"+++++\r\n%lu\r\n%.1f\r\n%.2f\r\n%.2f\r\n%.2f\r\n%.2f\r\n%.2f\r\n%.1f\r\n%.1f\r\n%lu\r\n%lu\r\n%lu\r\n%lu\r\n%.1f\r\n*****\r\n",
			IMD.Frequency, IMD.Duty, MPU6050.Ax, MPU6050.Ay, MPU6050.Az, MPU6050.KalmanAngleX,
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <info_app_transmit+0xf4>)
 80016de:	68db      	ldr	r3, [r3, #12]
	sprintf
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff49 	bl	8000578 <__aeabi_f2d>
 80016e6:	e9c7 0100 	strd	r0, r1, [r7]
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <info_app_transmit+0xf8>)
 80016ec:	ed93 8b02 	vldr	d8, [r3, #8]
 80016f0:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <info_app_transmit+0xf8>)
 80016f2:	ed93 9b04 	vldr	d9, [r3, #16]
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <info_app_transmit+0xf8>)
 80016f8:	ed93 ab06 	vldr	d10, [r3, #24]
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <info_app_transmit+0xf8>)
 80016fe:	ed93 bb12 	vldr	d11, [r3, #72]	; 0x48
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <info_app_transmit+0xf8>)
 8001704:	ed93 cb14 	vldr	d12, [r3, #80]	; 0x50
			MPU6050.KalmanAngleY, Temp.Pack1, Temp.Pack2, ADC1_value.Channel1, ADC1_value.Channel2, ADC1_value.Channel3,
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <info_app_transmit+0xfc>)
 800170a:	681b      	ldr	r3, [r3, #0]
	sprintf
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff33 	bl	8000578 <__aeabi_f2d>
 8001712:	4682      	mov	sl, r0
 8001714:	468b      	mov	fp, r1
			MPU6050.KalmanAngleY, Temp.Pack1, Temp.Pack2, ADC1_value.Channel1, ADC1_value.Channel2, ADC1_value.Channel3,
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <info_app_transmit+0xfc>)
 8001718:	685b      	ldr	r3, [r3, #4]
	sprintf
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff2c 	bl	8000578 <__aeabi_f2d>
 8001720:	4680      	mov	r8, r0
 8001722:	4689      	mov	r9, r1
 8001724:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <info_app_transmit+0x100>)
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <info_app_transmit+0x100>)
 800172c:	685e      	ldr	r6, [r3, #4]
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <info_app_transmit+0x100>)
 8001730:	689d      	ldr	r5, [r3, #8]
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <info_app_transmit+0x100>)
 8001734:	68dc      	ldr	r4, [r3, #12]
			ADC1_value.Channel4, ADC1_value.Temp_uC
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <info_app_transmit+0x100>)
 8001738:	691b      	ldr	r3, [r3, #16]
	sprintf
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff1c 	bl	8000578 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	f107 0014 	add.w	r0, r7, #20
 8001748:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800174c:	9413      	str	r4, [sp, #76]	; 0x4c
 800174e:	9512      	str	r5, [sp, #72]	; 0x48
 8001750:	9611      	str	r6, [sp, #68]	; 0x44
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	9110      	str	r1, [sp, #64]	; 0x40
 8001756:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800175a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800175e:	ed8d cb0a 	vstr	d12, [sp, #40]	; 0x28
 8001762:	ed8d bb08 	vstr	d11, [sp, #32]
 8001766:	ed8d ab06 	vstr	d10, [sp, #24]
 800176a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800176e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8001772:	ed97 7b00 	vldr	d7, [r7]
 8001776:	ed8d 7b00 	vstr	d7, [sp]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	490f      	ldr	r1, [pc, #60]	; (80017bc <info_app_transmit+0x104>)
 800177e:	f007 fe0b 	bl	8009398 <siprintf>
	);

	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 10);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd34 	bl	80001f4 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0114 	add.w	r1, r7, #20
 8001794:	230a      	movs	r3, #10
 8001796:	480a      	ldr	r0, [pc, #40]	; (80017c0 <info_app_transmit+0x108>)
 8001798:	f006 f85d 	bl	8007856 <HAL_UART_Transmit>
	return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	377c      	adds	r7, #124	; 0x7c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	ecbd 8b0a 	vpop	{d8-d12}
 80017a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ac:	20000514 	.word	0x20000514
 80017b0:	200003c0 	.word	0x200003c0
 80017b4:	20000418 	.word	0x20000418
 80017b8:	20000660 	.word	0x20000660
 80017bc:	0800c8b4 	.word	0x0800c8b4
 80017c0:	20000674 	.word	0x20000674

080017c4 <reset_flags>:
  * @brief	Restart stored flag errors.
  * @param	None.
  * @return None.
  */
void reset_flags ()
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
	flag_error = (flag_Errors_t){0};
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <reset_flags+0x1c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	711a      	strb	r2, [r3, #4]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200003b8 	.word	0x200003b8

080017e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ea:	f001 fe0d 	bl	8003408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ee:	f000 f8e5 	bl	80019bc <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f2:	f000 fbd3 	bl	8001f9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80017f6:	f000 f9d9 	bl	8001bac <MX_I2C1_Init>
  MX_IWDG_Init();
 80017fa:	f000 fa05 	bl	8001c08 <MX_IWDG_Init>
  MX_ADC1_Init();
 80017fe:	f000 f947 	bl	8001a90 <MX_ADC1_Init>
  MX_TIM11_Init();
 8001802:	f000 fb15 	bl	8001e30 <MX_TIM11_Init>
  MX_DMA_Init();
 8001806:	f000 fb8b 	bl	8001f20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800180a:	f000 fb5f 	bl	8001ecc <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800180e:	f000 faeb 	bl	8001de8 <MX_TIM10_Init>
  MX_TIM2_Init();
 8001812:	f000 fa13 	bl	8001c3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001816:	f000 fb2f 	bl	8001e78 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 800181a:	f000 faab 	bl	8001d74 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  //################################## INITIAL CHECKS ##################################

    HAL_Delay(500);
 800181e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001822:	f001 fe63 	bl	80034ec <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 8001826:	4855      	ldr	r0, [pc, #340]	; (800197c <main+0x198>)
 8001828:	f004 f973 	bl	8005b12 <HAL_IWDG_Refresh>
    HAL_Delay(500);
 800182c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001830:	f001 fe5c 	bl	80034ec <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 8001834:	4851      	ldr	r0, [pc, #324]	; (800197c <main+0x198>)
 8001836:	f004 f96c 	bl	8005b12 <HAL_IWDG_Refresh>
    HAL_Delay(500);
 800183a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800183e:	f001 fe55 	bl	80034ec <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 8001842:	484e      	ldr	r0, [pc, #312]	; (800197c <main+0x198>)
 8001844:	f004 f965 	bl	8005b12 <HAL_IWDG_Refresh>
    HAL_Delay(500);
 8001848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184c:	f001 fe4e 	bl	80034ec <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 8001850:	484a      	ldr	r0, [pc, #296]	; (800197c <main+0x198>)
 8001852:	f004 f95e 	bl	8005b12 <HAL_IWDG_Refresh>
    HAL_Delay(500);
 8001856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185a:	f001 fe47 	bl	80034ec <HAL_Delay>
    HAL_IWDG_Refresh(&hiwdg);
 800185e:	4847      	ldr	r0, [pc, #284]	; (800197c <main+0x198>)
 8001860:	f004 f957 	bl	8005b12 <HAL_IWDG_Refresh>

    if (HAL_GPIO_ReadPin(IMD_OK_GPIO_Port, IMD_OK_Pin) == GPIO_PIN_RESET)
 8001864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001868:	4845      	ldr	r0, [pc, #276]	; (8001980 <main+0x19c>)
 800186a:	f003 f8ed 	bl	8004a48 <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <main+0xa0>
    {
  	  HAL_GPIO_WritePin(Contactor_out_GPIO_Port, Contactor_out_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	4842      	ldr	r0, [pc, #264]	; (8001984 <main+0x1a0>)
 800187a:	f003 f8fd 	bl	8004a78 <HAL_GPIO_WritePin>
  	  flag_error.IMD = 1;
 800187e:	4b42      	ldr	r3, [pc, #264]	; (8001988 <main+0x1a4>)
 8001880:	2201      	movs	r2, #1
 8001882:	709a      	strb	r2, [r3, #2]
    }

    if (HAL_GPIO_ReadPin(BMS_OK_GPIO_Port, BMS_OK_Pin) == GPIO_PIN_RESET)
 8001884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001888:	483d      	ldr	r0, [pc, #244]	; (8001980 <main+0x19c>)
 800188a:	f003 f8dd 	bl	8004a48 <HAL_GPIO_ReadPin>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <main+0xb6>
    {
  	  flag_error.BMS = 1;
 8001894:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <main+0x1a4>)
 8001896:	2201      	movs	r2, #1
 8001898:	70da      	strb	r2, [r3, #3]
    }

    if (HAL_GPIO_ReadPin(CONTACTOR_IN_GPIO_Port, CONTACTOR_IN_Pin) == GPIO_PIN_RESET)
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4838      	ldr	r0, [pc, #224]	; (8001980 <main+0x19c>)
 80018a0:	f003 f8d2 	bl	8004a48 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <main+0xcc>
    {
  	  flag_error.Contactor = 1;
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <main+0x1a4>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	711a      	strb	r2, [r3, #4]
    }


    //################################## SETUP PERIPHERIALS ##################################

  for (uint8_t a = 1; a<5; a++)
 80018b0:	2301      	movs	r3, #1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	e00d      	b.n	80018d2 <main+0xee>
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018b6:	2120      	movs	r1, #32
 80018b8:	4834      	ldr	r0, [pc, #208]	; (800198c <main+0x1a8>)
 80018ba:	f003 f8f6 	bl	8004aaa <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 80018be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018c2:	f001 fe13 	bl	80034ec <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 80018c6:	482d      	ldr	r0, [pc, #180]	; (800197c <main+0x198>)
 80018c8:	f004 f923 	bl	8005b12 <HAL_IWDG_Refresh>
  for (uint8_t a = 1; a<5; a++)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	3301      	adds	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d9ee      	bls.n	80018b6 <main+0xd2>
  }

  HAL_IWDG_Refresh(&hiwdg);
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <main+0x198>)
 80018da:	f004 f91a 	bl	8005b12 <HAL_IWDG_Refresh>

  HAL_TIM_Base_Start_IT(&htim10);		//delayMicro ()
 80018de:	482c      	ldr	r0, [pc, #176]	; (8001990 <main+0x1ac>)
 80018e0:	f004 fe46 	bl	8006570 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start (&htim9);			//millis()
 80018e4:	482b      	ldr	r0, [pc, #172]	; (8001994 <main+0x1b0>)
 80018e6:	f004 fde9 	bl	80064bc <HAL_TIM_Base_Start>

  	  if (!MPU6050_Init (&hi2c1))			//MPU6050 Incialización
 80018ea:	482b      	ldr	r0, [pc, #172]	; (8001998 <main+0x1b4>)
 80018ec:	f000 fde1 	bl	80024b2 <MPU6050_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <main+0x120>
  		  HAL_UART_Transmit(&huart2, (uint8_t *) "MPU6050 inicializada\r\n", strlen ("MPU6050 inicializada\r\n"), 1);
 80018f6:	2301      	movs	r3, #1
 80018f8:	2216      	movs	r2, #22
 80018fa:	4928      	ldr	r1, [pc, #160]	; (800199c <main+0x1b8>)
 80018fc:	4828      	ldr	r0, [pc, #160]	; (80019a0 <main+0x1bc>)
 80018fe:	f005 ffaa 	bl	8007856 <HAL_UART_Transmit>
 8001902:	e008      	b.n	8001916 <main+0x132>
  	  else
  	  {
  		  HAL_UART_Transmit(&huart2, (uint8_t *) "MPU6050 fallo\r\n", strlen ("MPU6050 fallo\r\n"), 1);
 8001904:	2301      	movs	r3, #1
 8001906:	220f      	movs	r2, #15
 8001908:	4926      	ldr	r1, [pc, #152]	; (80019a4 <main+0x1c0>)
 800190a:	4825      	ldr	r0, [pc, #148]	; (80019a0 <main+0x1bc>)
 800190c:	f005 ffa3 	bl	8007856 <HAL_UART_Transmit>
  		  flag_error.MPU6050 = 1;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <main+0x1a4>)
 8001912:	2201      	movs	r2, #1
 8001914:	705a      	strb	r2, [r3, #1]
  	  }

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Medidor de PWM
 8001916:	2100      	movs	r1, #0
 8001918:	4823      	ldr	r0, [pc, #140]	; (80019a8 <main+0x1c4>)
 800191a:	f004 ffb3 	bl	8006884 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 800191e:	2104      	movs	r1, #4
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <main+0x1c4>)
 8001922:	f004 fee1 	bl	80066e8 <HAL_TIM_IC_Start>

  HAL_UART_Receive_DMA(&huart2, dataRx, 1);		//Recepción de comandos
 8001926:	2201      	movs	r2, #1
 8001928:	4920      	ldr	r1, [pc, #128]	; (80019ac <main+0x1c8>)
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <main+0x1bc>)
 800192c:	f006 f825 	bl	800797a <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, dataRx, 1);		//Orden App
 8001930:	2201      	movs	r2, #1
 8001932:	491e      	ldr	r1, [pc, #120]	; (80019ac <main+0x1c8>)
 8001934:	481e      	ldr	r0, [pc, #120]	; (80019b0 <main+0x1cc>)
 8001936:	f006 f820 	bl	800797a <HAL_UART_Receive_DMA>

  HAL_UART_Transmit(&huart2, (uint8_t *) "#########   INICIALIZADO   #########\r\n\n\n", strlen ((char *) "#########   INICIALIZADO   #########\r\n\n\n"), 3);
 800193a:	2303      	movs	r3, #3
 800193c:	2228      	movs	r2, #40	; 0x28
 800193e:	491d      	ldr	r1, [pc, #116]	; (80019b4 <main+0x1d0>)
 8001940:	4817      	ldr	r0, [pc, #92]	; (80019a0 <main+0x1bc>)
 8001942:	f005 ff88 	bl	8007856 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim11);		//Interrupciones Internas
 8001946:	481c      	ldr	r0, [pc, #112]	; (80019b8 <main+0x1d4>)
 8001948:	f004 fe12 	bl	8006570 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	2120      	movs	r1, #32
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <main+0x1a8>)
 8001952:	f003 f891 	bl	8004a78 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001956:	2120      	movs	r1, #32
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <main+0x1a8>)
 800195a:	f003 f8a6 	bl	8004aaa <HAL_GPIO_TogglePin>
	  for (uint16_t i = 0; i < 500; i++)	//Delay con micros
 800195e:	2300      	movs	r3, #0
 8001960:	80bb      	strh	r3, [r7, #4]
 8001962:	e005      	b.n	8001970 <main+0x18c>
		  delayMicro (100);	//Delay 100us
 8001964:	2064      	movs	r0, #100	; 0x64
 8001966:	f7ff fd15 	bl	8001394 <delayMicro>
	  for (uint16_t i = 0; i < 500; i++)	//Delay con micros
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	3301      	adds	r3, #1
 800196e:	80bb      	strh	r3, [r7, #4]
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001976:	d3f5      	bcc.n	8001964 <main+0x180>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001978:	e7ed      	b.n	8001956 <main+0x172>
 800197a:	bf00      	nop
 800197c:	200003ac 	.word	0x200003ac
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800
 8001988:	200003b8 	.word	0x200003b8
 800198c:	40020000 	.word	0x40020000
 8001990:	20000364 	.word	0x20000364
 8001994:	200005d0 	.word	0x200005d0
 8001998:	20000310 	.word	0x20000310
 800199c:	0800c914 	.word	0x0800c914
 80019a0:	20000674 	.word	0x20000674
 80019a4:	0800c92c 	.word	0x0800c92c
 80019a8:	20000618 	.word	0x20000618
 80019ac:	20000298 	.word	0x20000298
 80019b0:	200004d0 	.word	0x200004d0
 80019b4:	0800c93c 	.word	0x0800c93c
 80019b8:	20000528 	.word	0x20000528

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b094      	sub	sp, #80	; 0x50
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2230      	movs	r2, #48	; 0x30
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f007 f872 	bl	8008ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <SystemClock_Config+0xcc>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <SystemClock_Config+0xcc>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6413      	str	r3, [r2, #64]	; 0x40
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <SystemClock_Config+0xcc>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <SystemClock_Config+0xd0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <SystemClock_Config+0xd0>)
 8001a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <SystemClock_Config+0xd0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a20:	2310      	movs	r3, #16
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a24:	2301      	movs	r3, #1
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a30:	2308      	movs	r3, #8
 8001a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 f875 	bl	8005b34 <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a50:	f000 fd2a 	bl	80024a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	230f      	movs	r3, #15
 8001a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2103      	movs	r1, #3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 fad7 	bl	8006024 <HAL_RCC_ClockConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a7c:	f000 fd14 	bl	80024a8 <Error_Handler>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3750      	adds	r7, #80	; 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001aa4:	4a3e      	ldr	r2, [pc, #248]	; (8001ba0 <MX_ADC1_Init+0x110>)
 8001aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aa8:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001aaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001abc:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad0:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ad2:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <MX_ADC1_Init+0x114>)
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ade:	2205      	movs	r2, #5
 8001ae0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af0:	482a      	ldr	r0, [pc, #168]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001af2:	f001 fd1f 	bl	8003534 <HAL_ADC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001afc:	f000 fcd4 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b00:	2306      	movs	r3, #6
 8001b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4822      	ldr	r0, [pc, #136]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b12:	f001 fed3 	bl	80038bc <HAL_ADC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b1c:	f000 fcc4 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b20:	2307      	movs	r3, #7
 8001b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b28:	463b      	mov	r3, r7
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481b      	ldr	r0, [pc, #108]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b2e:	f001 fec5 	bl	80038bc <HAL_ADC_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b38:	f000 fcb6 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b40:	2303      	movs	r3, #3
 8001b42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4814      	ldr	r0, [pc, #80]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b4a:	f001 feb7 	bl	80038bc <HAL_ADC_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b54:	f000 fca8 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001b58:	2309      	movs	r3, #9
 8001b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4619      	mov	r1, r3
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b66:	f001 fea9 	bl	80038bc <HAL_ADC_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b70:	f000 fc9a 	bl	80024a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_ADC1_Init+0x118>)
 8001b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001b78:	2305      	movs	r3, #5
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b86:	f001 fe99 	bl	80038bc <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001b90:	f000 fc8a 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000428 	.word	0x20000428
 8001ba0:	40012000 	.word	0x40012000
 8001ba4:	0f000001 	.word	0x0f000001
 8001ba8:	10000012 	.word	0x10000012

08001bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <MX_I2C1_Init+0x54>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <MX_I2C1_Init+0x58>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_I2C1_Init+0x50>)
 8001bea:	f002 ff91 	bl	8004b10 <HAL_I2C_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bf4:	f000 fc58 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000310 	.word	0x20000310
 8001c00:	40005400 	.word	0x40005400
 8001c04:	000186a0 	.word	0x000186a0

08001c08 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_IWDG_Init+0x2c>)
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <MX_IWDG_Init+0x30>)
 8001c10:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_IWDG_Init+0x2c>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3999;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_IWDG_Init+0x2c>)
 8001c1a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001c1e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_IWDG_Init+0x2c>)
 8001c22:	f003 ff34 	bl	8005a8e <HAL_IWDG_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001c2c:	f000 fc3c 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200003ac 	.word	0x200003ac
 8001c38:	40003000 	.word	0x40003000

08001c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	; 0x40
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c76:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c9e:	4834      	ldr	r0, [pc, #208]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001ca0:	f004 fbbc 	bl	800641c <HAL_TIM_Base_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001caa:	f000 fbfd 	bl	80024a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cb8:	4619      	mov	r1, r3
 8001cba:	482d      	ldr	r0, [pc, #180]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001cbc:	f005 f8a0 	bl	8006e00 <HAL_TIM_ConfigClockSource>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cc6:	f000 fbef 	bl	80024a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001cca:	4829      	ldr	r0, [pc, #164]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001ccc:	f004 fcb2 	bl	8006634 <HAL_TIM_IC_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cd6:	f000 fbe7 	bl	80024a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001cde:	2350      	movs	r3, #80	; 0x50
 8001ce0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481e      	ldr	r0, [pc, #120]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001cf6:	f005 f94a 	bl	8006f8e <HAL_TIM_SlaveConfigSynchro>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001d00:	f000 fbd2 	bl	80024a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4814      	ldr	r0, [pc, #80]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001d1e:	f004 ffd3 	bl	8006cc8 <HAL_TIM_IC_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001d28:	f000 fbbe 	bl	80024a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001d3e:	f004 ffc3 	bl	8006cc8 <HAL_TIM_IC_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001d48:	f000 fbae 	bl	80024a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_TIM2_Init+0x134>)
 8001d5a:	f005 fcad 	bl	80076b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001d64:	f000 fba0 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3740      	adds	r7, #64	; 0x40
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000618 	.word	0x20000618

08001d74 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <MX_TIM9_Init+0x70>)
 8001d8a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50000-1;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001d8e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d92:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001dae:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001db0:	f004 fb34 	bl	800641c <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001dba:	f000 fb75 	bl	80024a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_TIM9_Init+0x6c>)
 8001dca:	f005 f819 	bl	8006e00 <HAL_TIM_ConfigClockSource>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001dd4:	f000 fb68 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200005d0 	.word	0x200005d0
 8001de4:	40014000 	.word	0x40014000

08001de8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_TIM10_Init+0x40>)
 8001dee:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <MX_TIM10_Init+0x44>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1-1;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <MX_TIM10_Init+0x40>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_TIM10_Init+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535-1;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <MX_TIM10_Init+0x40>)
 8001e00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_TIM10_Init+0x40>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_TIM10_Init+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_TIM10_Init+0x40>)
 8001e14:	f004 fb02 	bl	800641c <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001e1e:	f000 fb43 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000364 	.word	0x20000364
 8001e2c:	40014400 	.word	0x40014400

08001e30 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_TIM11_Init+0x40>)
 8001e36:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <MX_TIM11_Init+0x44>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <MX_TIM11_Init+0x40>)
 8001e3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e40:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_TIM11_Init+0x40>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 300-1;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_TIM11_Init+0x40>)
 8001e4a:	f240 122b 	movw	r2, #299	; 0x12b
 8001e4e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <MX_TIM11_Init+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_TIM11_Init+0x40>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_TIM11_Init+0x40>)
 8001e5e:	f004 fadd 	bl	800641c <HAL_TIM_Base_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001e68:	f000 fb1e 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000528 	.word	0x20000528
 8001e74:	40014800 	.word	0x40014800

08001e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART1_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	f005 fc84 	bl	80077bc <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f000 faf5 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200004d0 	.word	0x200004d0
 8001ec8:	40011000 	.word	0x40011000

08001ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART2_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001f04:	f005 fc5a 	bl	80077bc <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f000 facb 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000674 	.word	0x20000674
 8001f1c:	40004400 	.word	0x40004400

08001f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <MX_DMA_Init+0x78>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <MX_DMA_Init+0x78>)
 8001f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <MX_DMA_Init+0x78>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_DMA_Init+0x78>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <MX_DMA_Init+0x78>)
 8001f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_DMA_Init+0x78>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2010      	movs	r0, #16
 8001f64:	f001 ffb3 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f68:	2010      	movs	r0, #16
 8001f6a:	f001 ffcc 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2038      	movs	r0, #56	; 0x38
 8001f74:	f001 ffab 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f78:	2038      	movs	r0, #56	; 0x38
 8001f7a:	f001 ffc4 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	203a      	movs	r0, #58	; 0x3a
 8001f84:	f001 ffa3 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f88:	203a      	movs	r0, #58	; 0x3a
 8001f8a:	f001 ffbc 	bl	8003f06 <HAL_NVIC_EnableIRQ>

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a41      	ldr	r2, [pc, #260]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <MX_GPIO_Init+0x15c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <MX_GPIO_Init+0x15c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2120      	movs	r1, #32
 8002026:	4835      	ldr	r0, [pc, #212]	; (80020fc <MX_GPIO_Init+0x160>)
 8002028:	f002 fd26 	bl	8004a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TempDS2_Pin|TempDS1_Pin|Contactor_out_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	21b0      	movs	r1, #176	; 0xb0
 8002030:	4833      	ldr	r0, [pc, #204]	; (8002100 <MX_GPIO_Init+0x164>)
 8002032:	f002 fd21 	bl	8004a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_USER_Pin */
  GPIO_InitStruct.Pin = B1_USER_Pin;
 8002036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800203c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_USER_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	482c      	ldr	r0, [pc, #176]	; (8002100 <MX_GPIO_Init+0x164>)
 800204e:	f002 fb77 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002052:	2320      	movs	r3, #32
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4824      	ldr	r0, [pc, #144]	; (80020fc <MX_GPIO_Init+0x160>)
 800206a:	f002 fb69 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : TempDS2_Pin */
  GPIO_InitStruct.Pin = TempDS2_Pin;
 800206e:	2310      	movs	r3, #16
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002072:	2311      	movs	r3, #17
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002076:	2301      	movs	r3, #1
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207a:	2302      	movs	r3, #2
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TempDS2_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	481e      	ldr	r0, [pc, #120]	; (8002100 <MX_GPIO_Init+0x164>)
 8002086:	f002 fb5b 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : TempDS1_Pin */
  GPIO_InitStruct.Pin = TempDS1_Pin;
 800208a:	2320      	movs	r3, #32
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800208e:	2311      	movs	r3, #17
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002092:	2301      	movs	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TempDS1_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4817      	ldr	r0, [pc, #92]	; (8002100 <MX_GPIO_Init+0x164>)
 80020a2:	f002 fb4d 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMD_OK_Pin CONTACTOR_IN_Pin BMS_OK_Pin */
  GPIO_InitStruct.Pin = IMD_OK_Pin|CONTACTOR_IN_Pin|BMS_OK_Pin;
 80020a6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020ac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80020b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4811      	ldr	r0, [pc, #68]	; (8002104 <MX_GPIO_Init+0x168>)
 80020be:	f002 fb3f 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : Contactor_out_Pin */
  GPIO_InitStruct.Pin = Contactor_out_Pin;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Contactor_out_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	4809      	ldr	r0, [pc, #36]	; (8002100 <MX_GPIO_Init+0x164>)
 80020da:	f002 fb31 	bl	8004740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2101      	movs	r1, #1
 80020e2:	2028      	movs	r0, #40	; 0x28
 80020e4:	f001 fef3 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020e8:	2028      	movs	r0, #40	; 0x28
 80020ea:	f001 ff0c 	bl	8003f06 <HAL_NVIC_EnableIRQ>

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020800 	.word	0x40020800
 8002104:	40020400 	.word	0x40020400

08002108 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	//char buffer[30] = {0};
    if (htim->Instance==TIM11) //check if the interrupt comes from TIM11
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d142      	bne.n	80021a0 <HAL_TIM_PeriodElapsedCallback+0x98>
        {
        flag_TIM11++;
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002124:	701a      	strb	r2, [r3, #0]
        HAL_IWDG_Refresh(&hiwdg);
 8002126:	4823      	ldr	r0, [pc, #140]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002128:	f003 fcf3 	bl	8005b12 <HAL_IWDG_Refresh>
        __HAL_TIM_SET_COUNTER(&htim11, 0);
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
        switch (flag_TIM11)
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d01e      	beq.n	800217a <HAL_TIM_PeriodElapsedCallback+0x72>
 800213c:	2b03      	cmp	r3, #3
 800213e:	dc22      	bgt.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8002140:	2b01      	cmp	r3, #1
 8002142:	d002      	beq.n	800214a <HAL_TIM_PeriodElapsedCallback+0x42>
 8002144:	2b02      	cmp	r3, #2
 8002146:	d012      	beq.n	800216e <HAL_TIM_PeriodElapsedCallback+0x66>
 8002148:	e01d      	b.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x7e>
        {
        case 1:
        	if(!flag_error.MPU6050){
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <HAL_TIM_PeriodElapsedCallback+0x5a>
        		MPU6050_Read_All(&hi2c1, &MPU6050);
 8002152:	491b      	ldr	r1, [pc, #108]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002154:	481b      	ldr	r0, [pc, #108]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002156:	f000 fa03 	bl	8002560 <MPU6050_Read_All>
        		HAL_IWDG_Refresh(&hiwdg);
 800215a:	4816      	ldr	r0, [pc, #88]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800215c:	f003 fcd9 	bl	8005b12 <HAL_IWDG_Refresh>
        		break;
 8002160:	e01f      	b.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x9a>
        	}
        	else
        	{
        		flag_TIM11++; //NO PONER BREAK PARA SALTAR
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800216c:	701a      	strb	r2, [r3, #0]
        	}

        case 2: read_AllTemp (); HAL_IWDG_Refresh(&hiwdg); break; // sprintf(buffer, "Case 2: %lu\n\r",__HAL_TIM_GET_COUNTER(&htim11)); HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1);break;
 800216e:	f7ff f92d 	bl	80013cc <read_AllTemp>
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002174:	f003 fccd 	bl	8005b12 <HAL_IWDG_Refresh>
 8002178:	e013      	b.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x9a>

        case 3: read_ADC1 (); HAL_IWDG_Refresh(&hiwdg); break; // sprintf(buffer, "Case 4: %lu\n\r",__HAL_TIM_GET_COUNTER(&htim11)); HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1); break;
 800217a:	f7ff f98d 	bl	8001498 <read_ADC1>
 800217e:	480d      	ldr	r0, [pc, #52]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002180:	f003 fcc7 	bl	8005b12 <HAL_IWDG_Refresh>
 8002184:	e00d      	b.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x9a>

        default:
        	if(flag_app)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x8a>
        		info_app_transmit();
 800218e:	f7ff fa93 	bl	80016b8 <info_app_transmit>
        	flag_TIM11 = 0;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
        	HAL_IWDG_Refresh(&hiwdg);
 8002198:	4806      	ldr	r0, [pc, #24]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800219a:	f003 fcba 	bl	8005b12 <HAL_IWDG_Refresh>
        	break;	//SI NO HAY APP, HAY UNOS MILISEGUNDOS SIN USAR
 800219e:	e000      	b.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x9a>
        }
        }
 80021a0:	bf00      	nop
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40014800 	.word	0x40014800
 80021b0:	20000294 	.word	0x20000294
 80021b4:	200003ac 	.word	0x200003ac
 80021b8:	20000528 	.word	0x20000528
 80021bc:	200003b8 	.word	0x200003b8
 80021c0:	200003c0 	.word	0x200003c0
 80021c4:	20000310 	.word	0x20000310
 80021c8:	200002a0 	.word	0x200002a0

080021cc <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM2) & (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7f1b      	ldrb	r3, [r3, #28]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4013      	ands	r3, r2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_TIM_IC_CaptureCallback+0x3c>
		IMD.ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80021fa:	2100      	movs	r1, #0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f004 ff09 	bl	8007014 <HAL_TIM_ReadCapturedValue>
 8002202:	4603      	mov	r3, r0
 8002204:	4a42      	ldr	r2, [pc, #264]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002206:	6053      	str	r3, [r2, #4]
	if (IMD.ICValue !=0)
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d02b      	beq.n	8002268 <HAL_TIM_IC_CaptureCallback+0x9c>
	{
		IMD.Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) * 100.0) / IMD.ICValue;
 8002210:	2104      	movs	r1, #4
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f004 fefe 	bl	8007014 <HAL_TIM_ReadCapturedValue>
 8002218:	4603      	mov	r3, r0
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f98a 	bl	8000534 <__aeabi_ui2d>
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_TIM_IC_CaptureCallback+0x148>)
 8002226:	f7fe f9ff 	bl	8000628 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	461d      	mov	r5, r3
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f97c 	bl	8000534 <__aeabi_ui2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fe fb1a 	bl	800087c <__aeabi_ddiv>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fcc2 	bl	8000bd8 <__aeabi_d2f>
 8002254:	4603      	mov	r3, r0
 8002256:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002258:	60d3      	str	r3, [r2, #12]
		IMD.Frequency = 100000000 / IMD.ICValue;
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a2e      	ldr	r2, [pc, #184]	; (8002318 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002266:	6093      	str	r3, [r2, #8]
	}

	if ((IMD.Frequency<12) && (IMD.Frequency>8))
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b0b      	cmp	r3, #11
 800226e:	d816      	bhi.n	800229e <HAL_TIM_IC_CaptureCallback+0xd2>
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d912      	bls.n	800229e <HAL_TIM_IC_CaptureCallback+0xd2>
		IMD.Rf = ((90*1200)/(IMD.Duty-5))-1200;
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 800227a:	edd3 7a03 	vldr	s15, [r3, #12]
 800227e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002282:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002286:	eddf 6a25 	vldr	s13, [pc, #148]	; 800231c <HAL_TIM_IC_CaptureCallback+0x150>
 800228a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002320 <HAL_TIM_IC_CaptureCallback+0x154>
 8002292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002298:	edc3 7a04 	vstr	s15, [r3, #16]
 800229c:	e034      	b.n	8002308 <HAL_TIM_IC_CaptureCallback+0x13c>

	else if ((IMD.Frequency<33) && (IMD.Frequency>27))
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d82b      	bhi.n	80022fe <HAL_TIM_IC_CaptureCallback+0x132>
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b1b      	cmp	r3, #27
 80022ac:	d927      	bls.n	80022fe <HAL_TIM_IC_CaptureCallback+0x132>
	{
		if (!((IMD.Duty<11) && (IMD.Duty>4)))
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 80022b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80022b4:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80022b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c0:	bf4c      	ite	mi
 80022c2:	2301      	movmi	r3, #1
 80022c4:	2300      	movpl	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d111      	bne.n	80022f6 <HAL_TIM_IC_CaptureCallback+0x12a>
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_TIM_IC_CaptureCallback+0x144>)
 80022d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80022d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	bfcc      	ite	gt
 80022e6:	2301      	movgt	r3, #1
 80022e8:	2300      	movle	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_TIM_IC_CaptureCallback+0x13a>
				flag_error.IMD = 1;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_TIM_IC_CaptureCallback+0x158>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	709a      	strb	r2, [r3, #2]
		if (!((IMD.Duty<11) && (IMD.Duty>4)))
 80022fc:	e003      	b.n	8002306 <HAL_TIM_IC_CaptureCallback+0x13a>
	}

	else	flag_error.IMD = 1;
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_TIM_IC_CaptureCallback+0x158>)
 8002300:	2201      	movs	r2, #1
 8002302:	709a      	strb	r2, [r3, #2]

	//Si va muy rápido, cambiar  --> sConfigIC.ICPrescaler = TIM_ICPSC_DIV1 -->8;
}
 8002304:	e000      	b.n	8002308 <HAL_TIM_IC_CaptureCallback+0x13c>
		if (!((IMD.Duty<11) && (IMD.Duty>4)))
 8002306:	bf00      	nop
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bdb0      	pop	{r4, r5, r7, pc}
 8002310:	20000514 	.word	0x20000514
 8002314:	40590000 	.word	0x40590000
 8002318:	05f5e100 	.word	0x05f5e100
 800231c:	47d2f000 	.word	0x47d2f000
 8002320:	44960000 	.word	0x44960000
 8002324:	200003b8 	.word	0x200003b8

08002328 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2c      	ldr	r2, [pc, #176]	; (80023e8 <HAL_UART_RxCpltCallback+0xc0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d12b      	bne.n	8002392 <HAL_UART_RxCpltCallback+0x6a>
	{
		if (!strcmp ((char*) dataRx, "i"))
 800233a:	492c      	ldr	r1, [pc, #176]	; (80023ec <HAL_UART_RxCpltCallback+0xc4>)
 800233c:	482c      	ldr	r0, [pc, #176]	; (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 800233e:	f7fd ff4f 	bl	80001e0 <strcmp>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <HAL_UART_RxCpltCallback+0x26>
			info_user_transmit ();
 8002348:	f7ff f92c 	bl	80015a4 <info_user_transmit>
		{
			HAL_UART_Transmit(&huart1, dataRx, 8, 1);
			HAL_UART_Transmit(&huart1, (uint8_t *) " --> Comando no reconocido\r\n", strlen ((char *) " --> Comando no reconocido\r\n"), 5);
		}
	}
}
 800234c:	e048      	b.n	80023e0 <HAL_UART_RxCpltCallback+0xb8>
		else if (!strcmp ((char*) dataRx, "r"))
 800234e:	4929      	ldr	r1, [pc, #164]	; (80023f4 <HAL_UART_RxCpltCallback+0xcc>)
 8002350:	4827      	ldr	r0, [pc, #156]	; (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 8002352:	f7fd ff45 	bl	80001e0 <strcmp>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_UART_RxCpltCallback+0x3a>
			reset_flags ();
 800235c:	f7ff fa32 	bl	80017c4 <reset_flags>
}
 8002360:	e03e      	b.n	80023e0 <HAL_UART_RxCpltCallback+0xb8>
		else if (!strcmp ((char*) dataRx, "P"))
 8002362:	4925      	ldr	r1, [pc, #148]	; (80023f8 <HAL_UART_RxCpltCallback+0xd0>)
 8002364:	4822      	ldr	r0, [pc, #136]	; (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 8002366:	f7fd ff3b 	bl	80001e0 <strcmp>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <HAL_UART_RxCpltCallback+0x50>
			flag_app = 1;
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_UART_RxCpltCallback+0xd4>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
}
 8002376:	e033      	b.n	80023e0 <HAL_UART_RxCpltCallback+0xb8>
			HAL_UART_Transmit(&huart2, dataRx, 8, 1);
 8002378:	2301      	movs	r3, #1
 800237a:	2208      	movs	r2, #8
 800237c:	491c      	ldr	r1, [pc, #112]	; (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 800237e:	4820      	ldr	r0, [pc, #128]	; (8002400 <HAL_UART_RxCpltCallback+0xd8>)
 8002380:	f005 fa69 	bl	8007856 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *) " --> Comando no reconocido\r\n", strlen ((char *) " --> Comando no reconocido\r\n"), 5);
 8002384:	2305      	movs	r3, #5
 8002386:	221c      	movs	r2, #28
 8002388:	491e      	ldr	r1, [pc, #120]	; (8002404 <HAL_UART_RxCpltCallback+0xdc>)
 800238a:	481d      	ldr	r0, [pc, #116]	; (8002400 <HAL_UART_RxCpltCallback+0xd8>)
 800238c:	f005 fa63 	bl	8007856 <HAL_UART_Transmit>
}
 8002390:	e026      	b.n	80023e0 <HAL_UART_RxCpltCallback+0xb8>
	else if (huart->Instance==USART1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_UART_RxCpltCallback+0xe0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d121      	bne.n	80023e0 <HAL_UART_RxCpltCallback+0xb8>
		if (!strcmp ((char*) dataRx, "P"))
 800239c:	4916      	ldr	r1, [pc, #88]	; (80023f8 <HAL_UART_RxCpltCallback+0xd0>)
 800239e:	4814      	ldr	r0, [pc, #80]	; (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 80023a0:	f7fd ff1e 	bl	80001e0 <strcmp>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_UART_RxCpltCallback+0x8a>
			flag_app = 1;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_UART_RxCpltCallback+0xd4>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
}
 80023b0:	e016      	b.n	80023e0 <HAL_UART_RxCpltCallback+0xb8>
		else if (!strcmp ((char*) dataRx, "C"))
 80023b2:	4916      	ldr	r1, [pc, #88]	; (800240c <HAL_UART_RxCpltCallback+0xe4>)
 80023b4:	480e      	ldr	r0, [pc, #56]	; (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 80023b6:	f7fd ff13 	bl	80001e0 <strcmp>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <HAL_UART_RxCpltCallback+0xa0>
			flag_app = 0;
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_UART_RxCpltCallback+0xd4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	e00b      	b.n	80023e0 <HAL_UART_RxCpltCallback+0xb8>
			HAL_UART_Transmit(&huart1, dataRx, 8, 1);
 80023c8:	2301      	movs	r3, #1
 80023ca:	2208      	movs	r2, #8
 80023cc:	4908      	ldr	r1, [pc, #32]	; (80023f0 <HAL_UART_RxCpltCallback+0xc8>)
 80023ce:	4810      	ldr	r0, [pc, #64]	; (8002410 <HAL_UART_RxCpltCallback+0xe8>)
 80023d0:	f005 fa41 	bl	8007856 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) " --> Comando no reconocido\r\n", strlen ((char *) " --> Comando no reconocido\r\n"), 5);
 80023d4:	2305      	movs	r3, #5
 80023d6:	221c      	movs	r2, #28
 80023d8:	490a      	ldr	r1, [pc, #40]	; (8002404 <HAL_UART_RxCpltCallback+0xdc>)
 80023da:	480d      	ldr	r0, [pc, #52]	; (8002410 <HAL_UART_RxCpltCallback+0xe8>)
 80023dc:	f005 fa3b 	bl	8007856 <HAL_UART_Transmit>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40004400 	.word	0x40004400
 80023ec:	0800c968 	.word	0x0800c968
 80023f0:	20000298 	.word	0x20000298
 80023f4:	0800c96c 	.word	0x0800c96c
 80023f8:	0800c970 	.word	0x0800c970
 80023fc:	200002a0 	.word	0x200002a0
 8002400:	20000674 	.word	0x20000674
 8002404:	0800c974 	.word	0x0800c974
 8002408:	40011000 	.word	0x40011000
 800240c:	0800c994 	.word	0x0800c994
 8002410:	200004d0 	.word	0x200004d0

08002414 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IMD_OK_Pin) {
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002424:	d110      	bne.n	8002448 <HAL_GPIO_EXTI_Callback+0x34>
		if (HAL_GPIO_ReadPin(IMD_OK_GPIO_Port, IMD_OK_Pin) == GPIO_PIN_RESET)
 8002426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800242a:	481c      	ldr	r0, [pc, #112]	; (800249c <HAL_GPIO_EXTI_Callback+0x88>)
 800242c:	f002 fb0c 	bl	8004a48 <HAL_GPIO_ReadPin>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d12e      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x80>
		{
			HAL_GPIO_WritePin(Contactor_out_GPIO_Port, Contactor_out_Pin, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	4819      	ldr	r0, [pc, #100]	; (80024a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800243c:	f002 fb1c 	bl	8004a78 <HAL_GPIO_WritePin>
			flag_error.IMD = 1;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_GPIO_EXTI_Callback+0x90>)
 8002442:	2201      	movs	r2, #1
 8002444:	709a      	strb	r2, [r3, #2]
			while(1){}
 8002446:	e7fe      	b.n	8002446 <HAL_GPIO_EXTI_Callback+0x32>
		}
	}

	else if (GPIO_Pin == BMS_OK_Pin) {
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244e:	d10b      	bne.n	8002468 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(BMS_OK_GPIO_Port, BMS_OK_Pin) == GPIO_PIN_RESET)
 8002450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002454:	4811      	ldr	r0, [pc, #68]	; (800249c <HAL_GPIO_EXTI_Callback+0x88>)
 8002456:	f002 faf7 	bl	8004a48 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d119      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x80>
		{
			flag_error.BMS = 1;
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_GPIO_EXTI_Callback+0x90>)
 8002462:	2201      	movs	r2, #1
 8002464:	70da      	strb	r2, [r3, #3]

	else if (GPIO_Pin == B1_USER_Pin) {
		reset_flags();
	}

}
 8002466:	e015      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x80>
	else if (GPIO_Pin == CONTACTOR_IN_Pin) {
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246e:	d10b      	bne.n	8002488 <HAL_GPIO_EXTI_Callback+0x74>
		if (HAL_GPIO_ReadPin(CONTACTOR_IN_GPIO_Port, CONTACTOR_IN_Pin) == GPIO_PIN_RESET)
 8002470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002474:	4809      	ldr	r0, [pc, #36]	; (800249c <HAL_GPIO_EXTI_Callback+0x88>)
 8002476:	f002 fae7 	bl	8004a48 <HAL_GPIO_ReadPin>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x80>
			flag_error.Contactor = 1;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_GPIO_EXTI_Callback+0x90>)
 8002482:	2201      	movs	r2, #1
 8002484:	711a      	strb	r2, [r3, #4]
}
 8002486:	e005      	b.n	8002494 <HAL_GPIO_EXTI_Callback+0x80>
	else if (GPIO_Pin == B1_USER_Pin) {
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248e:	d101      	bne.n	8002494 <HAL_GPIO_EXTI_Callback+0x80>
		reset_flags();
 8002490:	f7ff f998 	bl	80017c4 <reset_flags>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020400 	.word	0x40020400
 80024a0:	40020800 	.word	0x40020800
 80024a4:	200003b8 	.word	0x200003b8

080024a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ac:	b672      	cpsid	i
}
 80024ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <Error_Handler+0x8>

080024b2 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b088      	sub	sp, #32
 80024b6:	af04      	add	r7, sp, #16
 80024b8:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80024ba:	230a      	movs	r3, #10
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f107 030f 	add.w	r3, r7, #15
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2275      	movs	r2, #117	; 0x75
 80024cc:	21d0      	movs	r1, #208	; 0xd0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f002 fd5c 	bl	8004f8c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b68      	cmp	r3, #104	; 0x68
 80024d8:	d13d      	bne.n	8002556 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80024de:	230a      	movs	r3, #10
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	2301      	movs	r3, #1
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	f107 030e 	add.w	r3, r7, #14
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	226b      	movs	r2, #107	; 0x6b
 80024f0:	21d0      	movs	r1, #208	; 0xd0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f002 fc50 	bl	8004d98 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80024f8:	2307      	movs	r3, #7
 80024fa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80024fc:	230a      	movs	r3, #10
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	2301      	movs	r3, #1
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	f107 030e 	add.w	r3, r7, #14
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	2219      	movs	r2, #25
 800250e:	21d0      	movs	r1, #208	; 0xd0
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f002 fc41 	bl	8004d98 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002516:	2300      	movs	r3, #0
 8002518:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800251a:	230a      	movs	r3, #10
 800251c:	9302      	str	r3, [sp, #8]
 800251e:	2301      	movs	r3, #1
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	f107 030e 	add.w	r3, r7, #14
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2301      	movs	r3, #1
 800252a:	221c      	movs	r2, #28
 800252c:	21d0      	movs	r1, #208	; 0xd0
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f002 fc32 	bl	8004d98 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002534:	2300      	movs	r3, #0
 8002536:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002538:	230a      	movs	r3, #10
 800253a:	9302      	str	r3, [sp, #8]
 800253c:	2301      	movs	r3, #1
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	f107 030e 	add.w	r3, r7, #14
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2301      	movs	r3, #1
 8002548:	221b      	movs	r2, #27
 800254a:	21d0      	movs	r1, #208	; 0xd0
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f002 fc23 	bl	8004d98 <HAL_I2C_Mem_Write>
        return 0;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <MPU6050_Init+0xa6>
    }
    return 1;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *hi2c, MPU6050_t *DataStruct) {
 8002560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002564:	b094      	sub	sp, #80	; 0x50
 8002566:	af04      	add	r7, sp, #16
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800256c:	230a      	movs	r3, #10
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	230e      	movs	r3, #14
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2301      	movs	r3, #1
 800257c:	223b      	movs	r2, #59	; 0x3b
 800257e:	21d0      	movs	r1, #208	; 0xd0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f002 fd03 	bl	8004f8c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002586:	7a3b      	ldrb	r3, [r7, #8]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	7a7b      	ldrb	r3, [r7, #9]
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b21a      	sxth	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002598:	7abb      	ldrb	r3, [r7, #10]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b21a      	sxth	r2, r3
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80025aa:	7b3b      	ldrb	r3, [r7, #12]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	7b7b      	ldrb	r3, [r7, #13]
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80025bc:	7bbb      	ldrb	r3, [r7, #14]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80025ca:	7c3b      	ldrb	r3, [r7, #16]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	7c7b      	ldrb	r3, [r7, #17]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80025dc:	7cbb      	ldrb	r3, [r7, #18]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b21a      	sxth	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80025ee:	7d3b      	ldrb	r3, [r7, #20]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	7d7b      	ldrb	r3, [r7, #21]
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ffa4 	bl	8000554 <__aeabi_i2d>
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4bbd      	ldr	r3, [pc, #756]	; (8002908 <MPU6050_Read_All+0x3a8>)
 8002612:	f7fe f933 	bl	800087c <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff94 	bl	8000554 <__aeabi_i2d>
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	4bb5      	ldr	r3, [pc, #724]	; (8002908 <MPU6050_Read_All+0x3a8>)
 8002632:	f7fe f923 	bl	800087c <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff84 	bl	8000554 <__aeabi_i2d>
 800264c:	a3a8      	add	r3, pc, #672	; (adr r3, 80028f0 <MPU6050_Read_All+0x390>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fe f913 	bl	800087c <__aeabi_ddiv>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002660:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800266c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800290c <MPU6050_Read_All+0x3ac>
 8002670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002674:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002910 <MPU6050_Read_All+0x3b0>
 8002678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff63 	bl	8000554 <__aeabi_i2d>
 800268e:	a39a      	add	r3, pc, #616	; (adr r3, 80028f8 <MPU6050_Read_All+0x398>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f8f2 	bl	800087c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff53 	bl	8000554 <__aeabi_i2d>
 80026ae:	a392      	add	r3, pc, #584	; (adr r3, 80028f8 <MPU6050_Read_All+0x398>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fe f8e2 	bl	800087c <__aeabi_ddiv>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff43 	bl	8000554 <__aeabi_i2d>
 80026ce:	a38a      	add	r3, pc, #552	; (adr r3, 80028f8 <MPU6050_Read_All+0x398>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	f7fe f8d2 	bl	800087c <__aeabi_ddiv>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80026e2:	f000 fef7 	bl	80034d4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b8a      	ldr	r3, [pc, #552]	; (8002914 <MPU6050_Read_All+0x3b4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff20 	bl	8000534 <__aeabi_ui2d>
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4b87      	ldr	r3, [pc, #540]	; (8002918 <MPU6050_Read_All+0x3b8>)
 80026fa:	f7fe f8bf 	bl	800087c <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002706:	f000 fee5 	bl	80034d4 <HAL_GetTick>
 800270a:	4603      	mov	r3, r0
 800270c:	4a81      	ldr	r2, [pc, #516]	; (8002914 <MPU6050_Read_All+0x3b4>)
 800270e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002716:	461a      	mov	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271e:	fb03 f202 	mul.w	r2, r3, r2
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002730:	fb03 f301 	mul.w	r3, r3, r1
 8002734:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff0c 	bl	8000554 <__aeabi_i2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	ec43 2b10 	vmov	d0, r2, r3
 8002744:	f009 fa00 	bl	800bb48 <sqrt>
 8002748:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002758:	f7fe f9ce 	bl	8000af8 <__aeabi_dcmpeq>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11f      	bne.n	80027a2 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fef3 	bl	8000554 <__aeabi_i2d>
 800276e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002772:	f7fe f883 	bl	800087c <__aeabi_ddiv>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b17 	vmov	d7, r2, r3
 800277e:	eeb0 0a47 	vmov.f32	s0, s14
 8002782:	eef0 0a67 	vmov.f32	s1, s15
 8002786:	f009 f833 	bl	800b7f0 <atan>
 800278a:	ec51 0b10 	vmov	r0, r1, d0
 800278e:	a35c      	add	r3, pc, #368	; (adr r3, 8002900 <MPU6050_Read_All+0x3a0>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd ff48 	bl	8000628 <__aeabi_dmul>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80027a0:	e005      	b.n	80027ae <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b4:	425b      	negs	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fecc 	bl	8000554 <__aeabi_i2d>
 80027bc:	4682      	mov	sl, r0
 80027be:	468b      	mov	fp, r1
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fec4 	bl	8000554 <__aeabi_i2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	ec43 2b11 	vmov	d1, r2, r3
 80027d4:	ec4b ab10 	vmov	d0, sl, fp
 80027d8:	f009 f9b3 	bl	800bb42 <atan2>
 80027dc:	ec51 0b10 	vmov	r0, r1, d0
 80027e0:	a347      	add	r3, pc, #284	; (adr r3, 8002900 <MPU6050_Read_All+0x3a0>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd ff1f 	bl	8000628 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <MPU6050_Read_All+0x3bc>)
 80027f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027fc:	f7fe f986 	bl	8000b0c <__aeabi_dcmplt>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <MPU6050_Read_All+0x2bc>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <MPU6050_Read_All+0x3c0>)
 8002812:	f7fe f999 	bl	8000b48 <__aeabi_dcmpgt>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d114      	bne.n	8002846 <MPU6050_Read_All+0x2e6>
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <MPU6050_Read_All+0x3c0>)
 8002822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002826:	f7fe f98f 	bl	8000b48 <__aeabi_dcmpgt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <MPU6050_Read_All+0x2fc>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <MPU6050_Read_All+0x3bc>)
 800283c:	f7fe f966 	bl	8000b0c <__aeabi_dcmplt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8002846:	4937      	ldr	r1, [pc, #220]	; (8002924 <MPU6050_Read_All+0x3c4>)
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002856:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800285a:	e014      	b.n	8002886 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002862:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002866:	eeb0 1a47 	vmov.f32	s2, s14
 800286a:	eef0 1a67 	vmov.f32	s3, s15
 800286e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002872:	482c      	ldr	r0, [pc, #176]	; (8002924 <MPU6050_Read_All+0x3c4>)
 8002874:	f000 f85a 	bl	800292c <Kalman_getAngle>
 8002878:	eeb0 7a40 	vmov.f32	s14, s0
 800287c:	eef0 7a60 	vmov.f32	s15, s1
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800288c:	4690      	mov	r8, r2
 800288e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <MPU6050_Read_All+0x3c0>)
 8002898:	4640      	mov	r0, r8
 800289a:	4649      	mov	r1, r9
 800289c:	f7fe f954 	bl	8000b48 <__aeabi_dcmpgt>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028ac:	4614      	mov	r4, r2
 80028ae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80028be:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80028c2:	eeb0 1a47 	vmov.f32	s2, s14
 80028c6:	eef0 1a67 	vmov.f32	s3, s15
 80028ca:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80028ce:	4816      	ldr	r0, [pc, #88]	; (8002928 <MPU6050_Read_All+0x3c8>)
 80028d0:	f000 f82c 	bl	800292c <Kalman_getAngle>
 80028d4:	eeb0 7a40 	vmov.f32	s14, s0
 80028d8:	eef0 7a60 	vmov.f32	s15, s1
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80028e2:	bf00      	nop
 80028e4:	3740      	adds	r7, #64	; 0x40
 80028e6:	46bd      	mov	sp, r7
 80028e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ec:	f3af 8000 	nop.w
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40cc2900 	.word	0x40cc2900
 80028f8:	00000000 	.word	0x00000000
 80028fc:	40606000 	.word	0x40606000
 8002900:	1a63c1f8 	.word	0x1a63c1f8
 8002904:	404ca5dc 	.word	0x404ca5dc
 8002908:	40d00000 	.word	0x40d00000
 800290c:	43aa0000 	.word	0x43aa0000
 8002910:	42121eb8 	.word	0x42121eb8
 8002914:	200006b8 	.word	0x200006b8
 8002918:	408f4000 	.word	0x408f4000
 800291c:	c0568000 	.word	0xc0568000
 8002920:	40568000 	.word	0x40568000
 8002924:	20000050 	.word	0x20000050
 8002928:	20000008 	.word	0x20000008

0800292c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b096      	sub	sp, #88	; 0x58
 8002930:	af00      	add	r7, sp, #0
 8002932:	61f8      	str	r0, [r7, #28]
 8002934:	ed87 0b04 	vstr	d0, [r7, #16]
 8002938:	ed87 1b02 	vstr	d1, [r7, #8]
 800293c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294a:	f7fd fcb5 	bl	80002b8 <__aeabi_dsub>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800295c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002964:	f7fd fe60 	bl	8000628 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fca4 	bl	80002bc <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	69f9      	ldr	r1, [r7, #28]
 800297a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800298a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800298e:	f7fd fe4b 	bl	8000628 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80029a0:	f7fd fc8a 	bl	80002b8 <__aeabi_dsub>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029b2:	f7fd fc81 	bl	80002b8 <__aeabi_dsub>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fc7a 	bl	80002bc <__adddf3>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d4:	f7fd fe28 	bl	8000628 <__aeabi_dmul>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fc6c 	bl	80002bc <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	69f9      	ldr	r1, [r7, #28]
 80029ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80029fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029fe:	f7fd fe13 	bl	8000628 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fd fc55 	bl	80002b8 <__aeabi_dsub>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	69f9      	ldr	r1, [r7, #28]
 8002a14:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a28:	f7fd fdfe 	bl	8000628 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fc40 	bl	80002b8 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	69f9      	ldr	r1, [r7, #28]
 8002a3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a52:	f7fd fde9 	bl	8000628 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fc2d 	bl	80002bc <__adddf3>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	69f9      	ldr	r1, [r7, #28]
 8002a68:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a78:	f7fd fc20 	bl	80002bc <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a8e:	f7fd fef5 	bl	800087c <__aeabi_ddiv>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002aa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002aa4:	f7fd feea 	bl	800087c <__aeabi_ddiv>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ab6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aba:	f7fd fbfd 	bl	80002b8 <__aeabi_dsub>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002acc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ad4:	f7fd fda8 	bl	8000628 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fbec 	bl	80002bc <__adddf3>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	69f9      	ldr	r1, [r7, #28]
 8002aea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002af4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002afc:	f7fd fd94 	bl	8000628 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f7fd fbd8 	bl	80002bc <__adddf3>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	69f9      	ldr	r1, [r7, #28]
 8002b12:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b26:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002b30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b38:	f7fd fd76 	bl	8000628 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fbb8 	bl	80002b8 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	69f9      	ldr	r1, [r7, #28]
 8002b4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002b58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b60:	f7fd fd62 	bl	8000628 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fba4 	bl	80002b8 <__aeabi_dsub>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	69f9      	ldr	r1, [r7, #28]
 8002b76:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002b80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b88:	f7fd fd4e 	bl	8000628 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4620      	mov	r0, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7fd fb90 	bl	80002b8 <__aeabi_dsub>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	69f9      	ldr	r1, [r7, #28]
 8002b9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ba8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bb0:	f7fd fd3a 	bl	8000628 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4620      	mov	r0, r4
 8002bba:	4629      	mov	r1, r5
 8002bbc:	f7fd fb7c 	bl	80002b8 <__aeabi_dsub>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	69f9      	ldr	r1, [r7, #28]
 8002bc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bd0:	ec43 2b17 	vmov	d7, r2, r3
};
 8002bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd8:	eef0 0a67 	vmov.f32	s1, s15
 8002bdc:	3758      	adds	r7, #88	; 0x58
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_MspInit+0x4c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_MspInit+0x4c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002c22:	2005      	movs	r0, #5
 8002c24:	f001 f948 	bl	8003eb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3b      	ldr	r2, [pc, #236]	; (8002d40 <HAL_ADC_MspInit+0x10c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d170      	bne.n	8002d38 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_ADC_MspInit+0x110>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002caa:	23c0      	movs	r3, #192	; 0xc0
 8002cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4822      	ldr	r0, [pc, #136]	; (8002d48 <HAL_ADC_MspInit+0x114>)
 8002cbe:	f001 fd3f 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	481d      	ldr	r0, [pc, #116]	; (8002d4c <HAL_ADC_MspInit+0x118>)
 8002cd6:	f001 fd33 	bl	8004740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_ADC_MspInit+0x120>)
 8002cde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d1c:	480c      	ldr	r0, [pc, #48]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002d1e:	f001 f90d 	bl	8003f3c <HAL_DMA_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8002d28:	f7ff fbbe 	bl	80024a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
 8002d32:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_ADC_MspInit+0x11c>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40012000 	.word	0x40012000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	20000570 	.word	0x20000570
 8002d54:	40026410 	.word	0x40026410

08002d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_I2C_MspInit+0x84>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12b      	bne.n	8002dd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_I2C_MspInit+0x88>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_I2C_MspInit+0x88>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_I2C_MspInit+0x88>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d96:	23c0      	movs	r3, #192	; 0xc0
 8002d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d9a:	2312      	movs	r3, #18
 8002d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002da6:	2304      	movs	r3, #4
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <HAL_I2C_MspInit+0x8c>)
 8002db2:	f001 fcc5 	bl	8004740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_I2C_MspInit+0x88>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <HAL_I2C_MspInit+0x88>)
 8002dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_I2C_MspInit+0x88>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dd2:	bf00      	nop
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40005400 	.word	0x40005400
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020400 	.word	0x40020400

08002de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e08:	d134      	bne.n	8002e74 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a3c      	ldr	r2, [pc, #240]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a35      	ldr	r2, [pc, #212]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	482a      	ldr	r0, [pc, #168]	; (8002f08 <HAL_TIM_Base_MspInit+0x120>)
 8002e5e:	f001 fc6f 	bl	8004740 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 3);
 8002e62:	2203      	movs	r2, #3
 8002e64:	2102      	movs	r1, #2
 8002e66:	201c      	movs	r0, #28
 8002e68:	f001 f831 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e6c:	201c      	movs	r0, #28
 8002e6e:	f001 f84a 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002e72:	e042      	b.n	8002efa <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM9)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <HAL_TIM_Base_MspInit+0x124>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10e      	bne.n	8002e9c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
}
 8002e9a:	e02e      	b.n	8002efa <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM10)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_TIM_Base_MspInit+0x128>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
}
 8002ec2:	e01a      	b.n	8002efa <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM11)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_TIM_Base_MspInit+0x12c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d115      	bne.n	8002efa <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_TIM_Base_MspInit+0x11c>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 3, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2103      	movs	r1, #3
 8002eee:	201a      	movs	r0, #26
 8002ef0:	f000 ffed 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ef4:	201a      	movs	r0, #26
 8002ef6:	f001 f806 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020000 	.word	0x40020000
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	40014400 	.word	0x40014400
 8002f14:	40014800 	.word	0x40014800

08002f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08c      	sub	sp, #48	; 0x30
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_UART_MspInit+0x1c4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d164      	bne.n	8003004 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a67      	ldr	r2, [pc, #412]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8002f44:	f043 0310 	orr.w	r3, r3, #16
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a60      	ldr	r2, [pc, #384]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f84:	2307      	movs	r3, #7
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f88:	f107 031c 	add.w	r3, r7, #28
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4855      	ldr	r0, [pc, #340]	; (80030e4 <HAL_UART_MspInit+0x1cc>)
 8002f90:	f001 fbd6 	bl	8004740 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002f94:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002f96:	4a55      	ldr	r2, [pc, #340]	; (80030ec <HAL_UART_MspInit+0x1d4>)
 8002f98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002f9a:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fa0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fa2:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fae:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fbc:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002fc2:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd0:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002fd6:	4844      	ldr	r0, [pc, #272]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fd8:	f000 ffb0 	bl	8003f3c <HAL_DMA_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002fe2:	f7ff fa61 	bl	80024a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a3f      	ldr	r2, [pc, #252]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
 8002fec:	4a3e      	ldr	r2, [pc, #248]	; (80030e8 <HAL_UART_MspInit+0x1d0>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	2025      	movs	r0, #37	; 0x25
 8002ff8:	f000 ff69 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ffc:	2025      	movs	r0, #37	; 0x25
 8002ffe:	f000 ff82 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003002:	e067      	b.n	80030d4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a39      	ldr	r2, [pc, #228]	; (80030f0 <HAL_UART_MspInit+0x1d8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d162      	bne.n	80030d4 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a32      	ldr	r2, [pc, #200]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_UART_MspInit+0x1c8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003046:	230c      	movs	r3, #12
 8003048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003056:	2307      	movs	r3, #7
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f107 031c 	add.w	r3, r7, #28
 800305e:	4619      	mov	r1, r3
 8003060:	4820      	ldr	r0, [pc, #128]	; (80030e4 <HAL_UART_MspInit+0x1cc>)
 8003062:	f001 fb6d 	bl	8004740 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 8003068:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <HAL_UART_MspInit+0x1e0>)
 800306a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 800306e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003072:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 800307c:	2200      	movs	r2, #0
 800307e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003080:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 8003082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003086:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 800308a:	2200      	movs	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 8003096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800309a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030a8:	4812      	ldr	r0, [pc, #72]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 80030aa:	f000 ff47 	bl	8003f3c <HAL_DMA_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80030b4:	f7ff f9f8 	bl	80024a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
 80030be:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <HAL_UART_MspInit+0x1dc>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2102      	movs	r1, #2
 80030c8:	2026      	movs	r0, #38	; 0x26
 80030ca:	f000 ff00 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030ce:	2026      	movs	r0, #38	; 0x26
 80030d0:	f000 ff19 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 80030d4:	bf00      	nop
 80030d6:	3730      	adds	r7, #48	; 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40011000 	.word	0x40011000
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	20000470 	.word	0x20000470
 80030ec:	40026440 	.word	0x40026440
 80030f0:	40004400 	.word	0x40004400
 80030f4:	200002b0 	.word	0x200002b0
 80030f8:	40026088 	.word	0x40026088

080030fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <NMI_Handler+0x4>

08003102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003106:	e7fe      	b.n	8003106 <HardFault_Handler+0x4>

08003108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800310c:	e7fe      	b.n	800310c <MemManage_Handler+0x4>

0800310e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <BusFault_Handler+0x4>

08003114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <UsageFault_Handler+0x4>

0800311a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003148:	f000 f9b0 	bl	80034ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}

08003150 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <DMA1_Stream5_IRQHandler+0x10>)
 8003156:	f001 f889 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200002b0 	.word	0x200002b0

08003164 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800316a:	f003 fca5 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000528 	.word	0x20000528

08003178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <TIM2_IRQHandler+0x10>)
 800317e:	f003 fc9b 	bl	8006ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000618 	.word	0x20000618

0800318c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <USART1_IRQHandler+0x10>)
 8003192:	f004 fc23 	bl	80079dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200004d0 	.word	0x200004d0

080031a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <USART2_IRQHandler+0x10>)
 80031a6:	f004 fc19 	bl	80079dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000674 	.word	0x20000674

080031b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMD_OK_Pin);
 80031b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031bc:	f001 fc90 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_USER_Pin);
 80031c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031c4:	f001 fc8c 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CONTACTOR_IN_Pin);
 80031c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031cc:	f001 fc88 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BMS_OK_Pin);
 80031d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80031d4:	f001 fc84 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}

080031dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <DMA2_Stream0_IRQHandler+0x10>)
 80031e2:	f001 f843 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000570 	.word	0x20000570

080031f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031f4:	4802      	ldr	r0, [pc, #8]	; (8003200 <DMA2_Stream2_IRQHandler+0x10>)
 80031f6:	f001 f839 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000470 	.word	0x20000470

08003204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
	return 1;
 8003208:	2301      	movs	r3, #1
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <_kill>:

int _kill(int pid, int sig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800321e:	f005 fc1f 	bl	8008a60 <__errno>
 8003222:	4603      	mov	r3, r0
 8003224:	2216      	movs	r2, #22
 8003226:	601a      	str	r2, [r3, #0]
	return -1;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_exit>:

void _exit (int status)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ffe7 	bl	8003214 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003246:	e7fe      	b.n	8003246 <_exit+0x12>

08003248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e00a      	b.n	8003270 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800325a:	f3af 8000 	nop.w
 800325e:	4601      	mov	r1, r0
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	60ba      	str	r2, [r7, #8]
 8003266:	b2ca      	uxtb	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	dbf0      	blt.n	800325a <_read+0x12>
	}

return len;
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e009      	b.n	80032a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	60ba      	str	r2, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dbf1      	blt.n	8003294 <_write+0x12>
	}
	return len;
 80032b0:	687b      	ldr	r3, [r7, #4]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_close>:

int _close(int file)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
	return -1;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032e2:	605a      	str	r2, [r3, #4]
	return 0;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <_isatty>:

int _isatty(int file)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
	return 1;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
	return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <_sbrk+0x5c>)
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <_sbrk+0x60>)
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <_sbrk+0x64>)
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <_sbrk+0x68>)
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <_sbrk+0x64>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003354:	f005 fb84 	bl	8008a60 <__errno>
 8003358:	4603      	mov	r3, r0
 800335a:	220c      	movs	r2, #12
 800335c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e009      	b.n	8003378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <_sbrk+0x64>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <_sbrk+0x64>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <_sbrk+0x64>)
 8003374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20020000 	.word	0x20020000
 8003384:	00000400 	.word	0x00000400
 8003388:	200002a4 	.word	0x200002a4
 800338c:	200006d0 	.word	0x200006d0

08003390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <SystemInit+0x20>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <SystemInit+0x20>)
 800339c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033b8:	480d      	ldr	r0, [pc, #52]	; (80033f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ba:	490e      	ldr	r1, [pc, #56]	; (80033f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033bc:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c0:	e002      	b.n	80033c8 <LoopCopyDataInit>

080033c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033c6:	3304      	adds	r3, #4

080033c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033cc:	d3f9      	bcc.n	80033c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ce:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033d0:	4c0b      	ldr	r4, [pc, #44]	; (8003400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033d4:	e001      	b.n	80033da <LoopFillZerobss>

080033d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033d8:	3204      	adds	r2, #4

080033da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033dc:	d3fb      	bcc.n	80033d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033de:	f7ff ffd7 	bl	8003390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033e2:	f005 fb43 	bl	8008a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033e6:	f7fe f9fd 	bl	80017e4 <main>
  bx  lr    
 80033ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033f4:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 80033f8:	0800ce40 	.word	0x0800ce40
  ldr r2, =_sbss
 80033fc:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003400:	200006d0 	.word	0x200006d0

08003404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003404:	e7fe      	b.n	8003404 <ADC_IRQHandler>
	...

08003408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <HAL_Init+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <HAL_Init+0x40>)
 8003412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_Init+0x40>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_Init+0x40>)
 800341e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_Init+0x40>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a07      	ldr	r2, [pc, #28]	; (8003448 <HAL_Init+0x40>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003430:	2003      	movs	r0, #3
 8003432:	f000 fd41 	bl	8003eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003436:	2000      	movs	r0, #0
 8003438:	f000 f808 	bl	800344c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800343c:	f7ff fbd2 	bl	8002be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023c00 	.word	0x40023c00

0800344c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_InitTick+0x54>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_InitTick+0x58>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4619      	mov	r1, r3
 800345e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003462:	fbb3 f3f1 	udiv	r3, r3, r1
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fd59 	bl	8003f22 <HAL_SYSTICK_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e00e      	b.n	8003498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b0f      	cmp	r3, #15
 800347e:	d80a      	bhi.n	8003496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003480:	2200      	movs	r2, #0
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f000 fd21 	bl	8003ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800348c:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <HAL_InitTick+0x5c>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000098 	.word	0x20000098
 80034a4:	200000a0 	.word	0x200000a0
 80034a8:	2000009c 	.word	0x2000009c

080034ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_IncTick+0x20>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_IncTick+0x24>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <HAL_IncTick+0x24>)
 80034be:	6013      	str	r3, [r2, #0]
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	200000a0 	.word	0x200000a0
 80034d0:	200006bc 	.word	0x200006bc

080034d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return uwTick;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_GetTick+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	200006bc 	.word	0x200006bc

080034ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff ffee 	bl	80034d4 <HAL_GetTick>
 80034f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d005      	beq.n	8003512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_Delay+0x44>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003512:	bf00      	nop
 8003514:	f7ff ffde 	bl	80034d4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d8f7      	bhi.n	8003514 <HAL_Delay+0x28>
  {
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200000a0 	.word	0x200000a0

08003534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e033      	b.n	80035b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fb6e 	bl	8002c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d118      	bne.n	80035a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800357a:	f023 0302 	bic.w	r3, r3, #2
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 faca 	bl	8003b20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
 80035a2:	e001      	b.n	80035a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Start+0x1a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e097      	b.n	8003706 <HAL_ADC_Start+0x14a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d018      	beq.n	800361e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035fc:	4b45      	ldr	r3, [pc, #276]	; (8003714 <HAL_ADC_Start+0x158>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a45      	ldr	r2, [pc, #276]	; (8003718 <HAL_ADC_Start+0x15c>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0c9a      	lsrs	r2, r3, #18
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003610:	e002      	b.n	8003618 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3b01      	subs	r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f9      	bne.n	8003612 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d15f      	bne.n	80036ec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003656:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366a:	d106      	bne.n	800367a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f023 0206 	bic.w	r2, r3, #6
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
 8003678:	e002      	b.n	8003680 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_ADC_Start+0x160>)
 800368a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003694:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d129      	bne.n	8003704 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e020      	b.n	8003704 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a16      	ldr	r2, [pc, #88]	; (8003720 <HAL_ADC_Start+0x164>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d11b      	bne.n	8003704 <HAL_ADC_Start+0x148>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d114      	bne.n	8003704 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	e00b      	b.n	8003704 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f043 0210 	orr.w	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000098 	.word	0x20000098
 8003718:	431bde83 	.word	0x431bde83
 800371c:	40012300 	.word	0x40012300
 8003720:	40012000 	.word	0x40012000

08003724 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_ADC_Stop+0x16>
 8003736:	2302      	movs	r3, #2
 8003738:	e021      	b.n	800377e <HAL_ADC_Stop+0x5a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d113      	bne.n	80037d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80037b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b6:	d10b      	bne.n	80037d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e063      	b.n	8003898 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80037d0:	f7ff fe80 	bl	80034d4 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037d6:	e021      	b.n	800381c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d01d      	beq.n	800381c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_ADC_PollForConversion+0x6c>
 80037e6:	f7ff fe75 	bl	80034d4 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d212      	bcs.n	800381c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d00b      	beq.n	800381c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0204 	orr.w	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e03d      	b.n	8003898 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d1d6      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f06f 0212 	mvn.w	r2, #18
 8003832:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d123      	bne.n	8003896 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11f      	bne.n	8003896 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d111      	bne.n	8003896 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0201 	orr.w	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x1c>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e113      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x244>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b09      	cmp	r3, #9
 80038e6:	d925      	bls.n	8003934 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68d9      	ldr	r1, [r3, #12]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	3b1e      	subs	r3, #30
 80038fe:	2207      	movs	r2, #7
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43da      	mvns	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	400a      	ands	r2, r1
 800390c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68d9      	ldr	r1, [r3, #12]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	4618      	mov	r0, r3
 8003920:	4603      	mov	r3, r0
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4403      	add	r3, r0
 8003926:	3b1e      	subs	r3, #30
 8003928:	409a      	lsls	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	e022      	b.n	800397a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6919      	ldr	r1, [r3, #16]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	2207      	movs	r2, #7
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	400a      	ands	r2, r1
 8003956:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6919      	ldr	r1, [r3, #16]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	4618      	mov	r0, r3
 800396a:	4603      	mov	r3, r0
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4403      	add	r3, r0
 8003970:	409a      	lsls	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b06      	cmp	r3, #6
 8003980:	d824      	bhi.n	80039cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	3b05      	subs	r3, #5
 8003994:	221f      	movs	r2, #31
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	400a      	ands	r2, r1
 80039a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4618      	mov	r0, r3
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	3b05      	subs	r3, #5
 80039be:	fa00 f203 	lsl.w	r2, r0, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34
 80039ca:	e04c      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d824      	bhi.n	8003a1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b23      	subs	r3, #35	; 0x23
 80039e6:	221f      	movs	r2, #31
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43da      	mvns	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	400a      	ands	r2, r1
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4618      	mov	r0, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3b23      	subs	r3, #35	; 0x23
 8003a10:	fa00 f203 	lsl.w	r2, r0, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1c:	e023      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3b41      	subs	r3, #65	; 0x41
 8003a30:	221f      	movs	r2, #31
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3b41      	subs	r3, #65	; 0x41
 8003a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_ADC_ConfigChannel+0x250>)
 8003a68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <HAL_ADC_ConfigChannel+0x254>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d10f      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d8>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b12      	cmp	r3, #18
 8003a7a:	d10b      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <HAL_ADC_ConfigChannel+0x254>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d12b      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x23a>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_ADC_ConfigChannel+0x258>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <HAL_ADC_ConfigChannel+0x1f4>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b11      	cmp	r3, #17
 8003aae:	d122      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_ADC_ConfigChannel+0x258>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d111      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_ADC_ConfigChannel+0x25c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a11      	ldr	r2, [pc, #68]	; (8003b1c <HAL_ADC_ConfigChannel+0x260>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	0c9a      	lsrs	r2, r3, #18
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ae8:	e002      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f9      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40012300 	.word	0x40012300
 8003b10:	40012000 	.word	0x40012000
 8003b14:	10000012 	.word	0x10000012
 8003b18:	20000098 	.word	0x20000098
 8003b1c:	431bde83 	.word	0x431bde83

08003b20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b28:	4b79      	ldr	r3, [pc, #484]	; (8003d10 <ADC_Init+0x1f0>)
 8003b2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <ADC_Init+0x1f4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	e00f      	b.n	8003c1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0202 	bic.w	r2, r2, #2
 8003c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6899      	ldr	r1, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7e1b      	ldrb	r3, [r3, #24]
 8003c38:	005a      	lsls	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01b      	beq.n	8003c84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	3b01      	subs	r3, #1
 8003c78:	035a      	lsls	r2, r3, #13
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e007      	b.n	8003c94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	051a      	lsls	r2, r3, #20
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cd6:	025a      	lsls	r2, r3, #9
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6899      	ldr	r1, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	029a      	lsls	r2, r3, #10
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40012300 	.word	0x40012300
 8003d14:	0f000001 	.word	0x0f000001

08003d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d34:	4013      	ands	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	60d3      	str	r3, [r2, #12]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <__NVIC_GetPriorityGrouping+0x18>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 0307 	and.w	r3, r3, #7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	db0b      	blt.n	8003da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <__NVIC_EnableIRQ+0x38>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e100 	.word	0xe000e100

08003db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db0a      	blt.n	8003de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	490c      	ldr	r1, [pc, #48]	; (8003e04 <__NVIC_SetPriority+0x4c>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de0:	e00a      	b.n	8003df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4908      	ldr	r1, [pc, #32]	; (8003e08 <__NVIC_SetPriority+0x50>)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	3b04      	subs	r3, #4
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	440b      	add	r3, r1
 8003df6:	761a      	strb	r2, [r3, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000e100 	.word	0xe000e100
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f1c3 0307 	rsb	r3, r3, #7
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf28      	it	cs
 8003e2a:	2304      	movcs	r3, #4
 8003e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d902      	bls.n	8003e3c <NVIC_EncodePriority+0x30>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3b03      	subs	r3, #3
 8003e3a:	e000      	b.n	8003e3e <NVIC_EncodePriority+0x32>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	401a      	ands	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43d9      	mvns	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	4313      	orrs	r3, r2
         );
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3724      	adds	r7, #36	; 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e84:	d301      	bcc.n	8003e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00f      	b.n	8003eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <SysTick_Config+0x40>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e92:	210f      	movs	r1, #15
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	f7ff ff8e 	bl	8003db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <SysTick_Config+0x40>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <SysTick_Config+0x40>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff29 	bl	8003d18 <__NVIC_SetPriorityGrouping>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee0:	f7ff ff3e 	bl	8003d60 <__NVIC_GetPriorityGrouping>
 8003ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6978      	ldr	r0, [r7, #20]
 8003eec:	f7ff ff8e 	bl	8003e0c <NVIC_EncodePriority>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff5d 	bl	8003db8 <__NVIC_SetPriority>
}
 8003efe:	bf00      	nop
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff31 	bl	8003d7c <__NVIC_EnableIRQ>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffa2 	bl	8003e74 <SysTick_Config>
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff fac4 	bl	80034d4 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e099      	b.n	800408c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f78:	e00f      	b.n	8003f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7a:	f7ff faab 	bl	80034d4 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d908      	bls.n	8003f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2203      	movs	r2, #3
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e078      	b.n	800408c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e8      	bne.n	8003f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <HAL_DMA_Init+0x158>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d107      	bne.n	8004004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 0307 	bic.w	r3, r3, #7
 800401a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b04      	cmp	r3, #4
 800402c:	d117      	bne.n	800405e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fb01 	bl	8004648 <DMA_CheckFifoParam>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800405a:	2301      	movs	r3, #1
 800405c:	e016      	b.n	800408c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fab8 	bl	80045dc <DMA_CalcBaseAndBitshift>
 800406c:	4603      	mov	r3, r0
 800406e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	223f      	movs	r2, #63	; 0x3f
 8004076:	409a      	lsls	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	f010803f 	.word	0xf010803f

08004098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_DMA_Start_IT+0x26>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e040      	b.n	8004140 <HAL_DMA_Start_IT+0xa8>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d12f      	bne.n	8004132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa4a 	bl	8004580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	223f      	movs	r2, #63	; 0x3f
 80040f2:	409a      	lsls	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0216 	orr.w	r2, r2, #22
 8004106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0208 	orr.w	r2, r2, #8
 800411e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e005      	b.n	800413e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004156:	f7ff f9bd 	bl	80034d4 <HAL_GetTick>
 800415a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d008      	beq.n	800417a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e052      	b.n	8004220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0216 	bic.w	r2, r2, #22
 8004188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <HAL_DMA_Abort+0x62>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ca:	e013      	b.n	80041f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041cc:	f7ff f982 	bl	80034d4 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d90c      	bls.n	80041f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2203      	movs	r2, #3
 80041e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e015      	b.n	8004220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e4      	bne.n	80041cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	223f      	movs	r2, #63	; 0x3f
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d004      	beq.n	8004246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e00c      	b.n	8004260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2205      	movs	r2, #5
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004278:	4b92      	ldr	r3, [pc, #584]	; (80044c4 <HAL_DMA_IRQHandler+0x258>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a92      	ldr	r2, [pc, #584]	; (80044c8 <HAL_DMA_IRQHandler+0x25c>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	2208      	movs	r2, #8
 8004298:	409a      	lsls	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01a      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d013      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	2208      	movs	r2, #8
 80042c6:	409a      	lsls	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2201      	movs	r2, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	2201      	movs	r2, #1
 80042fc:	409a      	lsls	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	f043 0202 	orr.w	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	2204      	movs	r2, #4
 8004314:	409a      	lsls	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d012      	beq.n	8004344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2204      	movs	r2, #4
 8004332:	409a      	lsls	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f043 0204 	orr.w	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2210      	movs	r2, #16
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d043      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d03c      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	2210      	movs	r2, #16
 8004368:	409a      	lsls	r2, r3
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d018      	beq.n	80043ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d024      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
 800439a:	e01f      	b.n	80043dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
 80043ac:	e016      	b.n	80043dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0208 	bic.w	r2, r2, #8
 80043ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	2220      	movs	r2, #32
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 808e 	beq.w	800450a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8086 	beq.w	800450a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	2220      	movs	r2, #32
 8004404:	409a      	lsls	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b05      	cmp	r3, #5
 8004414:	d136      	bne.n	8004484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0216 	bic.w	r2, r2, #22
 8004424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_DMA_IRQHandler+0x1da>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0208 	bic.w	r2, r2, #8
 8004454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	223f      	movs	r2, #63	; 0x3f
 800445c:	409a      	lsls	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d07d      	beq.n	8004576 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
        }
        return;
 8004482:	e078      	b.n	8004576 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01c      	beq.n	80044cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d108      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d030      	beq.n	800450a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e02b      	b.n	800450a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d027      	beq.n	800450a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
 80044c2:	e022      	b.n	800450a <HAL_DMA_IRQHandler+0x29e>
 80044c4:	20000098 	.word	0x20000098
 80044c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0210 	bic.w	r2, r2, #16
 80044e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	2b00      	cmp	r3, #0
 8004510:	d032      	beq.n	8004578 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d022      	beq.n	8004564 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2205      	movs	r2, #5
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3301      	adds	r3, #1
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	429a      	cmp	r2, r3
 8004540:	d307      	bcc.n	8004552 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f2      	bne.n	8004536 <HAL_DMA_IRQHandler+0x2ca>
 8004550:	e000      	b.n	8004554 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004552:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
 8004574:	e000      	b.n	8004578 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004576:	bf00      	nop
    }
  }
}
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop

08004580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800459c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d108      	bne.n	80045c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045be:	e007      	b.n	80045d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	3b10      	subs	r3, #16
 80045ec:	4a14      	ldr	r2, [pc, #80]	; (8004640 <DMA_CalcBaseAndBitshift+0x64>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <DMA_CalcBaseAndBitshift+0x68>)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d909      	bls.n	800461e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	659a      	str	r2, [r3, #88]	; 0x58
 800461c:	e007      	b.n	800462e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004626:	f023 0303 	bic.w	r3, r3, #3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	aaaaaaab 	.word	0xaaaaaaab
 8004644:	0800c9b0 	.word	0x0800c9b0

08004648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11f      	bne.n	80046a2 <DMA_CheckFifoParam+0x5a>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d856      	bhi.n	8004716 <DMA_CheckFifoParam+0xce>
 8004668:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <DMA_CheckFifoParam+0x28>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	08004681 	.word	0x08004681
 8004674:	08004693 	.word	0x08004693
 8004678:	08004681 	.word	0x08004681
 800467c:	08004717 	.word	0x08004717
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d046      	beq.n	800471a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004690:	e043      	b.n	800471a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800469a:	d140      	bne.n	800471e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a0:	e03d      	b.n	800471e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046aa:	d121      	bne.n	80046f0 <DMA_CheckFifoParam+0xa8>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d837      	bhi.n	8004722 <DMA_CheckFifoParam+0xda>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <DMA_CheckFifoParam+0x70>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046cf 	.word	0x080046cf
 80046c0:	080046c9 	.word	0x080046c9
 80046c4:	080046e1 	.word	0x080046e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      break;
 80046cc:	e030      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d025      	beq.n	8004726 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046de:	e022      	b.n	8004726 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046e8:	d11f      	bne.n	800472a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046ee:	e01c      	b.n	800472a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d903      	bls.n	80046fe <DMA_CheckFifoParam+0xb6>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d003      	beq.n	8004704 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046fc:	e018      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
      break;
 8004702:	e015      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00e      	beq.n	800472e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      break;
 8004714:	e00b      	b.n	800472e <DMA_CheckFifoParam+0xe6>
      break;
 8004716:	bf00      	nop
 8004718:	e00a      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      break;
 800471a:	bf00      	nop
 800471c:	e008      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      break;
 800471e:	bf00      	nop
 8004720:	e006      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      break;
 8004722:	bf00      	nop
 8004724:	e004      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      break;   
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
      break;
 800472e:	bf00      	nop
    }
  } 
  
  return status; 
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e159      	b.n	8004a10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800475c:	2201      	movs	r2, #1
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	f040 8148 	bne.w	8004a0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d005      	beq.n	8004792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800478e:	2b02      	cmp	r3, #2
 8004790:	d130      	bne.n	80047f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	2203      	movs	r2, #3
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047c8:	2201      	movs	r2, #1
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 0201 	and.w	r2, r3, #1
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d017      	beq.n	8004830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d123      	bne.n	8004884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	08da      	lsrs	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3208      	adds	r2, #8
 8004844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	220f      	movs	r2, #15
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	08da      	lsrs	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3208      	adds	r2, #8
 800487e:	69b9      	ldr	r1, [r7, #24]
 8004880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0203 	and.w	r2, r3, #3
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a2 	beq.w	8004a0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	4b57      	ldr	r3, [pc, #348]	; (8004a28 <HAL_GPIO_Init+0x2e8>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	4a56      	ldr	r2, [pc, #344]	; (8004a28 <HAL_GPIO_Init+0x2e8>)
 80048d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d4:	6453      	str	r3, [r2, #68]	; 0x44
 80048d6:	4b54      	ldr	r3, [pc, #336]	; (8004a28 <HAL_GPIO_Init+0x2e8>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048e2:	4a52      	ldr	r2, [pc, #328]	; (8004a2c <HAL_GPIO_Init+0x2ec>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	220f      	movs	r2, #15
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a49      	ldr	r2, [pc, #292]	; (8004a30 <HAL_GPIO_Init+0x2f0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d019      	beq.n	8004942 <HAL_GPIO_Init+0x202>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a48      	ldr	r2, [pc, #288]	; (8004a34 <HAL_GPIO_Init+0x2f4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_GPIO_Init+0x1fe>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a47      	ldr	r2, [pc, #284]	; (8004a38 <HAL_GPIO_Init+0x2f8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00d      	beq.n	800493a <HAL_GPIO_Init+0x1fa>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a46      	ldr	r2, [pc, #280]	; (8004a3c <HAL_GPIO_Init+0x2fc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d007      	beq.n	8004936 <HAL_GPIO_Init+0x1f6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a45      	ldr	r2, [pc, #276]	; (8004a40 <HAL_GPIO_Init+0x300>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <HAL_GPIO_Init+0x1f2>
 800492e:	2304      	movs	r3, #4
 8004930:	e008      	b.n	8004944 <HAL_GPIO_Init+0x204>
 8004932:	2307      	movs	r3, #7
 8004934:	e006      	b.n	8004944 <HAL_GPIO_Init+0x204>
 8004936:	2303      	movs	r3, #3
 8004938:	e004      	b.n	8004944 <HAL_GPIO_Init+0x204>
 800493a:	2302      	movs	r3, #2
 800493c:	e002      	b.n	8004944 <HAL_GPIO_Init+0x204>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_GPIO_Init+0x204>
 8004942:	2300      	movs	r3, #0
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	f002 0203 	and.w	r2, r2, #3
 800494a:	0092      	lsls	r2, r2, #2
 800494c:	4093      	lsls	r3, r2
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004954:	4935      	ldr	r1, [pc, #212]	; (8004a2c <HAL_GPIO_Init+0x2ec>)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	3302      	adds	r3, #2
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004962:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <HAL_GPIO_Init+0x304>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004986:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <HAL_GPIO_Init+0x304>)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800498c:	4b2d      	ldr	r3, [pc, #180]	; (8004a44 <HAL_GPIO_Init+0x304>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	43db      	mvns	r3, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b0:	4a24      	ldr	r2, [pc, #144]	; (8004a44 <HAL_GPIO_Init+0x304>)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_GPIO_Init+0x304>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049da:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <HAL_GPIO_Init+0x304>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <HAL_GPIO_Init+0x304>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a04:	4a0f      	ldr	r2, [pc, #60]	; (8004a44 <HAL_GPIO_Init+0x304>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	f67f aea2 	bls.w	800475c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	40020000 	.word	0x40020000
 8004a34:	40020400 	.word	0x40020400
 8004a38:	40020800 	.word	0x40020800
 8004a3c:	40020c00 	.word	0x40020c00
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40013c00 	.word	0x40013c00

08004a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	887b      	ldrh	r3, [r7, #2]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
 8004a64:	e001      	b.n	8004a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	807b      	strh	r3, [r7, #2]
 8004a84:	4613      	mov	r3, r2
 8004a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a88:	787b      	ldrb	r3, [r7, #1]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a8e:	887a      	ldrh	r2, [r7, #2]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a94:	e003      	b.n	8004a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	041a      	lsls	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	619a      	str	r2, [r3, #24]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004abc:	887a      	ldrh	r2, [r7, #2]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	041a      	lsls	r2, r3, #16
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	43d9      	mvns	r1, r3
 8004ac8:	887b      	ldrh	r3, [r7, #2]
 8004aca:	400b      	ands	r3, r1
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	619a      	str	r2, [r3, #24]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004aea:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004af6:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd fc88 	bl	8002414 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40013c00 	.word	0x40013c00

08004b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e12b      	b.n	8004d7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fe f90e 	bl	8002d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2224      	movs	r2, #36	; 0x24
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b74:	f001 fc2a 	bl	80063cc <HAL_RCC_GetPCLK1Freq>
 8004b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4a81      	ldr	r2, [pc, #516]	; (8004d84 <HAL_I2C_Init+0x274>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d807      	bhi.n	8004b94 <HAL_I2C_Init+0x84>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a80      	ldr	r2, [pc, #512]	; (8004d88 <HAL_I2C_Init+0x278>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bf94      	ite	ls
 8004b8c:	2301      	movls	r3, #1
 8004b8e:	2300      	movhi	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e006      	b.n	8004ba2 <HAL_I2C_Init+0x92>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a7d      	ldr	r2, [pc, #500]	; (8004d8c <HAL_I2C_Init+0x27c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	bf94      	ite	ls
 8004b9c:	2301      	movls	r3, #1
 8004b9e:	2300      	movhi	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0e7      	b.n	8004d7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a78      	ldr	r2, [pc, #480]	; (8004d90 <HAL_I2C_Init+0x280>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0c9b      	lsrs	r3, r3, #18
 8004bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a6a      	ldr	r2, [pc, #424]	; (8004d84 <HAL_I2C_Init+0x274>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d802      	bhi.n	8004be4 <HAL_I2C_Init+0xd4>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3301      	adds	r3, #1
 8004be2:	e009      	b.n	8004bf8 <HAL_I2C_Init+0xe8>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	4a69      	ldr	r2, [pc, #420]	; (8004d94 <HAL_I2C_Init+0x284>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	495c      	ldr	r1, [pc, #368]	; (8004d84 <HAL_I2C_Init+0x274>)
 8004c14:	428b      	cmp	r3, r1
 8004c16:	d819      	bhi.n	8004c4c <HAL_I2C_Init+0x13c>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e59      	subs	r1, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c2c:	400b      	ands	r3, r1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_I2C_Init+0x138>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1e59      	subs	r1, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	e051      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	e04f      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d111      	bne.n	8004c78 <HAL_I2C_Init+0x168>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e58      	subs	r0, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	440b      	add	r3, r1
 8004c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e012      	b.n	8004c9e <HAL_I2C_Init+0x18e>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1e58      	subs	r0, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6859      	ldr	r1, [r3, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	0099      	lsls	r1, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Init+0x196>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e022      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10e      	bne.n	8004ccc <HAL_I2C_Init+0x1bc>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1e58      	subs	r0, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6859      	ldr	r1, [r3, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	440b      	add	r3, r1
 8004cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	e00f      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e58      	subs	r0, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	0099      	lsls	r1, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	6809      	ldr	r1, [r1, #0]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6911      	ldr	r1, [r2, #16]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68d2      	ldr	r2, [r2, #12]
 8004d26:	4311      	orrs	r1, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	000186a0 	.word	0x000186a0
 8004d88:	001e847f 	.word	0x001e847f
 8004d8c:	003d08ff 	.word	0x003d08ff
 8004d90:	431bde83 	.word	0x431bde83
 8004d94:	10624dd3 	.word	0x10624dd3

08004d98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	460b      	mov	r3, r1
 8004dac:	813b      	strh	r3, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db2:	f7fe fb8f 	bl	80034d4 <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	f040 80d9 	bne.w	8004f78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2319      	movs	r3, #25
 8004dcc:	2201      	movs	r2, #1
 8004dce:	496d      	ldr	r1, [pc, #436]	; (8004f84 <HAL_I2C_Mem_Write+0x1ec>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fc7f 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0cc      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_Mem_Write+0x56>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0c5      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d007      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2221      	movs	r2, #33	; 0x21
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a4d      	ldr	r2, [pc, #308]	; (8004f88 <HAL_I2C_Mem_Write+0x1f0>)
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e56:	88f8      	ldrh	r0, [r7, #6]
 8004e58:	893a      	ldrh	r2, [r7, #8]
 8004e5a:	8979      	ldrh	r1, [r7, #10]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4603      	mov	r3, r0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fab6 	bl	80053d8 <I2C_RequestMemoryWrite>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d052      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e081      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fd00 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d107      	bne.n	8004e9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06b      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d11b      	bne.n	8004f18 <HAL_I2C_Mem_Write+0x180>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1aa      	bne.n	8004e76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fcec 	bl	8005902 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00d      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d107      	bne.n	8004f48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e016      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	00100002 	.word	0x00100002
 8004f88:	ffff0000 	.word	0xffff0000

08004f8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fa6:	f7fe fa95 	bl	80034d4 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	f040 8208 	bne.w	80053ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2319      	movs	r3, #25
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	497b      	ldr	r1, [pc, #492]	; (80051b0 <HAL_I2C_Mem_Read+0x224>)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fb85 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e1fb      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2C_Mem_Read+0x56>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e1f4      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d007      	beq.n	8005008 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2222      	movs	r2, #34	; 0x22
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a5b      	ldr	r2, [pc, #364]	; (80051b4 <HAL_I2C_Mem_Read+0x228>)
 8005048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800504a:	88f8      	ldrh	r0, [r7, #6]
 800504c:	893a      	ldrh	r2, [r7, #8]
 800504e:	8979      	ldrh	r1, [r7, #10]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4603      	mov	r3, r0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa52 	bl	8005504 <I2C_RequestMemoryRead>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e1b0      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d113      	bne.n	800509a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	623b      	str	r3, [r7, #32]
 8005086:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e184      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d11b      	bne.n	80050da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e164      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d11b      	bne.n	800511a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	e144      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005130:	e138      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	2b03      	cmp	r3, #3
 8005138:	f200 80f1 	bhi.w	800531e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	2b01      	cmp	r3, #1
 8005142:	d123      	bne.n	800518c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fc1b 	bl	8005984 <I2C_WaitOnRXNEFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e139      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a
 800518a:	e10b      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	2b02      	cmp	r3, #2
 8005192:	d14e      	bne.n	8005232 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	2200      	movs	r2, #0
 800519c:	4906      	ldr	r1, [pc, #24]	; (80051b8 <HAL_I2C_Mem_Read+0x22c>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fa98 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e10e      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
 80051ae:	bf00      	nop
 80051b0:	00100002 	.word	0x00100002
 80051b4:	ffff0000 	.word	0xffff0000
 80051b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005230:	e0b8      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2200      	movs	r2, #0
 800523a:	4966      	ldr	r1, [pc, #408]	; (80053d4 <HAL_I2C_Mem_Read+0x448>)
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fa49 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0bf      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2200      	movs	r2, #0
 8005296:	494f      	ldr	r1, [pc, #316]	; (80053d4 <HAL_I2C_Mem_Read+0x448>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fa1b 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e091      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800531c:	e042      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fb2e 	bl	8005984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e04c      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d118      	bne.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f aec2 	bne.w	8005132 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3728      	adds	r7, #40	; 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	00010004 	.word	0x00010004

080053d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	460b      	mov	r3, r1
 80053ec:	813b      	strh	r3, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2200      	movs	r2, #0
 800540a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f960 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	d103      	bne.n	8005432 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e05f      	b.n	80054f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005436:	897b      	ldrh	r3, [r7, #10]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	492d      	ldr	r1, [pc, #180]	; (8005500 <I2C_RequestMemoryWrite+0x128>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f998 	bl	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e04c      	b.n	80054f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa02 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b04      	cmp	r3, #4
 8005488:	d107      	bne.n	800549a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e02b      	b.n	80054f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d105      	bne.n	80054b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a4:	893b      	ldrh	r3, [r7, #8]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	e021      	b.n	80054f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054b0:	893b      	ldrh	r3, [r7, #8]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	6a39      	ldr	r1, [r7, #32]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f9dc 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d107      	bne.n	80054e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e005      	b.n	80054f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ea:	893b      	ldrh	r3, [r7, #8]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	00010002 	.word	0x00010002

08005504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	4608      	mov	r0, r1
 800550e:	4611      	mov	r1, r2
 8005510:	461a      	mov	r2, r3
 8005512:	4603      	mov	r3, r0
 8005514:	817b      	strh	r3, [r7, #10]
 8005516:	460b      	mov	r3, r1
 8005518:	813b      	strh	r3, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800552c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800553c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	2200      	movs	r2, #0
 8005546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f8c2 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d103      	bne.n	800556e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0aa      	b.n	80056c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005572:	897b      	ldrh	r3, [r7, #10]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	4952      	ldr	r1, [pc, #328]	; (80056d0 <I2C_RequestMemoryRead+0x1cc>)
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f8fa 	bl	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e097      	b.n	80056c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f964 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d107      	bne.n	80055d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e076      	b.n	80056c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d105      	bne.n	80055ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055e0:	893b      	ldrh	r3, [r7, #8]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	611a      	str	r2, [r3, #16]
 80055ea:	e021      	b.n	8005630 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055ec:	893b      	ldrh	r3, [r7, #8]
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fc:	6a39      	ldr	r1, [r7, #32]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f93e 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b04      	cmp	r3, #4
 8005610:	d107      	bne.n	8005622 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e050      	b.n	80056c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005626:	893b      	ldrh	r3, [r7, #8]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	6a39      	ldr	r1, [r7, #32]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f923 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00d      	beq.n	800565c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2b04      	cmp	r3, #4
 8005646:	d107      	bne.n	8005658 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005656:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e035      	b.n	80056c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2200      	movs	r2, #0
 8005674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f82b 	bl	80056d4 <I2C_WaitOnFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d103      	bne.n	800569c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e013      	b.n	80056c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056a0:	897b      	ldrh	r3, [r7, #10]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	6a3a      	ldr	r2, [r7, #32]
 80056b4:	4906      	ldr	r1, [pc, #24]	; (80056d0 <I2C_RequestMemoryRead+0x1cc>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f863 	bl	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	00010002 	.word	0x00010002

080056d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056e4:	e025      	b.n	8005732 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d021      	beq.n	8005732 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fd fef1 	bl	80034d4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d116      	bne.n	8005732 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0220 	orr.w	r2, r3, #32
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e023      	b.n	800577a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10d      	bne.n	8005758 <I2C_WaitOnFlagUntilTimeout+0x84>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	43da      	mvns	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	e00c      	b.n	8005772 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	43da      	mvns	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4013      	ands	r3, r2
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	429a      	cmp	r2, r3
 8005776:	d0b6      	beq.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005790:	e051      	b.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a0:	d123      	bne.n	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f043 0204 	orr.w	r2, r3, #4
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e046      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d021      	beq.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7fd fe6f 	bl	80034d4 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d116      	bne.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f043 0220 	orr.w	r2, r3, #32
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e020      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d10c      	bne.n	800585a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	43da      	mvns	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e00b      	b.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	43da      	mvns	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4013      	ands	r3, r2
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d18d      	bne.n	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800588c:	e02d      	b.n	80058ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f8ce 	bl	8005a30 <I2C_IsAcknowledgeFailed>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e02d      	b.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d021      	beq.n	80058ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a6:	f7fd fe15 	bl	80034d4 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d116      	bne.n	80058ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f043 0220 	orr.w	r2, r3, #32
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e007      	b.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f4:	2b80      	cmp	r3, #128	; 0x80
 80058f6:	d1ca      	bne.n	800588e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800590e:	e02d      	b.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f88d 	bl	8005a30 <I2C_IsAcknowledgeFailed>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e02d      	b.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d021      	beq.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005928:	f7fd fdd4 	bl	80034d4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	d302      	bcc.n	800593e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d116      	bne.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	f043 0220 	orr.w	r2, r3, #32
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e007      	b.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b04      	cmp	r3, #4
 8005978:	d1ca      	bne.n	8005910 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005990:	e042      	b.n	8005a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b10      	cmp	r3, #16
 800599e:	d119      	bne.n	80059d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0210 	mvn.w	r2, #16
 80059a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e029      	b.n	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d4:	f7fd fd7e 	bl	80034d4 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d302      	bcc.n	80059ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	f043 0220 	orr.w	r2, r3, #32
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e007      	b.n	8005a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d1b5      	bne.n	8005992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a46:	d11b      	bne.n	8005a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	f043 0204 	orr.w	r2, r3, #4
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e034      	b.n	8005b0a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f245 5255 	movw	r2, #21845	; 0x5555
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6852      	ldr	r2, [r2, #4]
 8005abc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6892      	ldr	r2, [r2, #8]
 8005ac6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005ac8:	f7fd fd04 	bl	80034d4 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005ace:	e00f      	b.n	8005af0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005ad0:	f7fd fd00 	bl	80034d4 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b31      	cmp	r3, #49	; 0x31
 8005adc:	d908      	bls.n	8005af0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e00c      	b.n	8005b0a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e8      	bne.n	8005ad0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e264      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d075      	beq.n	8005c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b52:	4ba3      	ldr	r3, [pc, #652]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d00c      	beq.n	8005b78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b5e:	4ba0      	ldr	r3, [pc, #640]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d112      	bne.n	8005b90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b6a:	4b9d      	ldr	r3, [pc, #628]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b76:	d10b      	bne.n	8005b90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b78:	4b99      	ldr	r3, [pc, #612]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d05b      	beq.n	8005c3c <HAL_RCC_OscConfig+0x108>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d157      	bne.n	8005c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e23f      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d106      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x74>
 8005b9a:	4b91      	ldr	r3, [pc, #580]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a90      	ldr	r2, [pc, #576]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e01d      	b.n	8005be4 <HAL_RCC_OscConfig+0xb0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x98>
 8005bb2:	4b8b      	ldr	r3, [pc, #556]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a8a      	ldr	r2, [pc, #552]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	4b88      	ldr	r3, [pc, #544]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a87      	ldr	r2, [pc, #540]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e00b      	b.n	8005be4 <HAL_RCC_OscConfig+0xb0>
 8005bcc:	4b84      	ldr	r3, [pc, #528]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a83      	ldr	r2, [pc, #524]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4b81      	ldr	r3, [pc, #516]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a80      	ldr	r2, [pc, #512]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fd fc72 	bl	80034d4 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fd fc6e 	bl	80034d4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e204      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c06:	4b76      	ldr	r3, [pc, #472]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0xc0>
 8005c12:	e014      	b.n	8005c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fd fc5e 	bl	80034d4 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c1c:	f7fd fc5a 	bl	80034d4 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	; 0x64
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e1f0      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2e:	4b6c      	ldr	r3, [pc, #432]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0xe8>
 8005c3a:	e000      	b.n	8005c3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d063      	beq.n	8005d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c4a:	4b65      	ldr	r3, [pc, #404]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00b      	beq.n	8005c6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c56:	4b62      	ldr	r3, [pc, #392]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d11c      	bne.n	8005c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c62:	4b5f      	ldr	r3, [pc, #380]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d116      	bne.n	8005c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6e:	4b5c      	ldr	r3, [pc, #368]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_RCC_OscConfig+0x152>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d001      	beq.n	8005c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e1c4      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c86:	4b56      	ldr	r3, [pc, #344]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4952      	ldr	r1, [pc, #328]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c9a:	e03a      	b.n	8005d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d020      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ca4:	4b4f      	ldr	r3, [pc, #316]	; (8005de4 <HAL_RCC_OscConfig+0x2b0>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fd fc13 	bl	80034d4 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cb2:	f7fd fc0f 	bl	80034d4 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e1a5      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc4:	4b46      	ldr	r3, [pc, #280]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0f0      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd0:	4b43      	ldr	r3, [pc, #268]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4940      	ldr	r1, [pc, #256]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	600b      	str	r3, [r1, #0]
 8005ce4:	e015      	b.n	8005d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ce6:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <HAL_RCC_OscConfig+0x2b0>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fd fbf2 	bl	80034d4 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cf4:	f7fd fbee 	bl	80034d4 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e184      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d06:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d030      	beq.n	8005d80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d26:	4b30      	ldr	r3, [pc, #192]	; (8005de8 <HAL_RCC_OscConfig+0x2b4>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2c:	f7fd fbd2 	bl	80034d4 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d34:	f7fd fbce 	bl	80034d4 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e164      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0x200>
 8005d52:	e015      	b.n	8005d80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <HAL_RCC_OscConfig+0x2b4>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5a:	f7fd fbbb 	bl	80034d4 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d62:	f7fd fbb7 	bl	80034d4 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e14d      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d74:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80a0 	beq.w	8005ece <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10f      	bne.n	8005dbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dac:	6413      	str	r3, [r2, #64]	; 0x40
 8005dae:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_OscConfig+0x2b8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d121      	bne.n	8005e0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dca:	4b08      	ldr	r3, [pc, #32]	; (8005dec <HAL_RCC_OscConfig+0x2b8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a07      	ldr	r2, [pc, #28]	; (8005dec <HAL_RCC_OscConfig+0x2b8>)
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd6:	f7fd fb7d 	bl	80034d4 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ddc:	e011      	b.n	8005e02 <HAL_RCC_OscConfig+0x2ce>
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
 8005de4:	42470000 	.word	0x42470000
 8005de8:	42470e80 	.word	0x42470e80
 8005dec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df0:	f7fd fb70 	bl	80034d4 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e106      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e02:	4b85      	ldr	r3, [pc, #532]	; (8006018 <HAL_RCC_OscConfig+0x4e4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d106      	bne.n	8005e24 <HAL_RCC_OscConfig+0x2f0>
 8005e16:	4b81      	ldr	r3, [pc, #516]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	4a80      	ldr	r2, [pc, #512]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	6713      	str	r3, [r2, #112]	; 0x70
 8005e22:	e01c      	b.n	8005e5e <HAL_RCC_OscConfig+0x32a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b05      	cmp	r3, #5
 8005e2a:	d10c      	bne.n	8005e46 <HAL_RCC_OscConfig+0x312>
 8005e2c:	4b7b      	ldr	r3, [pc, #492]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	4a7a      	ldr	r2, [pc, #488]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e32:	f043 0304 	orr.w	r3, r3, #4
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70
 8005e38:	4b78      	ldr	r3, [pc, #480]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	4a77      	ldr	r2, [pc, #476]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	6713      	str	r3, [r2, #112]	; 0x70
 8005e44:	e00b      	b.n	8005e5e <HAL_RCC_OscConfig+0x32a>
 8005e46:	4b75      	ldr	r3, [pc, #468]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4a74      	ldr	r2, [pc, #464]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
 8005e52:	4b72      	ldr	r3, [pc, #456]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e56:	4a71      	ldr	r2, [pc, #452]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e58:	f023 0304 	bic.w	r3, r3, #4
 8005e5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d015      	beq.n	8005e92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e66:	f7fd fb35 	bl	80034d4 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6c:	e00a      	b.n	8005e84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6e:	f7fd fb31 	bl	80034d4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e0c5      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e84:	4b65      	ldr	r3, [pc, #404]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0ee      	beq.n	8005e6e <HAL_RCC_OscConfig+0x33a>
 8005e90:	e014      	b.n	8005ebc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e92:	f7fd fb1f 	bl	80034d4 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e98:	e00a      	b.n	8005eb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e9a:	f7fd fb1b 	bl	80034d4 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e0af      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb0:	4b5a      	ldr	r3, [pc, #360]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1ee      	bne.n	8005e9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d105      	bne.n	8005ece <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec2:	4b56      	ldr	r3, [pc, #344]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	4a55      	ldr	r2, [pc, #340]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 809b 	beq.w	800600e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ed8:	4b50      	ldr	r3, [pc, #320]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 030c 	and.w	r3, r3, #12
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d05c      	beq.n	8005f9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d141      	bne.n	8005f70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eec:	4b4c      	ldr	r3, [pc, #304]	; (8006020 <HAL_RCC_OscConfig+0x4ec>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef2:	f7fd faef 	bl	80034d4 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efa:	f7fd faeb 	bl	80034d4 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e081      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0c:	4b43      	ldr	r3, [pc, #268]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f0      	bne.n	8005efa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	019b      	lsls	r3, r3, #6
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	3b01      	subs	r3, #1
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	4937      	ldr	r1, [pc, #220]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f42:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_RCC_OscConfig+0x4ec>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f48:	f7fd fac4 	bl	80034d4 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f50:	f7fd fac0 	bl	80034d4 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e056      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f62:	4b2e      	ldr	r3, [pc, #184]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0x41c>
 8005f6e:	e04e      	b.n	800600e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f70:	4b2b      	ldr	r3, [pc, #172]	; (8006020 <HAL_RCC_OscConfig+0x4ec>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f76:	f7fd faad 	bl	80034d4 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f7e:	f7fd faa9 	bl	80034d4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e03f      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f90:	4b22      	ldr	r3, [pc, #136]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f0      	bne.n	8005f7e <HAL_RCC_OscConfig+0x44a>
 8005f9c:	e037      	b.n	800600e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e032      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005faa:	4b1c      	ldr	r3, [pc, #112]	; (800601c <HAL_RCC_OscConfig+0x4e8>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d028      	beq.n	800600a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d121      	bne.n	800600a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d11a      	bne.n	800600a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fda:	4013      	ands	r3, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fe0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d111      	bne.n	800600a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d107      	bne.n	800600a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006006:	429a      	cmp	r2, r3
 8006008:	d001      	beq.n	800600e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40007000 	.word	0x40007000
 800601c:	40023800 	.word	0x40023800
 8006020:	42470060 	.word	0x42470060

08006024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0cc      	b.n	80061d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006038:	4b68      	ldr	r3, [pc, #416]	; (80061dc <HAL_RCC_ClockConfig+0x1b8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d90c      	bls.n	8006060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006046:	4b65      	ldr	r3, [pc, #404]	; (80061dc <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800604e:	4b63      	ldr	r3, [pc, #396]	; (80061dc <HAL_RCC_ClockConfig+0x1b8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d001      	beq.n	8006060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e0b8      	b.n	80061d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d020      	beq.n	80060ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006078:	4b59      	ldr	r3, [pc, #356]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4a58      	ldr	r2, [pc, #352]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006090:	4b53      	ldr	r3, [pc, #332]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4a52      	ldr	r2, [pc, #328]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800609a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800609c:	4b50      	ldr	r3, [pc, #320]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	494d      	ldr	r1, [pc, #308]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d044      	beq.n	8006144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d107      	bne.n	80060d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c2:	4b47      	ldr	r3, [pc, #284]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d119      	bne.n	8006102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e07f      	b.n	80061d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d003      	beq.n	80060e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d107      	bne.n	80060f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e2:	4b3f      	ldr	r3, [pc, #252]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e06f      	b.n	80061d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f2:	4b3b      	ldr	r3, [pc, #236]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e067      	b.n	80061d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006102:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f023 0203 	bic.w	r2, r3, #3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4934      	ldr	r1, [pc, #208]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006110:	4313      	orrs	r3, r2
 8006112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006114:	f7fd f9de 	bl	80034d4 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611a:	e00a      	b.n	8006132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800611c:	f7fd f9da 	bl	80034d4 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	; 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e04f      	b.n	80061d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006132:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 020c 	and.w	r2, r3, #12
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	429a      	cmp	r2, r3
 8006142:	d1eb      	bne.n	800611c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006144:	4b25      	ldr	r3, [pc, #148]	; (80061dc <HAL_RCC_ClockConfig+0x1b8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d20c      	bcs.n	800616c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b22      	ldr	r3, [pc, #136]	; (80061dc <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800615a:	4b20      	ldr	r3, [pc, #128]	; (80061dc <HAL_RCC_ClockConfig+0x1b8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d001      	beq.n	800616c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e032      	b.n	80061d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d008      	beq.n	800618a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006178:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	4916      	ldr	r1, [pc, #88]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	4313      	orrs	r3, r2
 8006188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	490e      	ldr	r1, [pc, #56]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061aa:	f000 f821 	bl	80061f0 <HAL_RCC_GetSysClockFreq>
 80061ae:	4602      	mov	r2, r0
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	490a      	ldr	r1, [pc, #40]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 80061bc:	5ccb      	ldrb	r3, [r1, r3]
 80061be:	fa22 f303 	lsr.w	r3, r2, r3
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80061c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <HAL_RCC_ClockConfig+0x1c8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fd f93e 	bl	800344c <HAL_InitTick>

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40023c00 	.word	0x40023c00
 80061e0:	40023800 	.word	0x40023800
 80061e4:	0800c998 	.word	0x0800c998
 80061e8:	20000098 	.word	0x20000098
 80061ec:	2000009c 	.word	0x2000009c

080061f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	2300      	movs	r3, #0
 8006202:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006208:	4b67      	ldr	r3, [pc, #412]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 030c 	and.w	r3, r3, #12
 8006210:	2b08      	cmp	r3, #8
 8006212:	d00d      	beq.n	8006230 <HAL_RCC_GetSysClockFreq+0x40>
 8006214:	2b08      	cmp	r3, #8
 8006216:	f200 80bd 	bhi.w	8006394 <HAL_RCC_GetSysClockFreq+0x1a4>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_RCC_GetSysClockFreq+0x34>
 800621e:	2b04      	cmp	r3, #4
 8006220:	d003      	beq.n	800622a <HAL_RCC_GetSysClockFreq+0x3a>
 8006222:	e0b7      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006224:	4b61      	ldr	r3, [pc, #388]	; (80063ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006226:	60bb      	str	r3, [r7, #8]
       break;
 8006228:	e0b7      	b.n	800639a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800622a:	4b61      	ldr	r3, [pc, #388]	; (80063b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800622c:	60bb      	str	r3, [r7, #8]
      break;
 800622e:	e0b4      	b.n	800639a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006230:	4b5d      	ldr	r3, [pc, #372]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006238:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800623a:	4b5b      	ldr	r3, [pc, #364]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d04d      	beq.n	80062e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006246:	4b58      	ldr	r3, [pc, #352]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	099b      	lsrs	r3, r3, #6
 800624c:	461a      	mov	r2, r3
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	ea02 0800 	and.w	r8, r2, r0
 800625e:	ea03 0901 	and.w	r9, r3, r1
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	014b      	lsls	r3, r1, #5
 8006270:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006274:	0142      	lsls	r2, r0, #5
 8006276:	4610      	mov	r0, r2
 8006278:	4619      	mov	r1, r3
 800627a:	ebb0 0008 	subs.w	r0, r0, r8
 800627e:	eb61 0109 	sbc.w	r1, r1, r9
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	018b      	lsls	r3, r1, #6
 800628c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006290:	0182      	lsls	r2, r0, #6
 8006292:	1a12      	subs	r2, r2, r0
 8006294:	eb63 0301 	sbc.w	r3, r3, r1
 8006298:	f04f 0000 	mov.w	r0, #0
 800629c:	f04f 0100 	mov.w	r1, #0
 80062a0:	00d9      	lsls	r1, r3, #3
 80062a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062a6:	00d0      	lsls	r0, r2, #3
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	eb12 0208 	adds.w	r2, r2, r8
 80062b0:	eb43 0309 	adc.w	r3, r3, r9
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f04f 0100 	mov.w	r1, #0
 80062bc:	0259      	lsls	r1, r3, #9
 80062be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80062c2:	0250      	lsls	r0, r2, #9
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	f7fa fcd0 	bl	8000c78 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4613      	mov	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e04a      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e2:	4b31      	ldr	r3, [pc, #196]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	099b      	lsrs	r3, r3, #6
 80062e8:	461a      	mov	r2, r3
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	ea02 0400 	and.w	r4, r2, r0
 80062fa:	ea03 0501 	and.w	r5, r3, r1
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	014b      	lsls	r3, r1, #5
 800630c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006310:	0142      	lsls	r2, r0, #5
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	1b00      	subs	r0, r0, r4
 8006318:	eb61 0105 	sbc.w	r1, r1, r5
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	018b      	lsls	r3, r1, #6
 8006326:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800632a:	0182      	lsls	r2, r0, #6
 800632c:	1a12      	subs	r2, r2, r0
 800632e:	eb63 0301 	sbc.w	r3, r3, r1
 8006332:	f04f 0000 	mov.w	r0, #0
 8006336:	f04f 0100 	mov.w	r1, #0
 800633a:	00d9      	lsls	r1, r3, #3
 800633c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006340:	00d0      	lsls	r0, r2, #3
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	1912      	adds	r2, r2, r4
 8006348:	eb45 0303 	adc.w	r3, r5, r3
 800634c:	f04f 0000 	mov.w	r0, #0
 8006350:	f04f 0100 	mov.w	r1, #0
 8006354:	0299      	lsls	r1, r3, #10
 8006356:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800635a:	0290      	lsls	r0, r2, #10
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	461a      	mov	r2, r3
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	f7fa fc84 	bl	8000c78 <__aeabi_uldivmod>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4613      	mov	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	3301      	adds	r3, #1
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	60bb      	str	r3, [r7, #8]
      break;
 8006392:	e002      	b.n	800639a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006396:	60bb      	str	r3, [r7, #8]
      break;
 8006398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800639a:	68bb      	ldr	r3, [r7, #8]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80063a6:	bf00      	nop
 80063a8:	40023800 	.word	0x40023800
 80063ac:	00f42400 	.word	0x00f42400
 80063b0:	007a1200 	.word	0x007a1200

080063b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063ba:	681b      	ldr	r3, [r3, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000098 	.word	0x20000098

080063cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063d0:	f7ff fff0 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063d4:	4602      	mov	r2, r0
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	0a9b      	lsrs	r3, r3, #10
 80063dc:	f003 0307 	and.w	r3, r3, #7
 80063e0:	4903      	ldr	r1, [pc, #12]	; (80063f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063e2:	5ccb      	ldrb	r3, [r1, r3]
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40023800 	.word	0x40023800
 80063f0:	0800c9a8 	.word	0x0800c9a8

080063f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063f8:	f7ff ffdc 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063fc:	4602      	mov	r2, r0
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	0b5b      	lsrs	r3, r3, #13
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	4903      	ldr	r1, [pc, #12]	; (8006418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800640a:	5ccb      	ldrb	r3, [r1, r3]
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006410:	4618      	mov	r0, r3
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40023800 	.word	0x40023800
 8006418:	0800c9a8 	.word	0x0800c9a8

0800641c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e041      	b.n	80064b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fc fcd0 	bl	8002de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3304      	adds	r3, #4
 8006458:	4619      	mov	r1, r3
 800645a:	4610      	mov	r0, r2
 800645c:	f000 fe3c 	bl	80070d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d001      	beq.n	80064d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e03c      	b.n	800654e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1e      	ldr	r2, [pc, #120]	; (800655c <HAL_TIM_Base_Start+0xa0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d018      	beq.n	8006518 <HAL_TIM_Base_Start+0x5c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d013      	beq.n	8006518 <HAL_TIM_Base_Start+0x5c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_TIM_Base_Start+0xa4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00e      	beq.n	8006518 <HAL_TIM_Base_Start+0x5c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a19      	ldr	r2, [pc, #100]	; (8006564 <HAL_TIM_Base_Start+0xa8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d009      	beq.n	8006518 <HAL_TIM_Base_Start+0x5c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a17      	ldr	r2, [pc, #92]	; (8006568 <HAL_TIM_Base_Start+0xac>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_TIM_Base_Start+0x5c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a16      	ldr	r2, [pc, #88]	; (800656c <HAL_TIM_Base_Start+0xb0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d111      	bne.n	800653c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b06      	cmp	r3, #6
 8006528:	d010      	beq.n	800654c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0201 	orr.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653a:	e007      	b.n	800654c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	40010000 	.word	0x40010000
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	40000c00 	.word	0x40000c00
 800656c:	40014000 	.word	0x40014000

08006570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d001      	beq.n	8006588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e044      	b.n	8006612 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <HAL_TIM_Base_Start_IT+0xb0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d018      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x6c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d013      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x6c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1a      	ldr	r2, [pc, #104]	; (8006624 <HAL_TIM_Base_Start_IT+0xb4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00e      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x6c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a19      	ldr	r2, [pc, #100]	; (8006628 <HAL_TIM_Base_Start_IT+0xb8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d009      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x6c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a17      	ldr	r2, [pc, #92]	; (800662c <HAL_TIM_Base_Start_IT+0xbc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x6c>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a16      	ldr	r2, [pc, #88]	; (8006630 <HAL_TIM_Base_Start_IT+0xc0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d111      	bne.n	8006600 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b06      	cmp	r3, #6
 80065ec:	d010      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	e007      	b.n	8006610 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40010000 	.word	0x40010000
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40014000 	.word	0x40014000

08006634 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e041      	b.n	80066ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f839 	bl	80066d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f000 fd30 	bl	80070d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
	...

080066e8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_IC_Start+0x1a>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e013      	b.n	800672a <HAL_TIM_IC_Start+0x42>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b04      	cmp	r3, #4
 8006706:	d104      	bne.n	8006712 <HAL_TIM_IC_Start+0x2a>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800670e:	b2db      	uxtb	r3, r3
 8006710:	e00b      	b.n	800672a <HAL_TIM_IC_Start+0x42>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b08      	cmp	r3, #8
 8006716:	d104      	bne.n	8006722 <HAL_TIM_IC_Start+0x3a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800671e:	b2db      	uxtb	r3, r3
 8006720:	e003      	b.n	800672a <HAL_TIM_IC_Start+0x42>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006728:	b2db      	uxtb	r3, r3
 800672a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <HAL_TIM_IC_Start+0x54>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e013      	b.n	8006764 <HAL_TIM_IC_Start+0x7c>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b04      	cmp	r3, #4
 8006740:	d104      	bne.n	800674c <HAL_TIM_IC_Start+0x64>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e00b      	b.n	8006764 <HAL_TIM_IC_Start+0x7c>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b08      	cmp	r3, #8
 8006750:	d104      	bne.n	800675c <HAL_TIM_IC_Start+0x74>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006758:	b2db      	uxtb	r3, r3
 800675a:	e003      	b.n	8006764 <HAL_TIM_IC_Start+0x7c>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006762:	b2db      	uxtb	r3, r3
 8006764:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d102      	bne.n	8006772 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d001      	beq.n	8006776 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e077      	b.n	8006866 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <HAL_TIM_IC_Start+0x9e>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006784:	e013      	b.n	80067ae <HAL_TIM_IC_Start+0xc6>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b04      	cmp	r3, #4
 800678a:	d104      	bne.n	8006796 <HAL_TIM_IC_Start+0xae>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006794:	e00b      	b.n	80067ae <HAL_TIM_IC_Start+0xc6>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b08      	cmp	r3, #8
 800679a:	d104      	bne.n	80067a6 <HAL_TIM_IC_Start+0xbe>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a4:	e003      	b.n	80067ae <HAL_TIM_IC_Start+0xc6>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_TIM_IC_Start+0xd6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	e013      	b.n	80067e6 <HAL_TIM_IC_Start+0xfe>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_IC_Start+0xe6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_IC_Start+0xfe>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d104      	bne.n	80067de <HAL_TIM_IC_Start+0xf6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067dc:	e003      	b.n	80067e6 <HAL_TIM_IC_Start+0xfe>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 ff3c 	bl	800766c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1d      	ldr	r2, [pc, #116]	; (8006870 <HAL_TIM_IC_Start+0x188>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d018      	beq.n	8006830 <HAL_TIM_IC_Start+0x148>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006806:	d013      	beq.n	8006830 <HAL_TIM_IC_Start+0x148>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a19      	ldr	r2, [pc, #100]	; (8006874 <HAL_TIM_IC_Start+0x18c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00e      	beq.n	8006830 <HAL_TIM_IC_Start+0x148>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <HAL_TIM_IC_Start+0x190>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_TIM_IC_Start+0x148>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a16      	ldr	r2, [pc, #88]	; (800687c <HAL_TIM_IC_Start+0x194>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIM_IC_Start+0x148>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a15      	ldr	r2, [pc, #84]	; (8006880 <HAL_TIM_IC_Start+0x198>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d111      	bne.n	8006854 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b06      	cmp	r3, #6
 8006840:	d010      	beq.n	8006864 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0201 	orr.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006852:	e007      	b.n	8006864 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40010000 	.word	0x40010000
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40014000 	.word	0x40014000

08006884 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_IC_Start_IT+0x1e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e013      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x46>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_IC_Start_IT+0x2e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x46>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_IC_Start_IT+0x3e>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e003      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x46>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <HAL_TIM_IC_Start_IT+0x58>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e013      	b.n	8006904 <HAL_TIM_IC_Start_IT+0x80>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d104      	bne.n	80068ec <HAL_TIM_IC_Start_IT+0x68>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e00b      	b.n	8006904 <HAL_TIM_IC_Start_IT+0x80>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d104      	bne.n	80068fc <HAL_TIM_IC_Start_IT+0x78>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	e003      	b.n	8006904 <HAL_TIM_IC_Start_IT+0x80>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006902:	b2db      	uxtb	r3, r3
 8006904:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d102      	bne.n	8006912 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800690c:	7b7b      	ldrb	r3, [r7, #13]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d001      	beq.n	8006916 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e0c2      	b.n	8006a9c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <HAL_TIM_IC_Start_IT+0xa2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006924:	e013      	b.n	800694e <HAL_TIM_IC_Start_IT+0xca>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b04      	cmp	r3, #4
 800692a:	d104      	bne.n	8006936 <HAL_TIM_IC_Start_IT+0xb2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006934:	e00b      	b.n	800694e <HAL_TIM_IC_Start_IT+0xca>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d104      	bne.n	8006946 <HAL_TIM_IC_Start_IT+0xc2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006944:	e003      	b.n	800694e <HAL_TIM_IC_Start_IT+0xca>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d104      	bne.n	800695e <HAL_TIM_IC_Start_IT+0xda>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800695c:	e013      	b.n	8006986 <HAL_TIM_IC_Start_IT+0x102>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d104      	bne.n	800696e <HAL_TIM_IC_Start_IT+0xea>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800696c:	e00b      	b.n	8006986 <HAL_TIM_IC_Start_IT+0x102>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d104      	bne.n	800697e <HAL_TIM_IC_Start_IT+0xfa>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800697c:	e003      	b.n	8006986 <HAL_TIM_IC_Start_IT+0x102>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b0c      	cmp	r3, #12
 800698a:	d841      	bhi.n	8006a10 <HAL_TIM_IC_Start_IT+0x18c>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <HAL_TIM_IC_Start_IT+0x110>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069c9 	.word	0x080069c9
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a11 	.word	0x08006a11
 80069a4:	080069db 	.word	0x080069db
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	080069ed 	.word	0x080069ed
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	080069ff 	.word	0x080069ff
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0202 	orr.w	r2, r2, #2
 80069d6:	60da      	str	r2, [r3, #12]
      break;
 80069d8:	e01d      	b.n	8006a16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0204 	orr.w	r2, r2, #4
 80069e8:	60da      	str	r2, [r3, #12]
      break;
 80069ea:	e014      	b.n	8006a16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0208 	orr.w	r2, r2, #8
 80069fa:	60da      	str	r2, [r3, #12]
      break;
 80069fc:	e00b      	b.n	8006a16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0210 	orr.w	r2, r2, #16
 8006a0c:	60da      	str	r2, [r3, #12]
      break;
 8006a0e:	e002      	b.n	8006a16 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
      break;
 8006a14:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d13e      	bne.n	8006a9a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2201      	movs	r2, #1
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fe21 	bl	800766c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <HAL_TIM_IC_Start_IT+0x220>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d018      	beq.n	8006a66 <HAL_TIM_IC_Start_IT+0x1e2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d013      	beq.n	8006a66 <HAL_TIM_IC_Start_IT+0x1e2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <HAL_TIM_IC_Start_IT+0x224>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00e      	beq.n	8006a66 <HAL_TIM_IC_Start_IT+0x1e2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a17      	ldr	r2, [pc, #92]	; (8006aac <HAL_TIM_IC_Start_IT+0x228>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_TIM_IC_Start_IT+0x1e2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <HAL_TIM_IC_Start_IT+0x22c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIM_IC_Start_IT+0x1e2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <HAL_TIM_IC_Start_IT+0x230>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d111      	bne.n	8006a8a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b06      	cmp	r3, #6
 8006a76:	d010      	beq.n	8006a9a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a88:	e007      	b.n	8006a9a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0201 	orr.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40010000 	.word	0x40010000
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40000c00 	.word	0x40000c00
 8006ab4:	40014000 	.word	0x40014000

08006ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d122      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d11b      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0202 	mvn.w	r2, #2
 8006ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fb fb66 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 faca 	bl	800709c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fad1 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d122      	bne.n	8006b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d11b      	bne.n	8006b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0204 	mvn.w	r2, #4
 8006b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fb fb3c 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 faa0 	bl	800709c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 faa7 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d122      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d11b      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0208 	mvn.w	r2, #8
 8006b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2204      	movs	r2, #4
 8006b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb fb12 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8006ba8:	e005      	b.n	8006bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa76 	bl	800709c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa7d 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d122      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d11b      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0210 	mvn.w	r2, #16
 8006be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2208      	movs	r2, #8
 8006be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fb fae8 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8006bfc:	e005      	b.n	8006c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa4c 	bl	800709c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa53 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d10e      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0201 	mvn.w	r2, #1
 8006c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fb fa66 	bl	8002108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	2b80      	cmp	r3, #128	; 0x80
 8006c48:	d10e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c54:	2b80      	cmp	r3, #128	; 0x80
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fda0 	bl	80077a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fa18 	bl	80070c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d10e      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0220 	mvn.w	r2, #32
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fd6a 	bl	8007794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e088      	b.n	8006df8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11b      	bne.n	8006d2c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6819      	ldr	r1, [r3, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f000 fafa 	bl	80072fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 020c 	bic.w	r2, r2, #12
 8006d16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6999      	ldr	r1, [r3, #24]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	619a      	str	r2, [r3, #24]
 8006d2a:	e060      	b.n	8006dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d11c      	bne.n	8006d6c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f000 fb72 	bl	800742a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6999      	ldr	r1, [r3, #24]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	021a      	lsls	r2, r3, #8
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	619a      	str	r2, [r3, #24]
 8006d6a:	e040      	b.n	8006dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d11b      	bne.n	8006daa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6819      	ldr	r1, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f000 fbbf 	bl	8007504 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 020c 	bic.w	r2, r2, #12
 8006d94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	61da      	str	r2, [r3, #28]
 8006da8:	e021      	b.n	8006dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b0c      	cmp	r3, #12
 8006dae:	d11c      	bne.n	8006dea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6819      	ldr	r1, [r3, #0]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f000 fbdc 	bl	800757c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006dd2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69d9      	ldr	r1, [r3, #28]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	61da      	str	r2, [r3, #28]
 8006de8:	e001      	b.n	8006dee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_TIM_ConfigClockSource+0x1c>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e0b4      	b.n	8006f86 <HAL_TIM_ConfigClockSource+0x186>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e54:	d03e      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8006e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5a:	f200 8087 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e62:	f000 8086 	beq.w	8006f72 <HAL_TIM_ConfigClockSource+0x172>
 8006e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6a:	d87f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e6c:	2b70      	cmp	r3, #112	; 0x70
 8006e6e:	d01a      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8006e70:	2b70      	cmp	r3, #112	; 0x70
 8006e72:	d87b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e74:	2b60      	cmp	r3, #96	; 0x60
 8006e76:	d050      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x11a>
 8006e78:	2b60      	cmp	r3, #96	; 0x60
 8006e7a:	d877      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e7c:	2b50      	cmp	r3, #80	; 0x50
 8006e7e:	d03c      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0xfa>
 8006e80:	2b50      	cmp	r3, #80	; 0x50
 8006e82:	d873      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d058      	beq.n	8006f3a <HAL_TIM_ConfigClockSource+0x13a>
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d86f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e8c:	2b30      	cmp	r3, #48	; 0x30
 8006e8e:	d064      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006e90:	2b30      	cmp	r3, #48	; 0x30
 8006e92:	d86b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d060      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d867      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d05c      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d05a      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea4:	e062      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6899      	ldr	r1, [r3, #8]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f000 fbb9 	bl	800762c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	609a      	str	r2, [r3, #8]
      break;
 8006ed2:	e04f      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6899      	ldr	r1, [r3, #8]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f000 fba2 	bl	800762c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef6:	609a      	str	r2, [r3, #8]
      break;
 8006ef8:	e03c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f000 fa60 	bl	80073cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2150      	movs	r1, #80	; 0x50
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fb6f 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006f18:	e02c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6859      	ldr	r1, [r3, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f000 fabc 	bl	80074a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2160      	movs	r1, #96	; 0x60
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fb5f 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006f38:	e01c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6859      	ldr	r1, [r3, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f000 fa40 	bl	80073cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2140      	movs	r1, #64	; 0x40
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fb4f 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006f58:	e00c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f000 fb46 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8006f6a:	e003      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e031      	b.n	800700a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f90d 	bl	80071d8 <TIM_SlaveTimer_SetConfig>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e018      	b.n	800700a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ff6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d831      	bhi.n	800708c <HAL_TIM_ReadCapturedValue+0x78>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <HAL_TIM_ReadCapturedValue+0x1c>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007065 	.word	0x08007065
 8007034:	0800708d 	.word	0x0800708d
 8007038:	0800708d 	.word	0x0800708d
 800703c:	0800708d 	.word	0x0800708d
 8007040:	0800706f 	.word	0x0800706f
 8007044:	0800708d 	.word	0x0800708d
 8007048:	0800708d 	.word	0x0800708d
 800704c:	0800708d 	.word	0x0800708d
 8007050:	08007079 	.word	0x08007079
 8007054:	0800708d 	.word	0x0800708d
 8007058:	0800708d 	.word	0x0800708d
 800705c:	0800708d 	.word	0x0800708d
 8007060:	08007083 	.word	0x08007083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	60fb      	str	r3, [r7, #12]

      break;
 800706c:	e00f      	b.n	800708e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	60fb      	str	r3, [r7, #12]

      break;
 8007076:	e00a      	b.n	800708e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707e:	60fb      	str	r3, [r7, #12]

      break;
 8007080:	e005      	b.n	800708e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	60fb      	str	r3, [r7, #12]

      break;
 800708a:	e000      	b.n	800708e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800708c:	bf00      	nop
  }

  return tmpreg;
 800708e:	68fb      	ldr	r3, [r7, #12]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a34      	ldr	r2, [pc, #208]	; (80071bc <TIM_Base_SetConfig+0xe4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00f      	beq.n	8007110 <TIM_Base_SetConfig+0x38>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f6:	d00b      	beq.n	8007110 <TIM_Base_SetConfig+0x38>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a31      	ldr	r2, [pc, #196]	; (80071c0 <TIM_Base_SetConfig+0xe8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d007      	beq.n	8007110 <TIM_Base_SetConfig+0x38>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a30      	ldr	r2, [pc, #192]	; (80071c4 <TIM_Base_SetConfig+0xec>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d003      	beq.n	8007110 <TIM_Base_SetConfig+0x38>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <TIM_Base_SetConfig+0xf0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d108      	bne.n	8007122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a25      	ldr	r2, [pc, #148]	; (80071bc <TIM_Base_SetConfig+0xe4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01b      	beq.n	8007162 <TIM_Base_SetConfig+0x8a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007130:	d017      	beq.n	8007162 <TIM_Base_SetConfig+0x8a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <TIM_Base_SetConfig+0xe8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <TIM_Base_SetConfig+0x8a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <TIM_Base_SetConfig+0xec>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00f      	beq.n	8007162 <TIM_Base_SetConfig+0x8a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <TIM_Base_SetConfig+0xf0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00b      	beq.n	8007162 <TIM_Base_SetConfig+0x8a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1f      	ldr	r2, [pc, #124]	; (80071cc <TIM_Base_SetConfig+0xf4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d007      	beq.n	8007162 <TIM_Base_SetConfig+0x8a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1e      	ldr	r2, [pc, #120]	; (80071d0 <TIM_Base_SetConfig+0xf8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d003      	beq.n	8007162 <TIM_Base_SetConfig+0x8a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <TIM_Base_SetConfig+0xfc>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d108      	bne.n	8007174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a08      	ldr	r2, [pc, #32]	; (80071bc <TIM_Base_SetConfig+0xe4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d103      	bne.n	80071a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	615a      	str	r2, [r3, #20]
}
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40014400 	.word	0x40014400
 80071d4:	40014800 	.word	0x40014800

080071d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f023 0307 	bic.w	r3, r3, #7
 8007206:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b70      	cmp	r3, #112	; 0x70
 8007220:	d01a      	beq.n	8007258 <TIM_SlaveTimer_SetConfig+0x80>
 8007222:	2b70      	cmp	r3, #112	; 0x70
 8007224:	d860      	bhi.n	80072e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007226:	2b60      	cmp	r3, #96	; 0x60
 8007228:	d054      	beq.n	80072d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800722a:	2b60      	cmp	r3, #96	; 0x60
 800722c:	d85c      	bhi.n	80072e8 <TIM_SlaveTimer_SetConfig+0x110>
 800722e:	2b50      	cmp	r3, #80	; 0x50
 8007230:	d046      	beq.n	80072c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007232:	2b50      	cmp	r3, #80	; 0x50
 8007234:	d858      	bhi.n	80072e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d019      	beq.n	800726e <TIM_SlaveTimer_SetConfig+0x96>
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d854      	bhi.n	80072e8 <TIM_SlaveTimer_SetConfig+0x110>
 800723e:	2b30      	cmp	r3, #48	; 0x30
 8007240:	d055      	beq.n	80072ee <TIM_SlaveTimer_SetConfig+0x116>
 8007242:	2b30      	cmp	r3, #48	; 0x30
 8007244:	d850      	bhi.n	80072e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007246:	2b20      	cmp	r3, #32
 8007248:	d051      	beq.n	80072ee <TIM_SlaveTimer_SetConfig+0x116>
 800724a:	2b20      	cmp	r3, #32
 800724c:	d84c      	bhi.n	80072e8 <TIM_SlaveTimer_SetConfig+0x110>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d04d      	beq.n	80072ee <TIM_SlaveTimer_SetConfig+0x116>
 8007252:	2b10      	cmp	r3, #16
 8007254:	d04b      	beq.n	80072ee <TIM_SlaveTimer_SetConfig+0x116>
 8007256:	e047      	b.n	80072e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6818      	ldr	r0, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68d9      	ldr	r1, [r3, #12]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f000 f9e0 	bl	800762c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800726c:	e040      	b.n	80072f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b05      	cmp	r3, #5
 8007274:	d101      	bne.n	800727a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e03b      	b.n	80072f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	621a      	str	r2, [r3, #32]
      break;
 80072be:	e017      	b.n	80072f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	6899      	ldr	r1, [r3, #8]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	461a      	mov	r2, r3
 80072ce:	f000 f87d 	bl	80073cc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80072d2:	e00d      	b.n	80072f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	6899      	ldr	r1, [r3, #8]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f000 f8df 	bl	80074a4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80072e6:	e003      	b.n	80072f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]
      break;
 80072ec:	e000      	b.n	80072f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80072ee:	bf00      	nop
  }

  return status;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a24      	ldr	r2, [pc, #144]	; (80073b8 <TIM_TI1_SetConfig+0xbc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d013      	beq.n	8007352 <TIM_TI1_SetConfig+0x56>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007330:	d00f      	beq.n	8007352 <TIM_TI1_SetConfig+0x56>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a21      	ldr	r2, [pc, #132]	; (80073bc <TIM_TI1_SetConfig+0xc0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00b      	beq.n	8007352 <TIM_TI1_SetConfig+0x56>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <TIM_TI1_SetConfig+0xc4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d007      	beq.n	8007352 <TIM_TI1_SetConfig+0x56>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <TIM_TI1_SetConfig+0xc8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d003      	beq.n	8007352 <TIM_TI1_SetConfig+0x56>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a1e      	ldr	r2, [pc, #120]	; (80073c8 <TIM_TI1_SetConfig+0xcc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d101      	bne.n	8007356 <TIM_TI1_SetConfig+0x5a>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <TIM_TI1_SetConfig+0x5c>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e003      	b.n	8007376 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800737c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	b2db      	uxtb	r3, r3
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f023 030a 	bic.w	r3, r3, #10
 8007390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f003 030a 	and.w	r3, r3, #10
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800
 80073c4:	40000c00 	.word	0x40000c00
 80073c8:	40014000 	.word	0x40014000

080073cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 030a 	bic.w	r3, r3, #10
 8007408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f023 0210 	bic.w	r2, r3, #16
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007456:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	031b      	lsls	r3, r3, #12
 800746e:	b29b      	uxth	r3, r3
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800747c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	621a      	str	r2, [r3, #32]
}
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	f023 0210 	bic.w	r2, r3, #16
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	031b      	lsls	r3, r3, #12
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	621a      	str	r2, [r3, #32]
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 0303 	bic.w	r3, r3, #3
 8007530:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	b2db      	uxtb	r3, r3
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007554:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	621a      	str	r2, [r3, #32]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	031b      	lsls	r3, r3, #12
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80075ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	031b      	lsls	r3, r3, #12
 80075d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	f043 0307 	orr.w	r3, r3, #7
 8007618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	021a      	lsls	r2, r3, #8
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	431a      	orrs	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	609a      	str	r2, [r3, #8]
}
 8007660:	bf00      	nop
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f003 031f 	and.w	r3, r3, #31
 800767e:	2201      	movs	r2, #1
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	43db      	mvns	r3, r3
 800768e:	401a      	ands	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a1a      	ldr	r2, [r3, #32]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	fa01 f303 	lsl.w	r3, r1, r3
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]
}
 80076aa:	bf00      	nop
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e050      	b.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a1c      	ldr	r2, [pc, #112]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d018      	beq.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771c:	d013      	beq.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00e      	beq.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a16      	ldr	r2, [pc, #88]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d009      	beq.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d004      	beq.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a13      	ldr	r2, [pc, #76]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d10c      	bne.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800774c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	4313      	orrs	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40010000 	.word	0x40010000
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800
 800778c:	40000c00 	.word	0x40000c00
 8007790:	40014000 	.word	0x40014000

08007794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e03f      	b.n	800784e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fb fb98 	bl	8002f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2224      	movs	r2, #36	; 0x24
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 ff65 	bl	80086d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695a      	ldr	r2, [r3, #20]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b08a      	sub	sp, #40	; 0x28
 800785a:	af02      	add	r7, sp, #8
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b20      	cmp	r3, #32
 8007874:	d17c      	bne.n	8007970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_UART_Transmit+0x2c>
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e075      	b.n	8007972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_UART_Transmit+0x3e>
 8007890:	2302      	movs	r3, #2
 8007892:	e06e      	b.n	8007972 <HAL_UART_Transmit+0x11c>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2221      	movs	r2, #33	; 0x21
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078aa:	f7fb fe13 	bl	80034d4 <HAL_GetTick>
 80078ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	88fa      	ldrh	r2, [r7, #6]
 80078ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c4:	d108      	bne.n	80078d8 <HAL_UART_Transmit+0x82>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e003      	b.n	80078e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078e8:	e02a      	b.n	8007940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2200      	movs	r2, #0
 80078f2:	2180      	movs	r1, #128	; 0x80
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fc21 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e036      	b.n	8007972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	3302      	adds	r3, #2
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	e007      	b.n	8007932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	3301      	adds	r3, #1
 8007930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1cf      	bne.n	80078ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2200      	movs	r2, #0
 8007952:	2140      	movs	r1, #64	; 0x40
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fbf1 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e006      	b.n	8007972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	e000      	b.n	8007972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007970:	2302      	movs	r3, #2
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	4613      	mov	r3, r2
 8007986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b20      	cmp	r3, #32
 8007992:	d11d      	bne.n	80079d0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_UART_Receive_DMA+0x26>
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e016      	b.n	80079d2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Receive_DMA+0x38>
 80079ae:	2302      	movs	r3, #2
 80079b0:	e00f      	b.n	80079d2 <HAL_UART_Receive_DMA+0x58>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fc26 	bl	8008218 <UART_Start_Receive_DMA>
 80079cc:	4603      	mov	r3, r0
 80079ce:	e000      	b.n	80079d2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b0ba      	sub	sp, #232	; 0xe8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10f      	bne.n	8007a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <HAL_UART_IRQHandler+0x66>
 8007a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fd8d 	bl	800855a <UART_Receive_IT>
      return;
 8007a40:	e256      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80de 	beq.w	8007c08 <HAL_UART_IRQHandler+0x22c>
 8007a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80d1 	beq.w	8007c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <HAL_UART_IRQHandler+0xae>
 8007a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f043 0201 	orr.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_UART_IRQHandler+0xd2>
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f043 0202 	orr.w	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xf6>
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f043 0204 	orr.w	r2, r3, #4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d011      	beq.n	8007b02 <HAL_UART_IRQHandler+0x126>
 8007ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f043 0208 	orr.w	r2, r3, #8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 81ed 	beq.w	8007ee6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <HAL_UART_IRQHandler+0x14e>
 8007b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fd18 	bl	800855a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <HAL_UART_IRQHandler+0x17a>
 8007b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d04f      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fc20 	bl	800839c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d141      	bne.n	8007bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3314      	adds	r3, #20
 8007b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1d9      	bne.n	8007b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d013      	beq.n	8007be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	4a7d      	ldr	r2, [pc, #500]	; (8007db8 <HAL_UART_IRQHandler+0x3dc>)
 8007bc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fc fb2c 	bl	8004228 <HAL_DMA_Abort_IT>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d016      	beq.n	8007c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be4:	e00e      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f99a 	bl	8007f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	e00a      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f996 	bl	8007f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e006      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f992 	bl	8007f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c02:	e170      	b.n	8007ee6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	bf00      	nop
    return;
 8007c06:	e16e      	b.n	8007ee6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	f040 814a 	bne.w	8007ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8143 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 813c 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	f040 80b4 	bne.w	8007dbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8140 	beq.w	8007eea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c72:	429a      	cmp	r2, r3
 8007c74:	f080 8139 	bcs.w	8007eea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8a:	f000 8088 	beq.w	8007d9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1d9      	bne.n	8007c8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e1      	bne.n	8007cda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3314      	adds	r3, #20
 8007d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e3      	bne.n	8007d16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d80:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e3      	bne.n	8007d5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fc f9d5 	bl	8004148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f8c0 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007db4:	e099      	b.n	8007eea <HAL_UART_IRQHandler+0x50e>
 8007db6:	bf00      	nop
 8007db8:	08008463 	.word	0x08008463
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 808b 	beq.w	8007eee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8086 	beq.w	8007eee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	330c      	adds	r3, #12
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	330c      	adds	r3, #12
 8007e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e06:	647a      	str	r2, [r7, #68]	; 0x44
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e3      	bne.n	8007de2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3314      	adds	r3, #20
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f023 0301 	bic.w	r3, r3, #1
 8007e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3314      	adds	r3, #20
 8007e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e3      	bne.n	8007e1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0310 	bic.w	r3, r3, #16
 8007e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	330c      	adds	r3, #12
 8007e80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e84:	61fa      	str	r2, [r7, #28]
 8007e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	69b9      	ldr	r1, [r7, #24]
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	617b      	str	r3, [r7, #20]
   return(result);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e3      	bne.n	8007e60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f848 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ea4:	e023      	b.n	8007eee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x4ea>
 8007eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fae3 	bl	800848a <UART_Transmit_IT>
    return;
 8007ec4:	e014      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x514>
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fb23 	bl	800852a <UART_EndTransmit_IT>
    return;
 8007ee4:	e004      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ee6:	bf00      	nop
 8007ee8:	e002      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8007eea:	bf00      	nop
 8007eec:	e000      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8007eee:	bf00      	nop
  }
}
 8007ef0:	37e8      	adds	r7, #232	; 0xe8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop

08007ef8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b09c      	sub	sp, #112	; 0x70
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d172      	bne.n	800804e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	330c      	adds	r3, #12
 8007f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	330c      	adds	r3, #12
 8007f8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	667b      	str	r3, [r7, #100]	; 0x64
 8007fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8007fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3314      	adds	r3, #20
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	663b      	str	r3, [r7, #96]	; 0x60
 8007fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800800a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800c:	2220      	movs	r2, #32
 800800e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	2b01      	cmp	r3, #1
 8008018:	d119      	bne.n	800804e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	330c      	adds	r3, #12
 8008020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	60fb      	str	r3, [r7, #12]
   return(result);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f023 0310 	bic.w	r3, r3, #16
 8008030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800803a:	61fa      	str	r2, [r7, #28]
 800803c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	69b9      	ldr	r1, [r7, #24]
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	617b      	str	r3, [r7, #20]
   return(result);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e5      	bne.n	800801a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008052:	2b01      	cmp	r3, #1
 8008054:	d106      	bne.n	8008064 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800805a:	4619      	mov	r1, r3
 800805c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800805e:	f7ff ff69 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008062:	e002      	b.n	800806a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008064:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008066:	f7fa f95f 	bl	8002328 <HAL_UART_RxCpltCallback>
}
 800806a:	bf00      	nop
 800806c:	3770      	adds	r7, #112	; 0x70
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	2b01      	cmp	r3, #1
 8008086:	d108      	bne.n	800809a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800808c:	085b      	lsrs	r3, r3, #1
 800808e:	b29b      	uxth	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff ff4e 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008098:	e002      	b.n	80080a0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff ff36 	bl	8007f0c <HAL_UART_RxHalfCpltCallback>
}
 80080a0:	bf00      	nop
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c4:	2b80      	cmp	r3, #128	; 0x80
 80080c6:	bf0c      	ite	eq
 80080c8:	2301      	moveq	r3, #1
 80080ca:	2300      	movne	r3, #0
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b21      	cmp	r3, #33	; 0x21
 80080da:	d108      	bne.n	80080ee <UART_DMAError+0x46>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2200      	movs	r2, #0
 80080e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80080e8:	68b8      	ldr	r0, [r7, #8]
 80080ea:	f000 f92f 	bl	800834c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f8:	2b40      	cmp	r3, #64	; 0x40
 80080fa:	bf0c      	ite	eq
 80080fc:	2301      	moveq	r3, #1
 80080fe:	2300      	movne	r3, #0
 8008100:	b2db      	uxtb	r3, r3
 8008102:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b22      	cmp	r3, #34	; 0x22
 800810e:	d108      	bne.n	8008122 <UART_DMAError+0x7a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2200      	movs	r2, #0
 800811a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800811c:	68b8      	ldr	r0, [r7, #8]
 800811e:	f000 f93d 	bl	800839c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	f043 0210 	orr.w	r2, r3, #16
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800812e:	68b8      	ldr	r0, [r7, #8]
 8008130:	f7ff fef6 	bl	8007f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008134:	bf00      	nop
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b090      	sub	sp, #64	; 0x40
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	4613      	mov	r3, r2
 800814a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814c:	e050      	b.n	80081f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d04c      	beq.n	80081f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <UART_WaitOnFlagUntilTimeout+0x30>
 800815c:	f7fb f9ba 	bl	80034d4 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008168:	429a      	cmp	r2, r3
 800816a:	d241      	bcs.n	80081f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	330c      	adds	r3, #12
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	330c      	adds	r3, #12
 800818a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800818c:	637a      	str	r2, [r7, #52]	; 0x34
 800818e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e5      	bne.n	800816c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3314      	adds	r3, #20
 80081a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	613b      	str	r3, [r7, #16]
   return(result);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3314      	adds	r3, #20
 80081be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081c0:	623a      	str	r2, [r7, #32]
 80081c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	6a3a      	ldr	r2, [r7, #32]
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e00f      	b.n	8008210 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4013      	ands	r3, r2
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	bf0c      	ite	eq
 8008200:	2301      	moveq	r3, #1
 8008202:	2300      	movne	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	429a      	cmp	r2, r3
 800820c:	d09f      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3740      	adds	r7, #64	; 0x40
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b098      	sub	sp, #96	; 0x60
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	88fa      	ldrh	r2, [r7, #6]
 8008230:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2222      	movs	r2, #34	; 0x22
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	4a3e      	ldr	r2, [pc, #248]	; (8008340 <UART_Start_Receive_DMA+0x128>)
 8008246:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	4a3d      	ldr	r2, [pc, #244]	; (8008344 <UART_Start_Receive_DMA+0x12c>)
 800824e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	4a3c      	ldr	r2, [pc, #240]	; (8008348 <UART_Start_Receive_DMA+0x130>)
 8008256:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	2200      	movs	r2, #0
 800825e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008260:	f107 0308 	add.w	r3, r7, #8
 8008264:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	88fb      	ldrh	r3, [r7, #6]
 8008278:	f7fb ff0e 	bl	8004098 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	330c      	adds	r3, #12
 80082b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80082bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80082c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80082c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e5      	bne.n	800829a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	f043 0301 	orr.w	r3, r3, #1
 80082e4:	657b      	str	r3, [r7, #84]	; 0x54
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3314      	adds	r3, #20
 80082ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80082f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e5      	bne.n	80082ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3314      	adds	r3, #20
 8008308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	617b      	str	r3, [r7, #20]
   return(result);
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008318:	653b      	str	r3, [r7, #80]	; 0x50
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3314      	adds	r3, #20
 8008320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008322:	627a      	str	r2, [r7, #36]	; 0x24
 8008324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6a39      	ldr	r1, [r7, #32]
 8008328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e5      	bne.n	8008302 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3760      	adds	r7, #96	; 0x60
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	08007f4d 	.word	0x08007f4d
 8008344:	08008073 	.word	0x08008073
 8008348:	080080a9 	.word	0x080080a9

0800834c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b089      	sub	sp, #36	; 0x24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	330c      	adds	r3, #12
 800835a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	60bb      	str	r3, [r7, #8]
   return(result);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	330c      	adds	r3, #12
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	61ba      	str	r2, [r7, #24]
 8008376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6979      	ldr	r1, [r7, #20]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	613b      	str	r3, [r7, #16]
   return(result);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e5      	bne.n	8008354 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008390:	bf00      	nop
 8008392:	3724      	adds	r7, #36	; 0x24
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b095      	sub	sp, #84	; 0x54
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	330c      	adds	r3, #12
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	330c      	adds	r3, #12
 80083c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083c4:	643a      	str	r2, [r7, #64]	; 0x40
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e5      	bne.n	80083a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3314      	adds	r3, #20
 80083f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e5      	bne.n	80083d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	2b01      	cmp	r3, #1
 8008412:	d119      	bne.n	8008448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	e853 3f00 	ldrex	r3, [r3]
 8008422:	60bb      	str	r3, [r7, #8]
   return(result);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f023 0310 	bic.w	r3, r3, #16
 800842a:	647b      	str	r3, [r7, #68]	; 0x44
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008434:	61ba      	str	r2, [r7, #24]
 8008436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	6979      	ldr	r1, [r7, #20]
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	613b      	str	r3, [r7, #16]
   return(result);
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e5      	bne.n	8008414 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2220      	movs	r2, #32
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008456:	bf00      	nop
 8008458:	3754      	adds	r7, #84	; 0x54
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fd4f 	bl	8007f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b21      	cmp	r3, #33	; 0x21
 800849c:	d13e      	bne.n	800851c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a6:	d114      	bne.n	80084d2 <UART_Transmit_IT+0x48>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d110      	bne.n	80084d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	1c9a      	adds	r2, r3, #2
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	621a      	str	r2, [r3, #32]
 80084d0:	e008      	b.n	80084e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	1c59      	adds	r1, r3, #1
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6211      	str	r1, [r2, #32]
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	4619      	mov	r1, r3
 80084f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10f      	bne.n	8008518 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008506:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008516:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	e000      	b.n	800851e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800851c:	2302      	movs	r3, #2
  }
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008540:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fcd4 	bl	8007ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b08c      	sub	sp, #48	; 0x30
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b22      	cmp	r3, #34	; 0x22
 800856c:	f040 80ab 	bne.w	80086c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008578:	d117      	bne.n	80085aa <UART_Receive_IT+0x50>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d113      	bne.n	80085aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	b29b      	uxth	r3, r3
 8008594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008598:	b29a      	uxth	r2, r3
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	1c9a      	adds	r2, r3, #2
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	629a      	str	r2, [r3, #40]	; 0x28
 80085a8:	e026      	b.n	80085f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085b0:	2300      	movs	r3, #0
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085bc:	d007      	beq.n	80085ce <UART_Receive_IT+0x74>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <UART_Receive_IT+0x82>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d106      	bne.n	80085dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e008      	b.n	80085ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29b      	uxth	r3, r3
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	4619      	mov	r1, r3
 8008606:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008608:	2b00      	cmp	r3, #0
 800860a:	d15a      	bne.n	80086c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0220 	bic.w	r2, r2, #32
 800861a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800862a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695a      	ldr	r2, [r3, #20]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0201 	bic.w	r2, r2, #1
 800863a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008648:	2b01      	cmp	r3, #1
 800864a:	d135      	bne.n	80086b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	330c      	adds	r3, #12
 8008658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	613b      	str	r3, [r7, #16]
   return(result);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f023 0310 	bic.w	r3, r3, #16
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	330c      	adds	r3, #12
 8008670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008672:	623a      	str	r2, [r7, #32]
 8008674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	69f9      	ldr	r1, [r7, #28]
 8008678:	6a3a      	ldr	r2, [r7, #32]
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e5      	bne.n	8008652 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b10      	cmp	r3, #16
 8008692:	d10a      	bne.n	80086aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fc3f 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
 80086b6:	e002      	b.n	80086be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7f9 fe35 	bl	8002328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	e002      	b.n	80086c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	e000      	b.n	80086c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80086c6:	2302      	movs	r3, #2
  }
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3730      	adds	r7, #48	; 0x30
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	b09f      	sub	sp, #124	; 0x7c
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e6:	68d9      	ldr	r1, [r3, #12]
 80086e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	ea40 0301 	orr.w	r3, r0, r1
 80086f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	431a      	orrs	r2, r3
 8008702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	4313      	orrs	r3, r2
 8008708:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800870a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008714:	f021 010c 	bic.w	r1, r1, #12
 8008718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800871e:	430b      	orrs	r3, r1
 8008720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800872c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872e:	6999      	ldr	r1, [r3, #24]
 8008730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	ea40 0301 	orr.w	r3, r0, r1
 8008738:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800873a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	4bc5      	ldr	r3, [pc, #788]	; (8008a54 <UART_SetConfig+0x384>)
 8008740:	429a      	cmp	r2, r3
 8008742:	d004      	beq.n	800874e <UART_SetConfig+0x7e>
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4bc3      	ldr	r3, [pc, #780]	; (8008a58 <UART_SetConfig+0x388>)
 800874a:	429a      	cmp	r2, r3
 800874c:	d103      	bne.n	8008756 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800874e:	f7fd fe51 	bl	80063f4 <HAL_RCC_GetPCLK2Freq>
 8008752:	6778      	str	r0, [r7, #116]	; 0x74
 8008754:	e002      	b.n	800875c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008756:	f7fd fe39 	bl	80063cc <HAL_RCC_GetPCLK1Freq>
 800875a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800875c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008764:	f040 80b6 	bne.w	80088d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800876a:	461c      	mov	r4, r3
 800876c:	f04f 0500 	mov.w	r5, #0
 8008770:	4622      	mov	r2, r4
 8008772:	462b      	mov	r3, r5
 8008774:	1891      	adds	r1, r2, r2
 8008776:	6439      	str	r1, [r7, #64]	; 0x40
 8008778:	415b      	adcs	r3, r3
 800877a:	647b      	str	r3, [r7, #68]	; 0x44
 800877c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008780:	1912      	adds	r2, r2, r4
 8008782:	eb45 0303 	adc.w	r3, r5, r3
 8008786:	f04f 0000 	mov.w	r0, #0
 800878a:	f04f 0100 	mov.w	r1, #0
 800878e:	00d9      	lsls	r1, r3, #3
 8008790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008794:	00d0      	lsls	r0, r2, #3
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	1911      	adds	r1, r2, r4
 800879c:	6639      	str	r1, [r7, #96]	; 0x60
 800879e:	416b      	adcs	r3, r5
 80087a0:	667b      	str	r3, [r7, #100]	; 0x64
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	1891      	adds	r1, r2, r2
 80087ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80087b0:	415b      	adcs	r3, r3
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80087bc:	f7f8 fa5c 	bl	8000c78 <__aeabi_uldivmod>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4ba5      	ldr	r3, [pc, #660]	; (8008a5c <UART_SetConfig+0x38c>)
 80087c6:	fba3 2302 	umull	r2, r3, r3, r2
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	011e      	lsls	r6, r3, #4
 80087ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d0:	461c      	mov	r4, r3
 80087d2:	f04f 0500 	mov.w	r5, #0
 80087d6:	4622      	mov	r2, r4
 80087d8:	462b      	mov	r3, r5
 80087da:	1891      	adds	r1, r2, r2
 80087dc:	6339      	str	r1, [r7, #48]	; 0x30
 80087de:	415b      	adcs	r3, r3
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
 80087e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087e6:	1912      	adds	r2, r2, r4
 80087e8:	eb45 0303 	adc.w	r3, r5, r3
 80087ec:	f04f 0000 	mov.w	r0, #0
 80087f0:	f04f 0100 	mov.w	r1, #0
 80087f4:	00d9      	lsls	r1, r3, #3
 80087f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087fa:	00d0      	lsls	r0, r2, #3
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	1911      	adds	r1, r2, r4
 8008802:	65b9      	str	r1, [r7, #88]	; 0x58
 8008804:	416b      	adcs	r3, r5
 8008806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	461a      	mov	r2, r3
 800880e:	f04f 0300 	mov.w	r3, #0
 8008812:	1891      	adds	r1, r2, r2
 8008814:	62b9      	str	r1, [r7, #40]	; 0x28
 8008816:	415b      	adcs	r3, r3
 8008818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800881a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800881e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008822:	f7f8 fa29 	bl	8000c78 <__aeabi_uldivmod>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4b8c      	ldr	r3, [pc, #560]	; (8008a5c <UART_SetConfig+0x38c>)
 800882c:	fba3 1302 	umull	r1, r3, r3, r2
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	2164      	movs	r1, #100	; 0x64
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	3332      	adds	r3, #50	; 0x32
 800883e:	4a87      	ldr	r2, [pc, #540]	; (8008a5c <UART_SetConfig+0x38c>)
 8008840:	fba2 2303 	umull	r2, r3, r2, r3
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800884c:	441e      	add	r6, r3
 800884e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008850:	4618      	mov	r0, r3
 8008852:	f04f 0100 	mov.w	r1, #0
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	1894      	adds	r4, r2, r2
 800885c:	623c      	str	r4, [r7, #32]
 800885e:	415b      	adcs	r3, r3
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
 8008862:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008866:	1812      	adds	r2, r2, r0
 8008868:	eb41 0303 	adc.w	r3, r1, r3
 800886c:	f04f 0400 	mov.w	r4, #0
 8008870:	f04f 0500 	mov.w	r5, #0
 8008874:	00dd      	lsls	r5, r3, #3
 8008876:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800887a:	00d4      	lsls	r4, r2, #3
 800887c:	4622      	mov	r2, r4
 800887e:	462b      	mov	r3, r5
 8008880:	1814      	adds	r4, r2, r0
 8008882:	653c      	str	r4, [r7, #80]	; 0x50
 8008884:	414b      	adcs	r3, r1
 8008886:	657b      	str	r3, [r7, #84]	; 0x54
 8008888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	461a      	mov	r2, r3
 800888e:	f04f 0300 	mov.w	r3, #0
 8008892:	1891      	adds	r1, r2, r2
 8008894:	61b9      	str	r1, [r7, #24]
 8008896:	415b      	adcs	r3, r3
 8008898:	61fb      	str	r3, [r7, #28]
 800889a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800889e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80088a2:	f7f8 f9e9 	bl	8000c78 <__aeabi_uldivmod>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4b6c      	ldr	r3, [pc, #432]	; (8008a5c <UART_SetConfig+0x38c>)
 80088ac:	fba3 1302 	umull	r1, r3, r3, r2
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	2164      	movs	r1, #100	; 0x64
 80088b4:	fb01 f303 	mul.w	r3, r1, r3
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	3332      	adds	r3, #50	; 0x32
 80088be:	4a67      	ldr	r2, [pc, #412]	; (8008a5c <UART_SetConfig+0x38c>)
 80088c0:	fba2 2303 	umull	r2, r3, r2, r3
 80088c4:	095b      	lsrs	r3, r3, #5
 80088c6:	f003 0207 	and.w	r2, r3, #7
 80088ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4432      	add	r2, r6
 80088d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088d2:	e0b9      	b.n	8008a48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088d6:	461c      	mov	r4, r3
 80088d8:	f04f 0500 	mov.w	r5, #0
 80088dc:	4622      	mov	r2, r4
 80088de:	462b      	mov	r3, r5
 80088e0:	1891      	adds	r1, r2, r2
 80088e2:	6139      	str	r1, [r7, #16]
 80088e4:	415b      	adcs	r3, r3
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80088ec:	1912      	adds	r2, r2, r4
 80088ee:	eb45 0303 	adc.w	r3, r5, r3
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f04f 0100 	mov.w	r1, #0
 80088fa:	00d9      	lsls	r1, r3, #3
 80088fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008900:	00d0      	lsls	r0, r2, #3
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	eb12 0804 	adds.w	r8, r2, r4
 800890a:	eb43 0905 	adc.w	r9, r3, r5
 800890e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	4618      	mov	r0, r3
 8008914:	f04f 0100 	mov.w	r1, #0
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	008b      	lsls	r3, r1, #2
 8008922:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008926:	0082      	lsls	r2, r0, #2
 8008928:	4640      	mov	r0, r8
 800892a:	4649      	mov	r1, r9
 800892c:	f7f8 f9a4 	bl	8000c78 <__aeabi_uldivmod>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4b49      	ldr	r3, [pc, #292]	; (8008a5c <UART_SetConfig+0x38c>)
 8008936:	fba3 2302 	umull	r2, r3, r3, r2
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	011e      	lsls	r6, r3, #4
 800893e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008940:	4618      	mov	r0, r3
 8008942:	f04f 0100 	mov.w	r1, #0
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	1894      	adds	r4, r2, r2
 800894c:	60bc      	str	r4, [r7, #8]
 800894e:	415b      	adcs	r3, r3
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008956:	1812      	adds	r2, r2, r0
 8008958:	eb41 0303 	adc.w	r3, r1, r3
 800895c:	f04f 0400 	mov.w	r4, #0
 8008960:	f04f 0500 	mov.w	r5, #0
 8008964:	00dd      	lsls	r5, r3, #3
 8008966:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800896a:	00d4      	lsls	r4, r2, #3
 800896c:	4622      	mov	r2, r4
 800896e:	462b      	mov	r3, r5
 8008970:	1814      	adds	r4, r2, r0
 8008972:	64bc      	str	r4, [r7, #72]	; 0x48
 8008974:	414b      	adcs	r3, r1
 8008976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4618      	mov	r0, r3
 800897e:	f04f 0100 	mov.w	r1, #0
 8008982:	f04f 0200 	mov.w	r2, #0
 8008986:	f04f 0300 	mov.w	r3, #0
 800898a:	008b      	lsls	r3, r1, #2
 800898c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008990:	0082      	lsls	r2, r0, #2
 8008992:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008996:	f7f8 f96f 	bl	8000c78 <__aeabi_uldivmod>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4b2f      	ldr	r3, [pc, #188]	; (8008a5c <UART_SetConfig+0x38c>)
 80089a0:	fba3 1302 	umull	r1, r3, r3, r2
 80089a4:	095b      	lsrs	r3, r3, #5
 80089a6:	2164      	movs	r1, #100	; 0x64
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	3332      	adds	r3, #50	; 0x32
 80089b2:	4a2a      	ldr	r2, [pc, #168]	; (8008a5c <UART_SetConfig+0x38c>)
 80089b4:	fba2 2303 	umull	r2, r3, r2, r3
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089be:	441e      	add	r6, r3
 80089c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089c2:	4618      	mov	r0, r3
 80089c4:	f04f 0100 	mov.w	r1, #0
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	1894      	adds	r4, r2, r2
 80089ce:	603c      	str	r4, [r7, #0]
 80089d0:	415b      	adcs	r3, r3
 80089d2:	607b      	str	r3, [r7, #4]
 80089d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d8:	1812      	adds	r2, r2, r0
 80089da:	eb41 0303 	adc.w	r3, r1, r3
 80089de:	f04f 0400 	mov.w	r4, #0
 80089e2:	f04f 0500 	mov.w	r5, #0
 80089e6:	00dd      	lsls	r5, r3, #3
 80089e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089ec:	00d4      	lsls	r4, r2, #3
 80089ee:	4622      	mov	r2, r4
 80089f0:	462b      	mov	r3, r5
 80089f2:	eb12 0a00 	adds.w	sl, r2, r0
 80089f6:	eb43 0b01 	adc.w	fp, r3, r1
 80089fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f04f 0100 	mov.w	r1, #0
 8008a04:	f04f 0200 	mov.w	r2, #0
 8008a08:	f04f 0300 	mov.w	r3, #0
 8008a0c:	008b      	lsls	r3, r1, #2
 8008a0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a12:	0082      	lsls	r2, r0, #2
 8008a14:	4650      	mov	r0, sl
 8008a16:	4659      	mov	r1, fp
 8008a18:	f7f8 f92e 	bl	8000c78 <__aeabi_uldivmod>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <UART_SetConfig+0x38c>)
 8008a22:	fba3 1302 	umull	r1, r3, r3, r2
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	2164      	movs	r1, #100	; 0x64
 8008a2a:	fb01 f303 	mul.w	r3, r1, r3
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	3332      	adds	r3, #50	; 0x32
 8008a34:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <UART_SetConfig+0x38c>)
 8008a36:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3a:	095b      	lsrs	r3, r3, #5
 8008a3c:	f003 020f 	and.w	r2, r3, #15
 8008a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4432      	add	r2, r6
 8008a46:	609a      	str	r2, [r3, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	377c      	adds	r7, #124	; 0x7c
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a52:	bf00      	nop
 8008a54:	40011000 	.word	0x40011000
 8008a58:	40011400 	.word	0x40011400
 8008a5c:	51eb851f 	.word	0x51eb851f

08008a60 <__errno>:
 8008a60:	4b01      	ldr	r3, [pc, #4]	; (8008a68 <__errno+0x8>)
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	200000a4 	.word	0x200000a4

08008a6c <__libc_init_array>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	4d0d      	ldr	r5, [pc, #52]	; (8008aa4 <__libc_init_array+0x38>)
 8008a70:	4c0d      	ldr	r4, [pc, #52]	; (8008aa8 <__libc_init_array+0x3c>)
 8008a72:	1b64      	subs	r4, r4, r5
 8008a74:	10a4      	asrs	r4, r4, #2
 8008a76:	2600      	movs	r6, #0
 8008a78:	42a6      	cmp	r6, r4
 8008a7a:	d109      	bne.n	8008a90 <__libc_init_array+0x24>
 8008a7c:	4d0b      	ldr	r5, [pc, #44]	; (8008aac <__libc_init_array+0x40>)
 8008a7e:	4c0c      	ldr	r4, [pc, #48]	; (8008ab0 <__libc_init_array+0x44>)
 8008a80:	f003 fe58 	bl	800c734 <_init>
 8008a84:	1b64      	subs	r4, r4, r5
 8008a86:	10a4      	asrs	r4, r4, #2
 8008a88:	2600      	movs	r6, #0
 8008a8a:	42a6      	cmp	r6, r4
 8008a8c:	d105      	bne.n	8008a9a <__libc_init_array+0x2e>
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a94:	4798      	blx	r3
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7ee      	b.n	8008a78 <__libc_init_array+0xc>
 8008a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9e:	4798      	blx	r3
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7f2      	b.n	8008a8a <__libc_init_array+0x1e>
 8008aa4:	0800ce38 	.word	0x0800ce38
 8008aa8:	0800ce38 	.word	0x0800ce38
 8008aac:	0800ce38 	.word	0x0800ce38
 8008ab0:	0800ce3c 	.word	0x0800ce3c

08008ab4 <memset>:
 8008ab4:	4402      	add	r2, r0
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d100      	bne.n	8008abe <memset+0xa>
 8008abc:	4770      	bx	lr
 8008abe:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac2:	e7f9      	b.n	8008ab8 <memset+0x4>

08008ac4 <__cvt>:
 8008ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	ec55 4b10 	vmov	r4, r5, d0
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	460e      	mov	r6, r1
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	bfbb      	ittet	lt
 8008ad6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ada:	461d      	movlt	r5, r3
 8008adc:	2300      	movge	r3, #0
 8008ade:	232d      	movlt	r3, #45	; 0x2d
 8008ae0:	700b      	strb	r3, [r1, #0]
 8008ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ae8:	4691      	mov	r9, r2
 8008aea:	f023 0820 	bic.w	r8, r3, #32
 8008aee:	bfbc      	itt	lt
 8008af0:	4622      	movlt	r2, r4
 8008af2:	4614      	movlt	r4, r2
 8008af4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008af8:	d005      	beq.n	8008b06 <__cvt+0x42>
 8008afa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008afe:	d100      	bne.n	8008b02 <__cvt+0x3e>
 8008b00:	3601      	adds	r6, #1
 8008b02:	2102      	movs	r1, #2
 8008b04:	e000      	b.n	8008b08 <__cvt+0x44>
 8008b06:	2103      	movs	r1, #3
 8008b08:	ab03      	add	r3, sp, #12
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	ab02      	add	r3, sp, #8
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	ec45 4b10 	vmov	d0, r4, r5
 8008b14:	4653      	mov	r3, sl
 8008b16:	4632      	mov	r2, r6
 8008b18:	f000 fcea 	bl	80094f0 <_dtoa_r>
 8008b1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b20:	4607      	mov	r7, r0
 8008b22:	d102      	bne.n	8008b2a <__cvt+0x66>
 8008b24:	f019 0f01 	tst.w	r9, #1
 8008b28:	d022      	beq.n	8008b70 <__cvt+0xac>
 8008b2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b2e:	eb07 0906 	add.w	r9, r7, r6
 8008b32:	d110      	bne.n	8008b56 <__cvt+0x92>
 8008b34:	783b      	ldrb	r3, [r7, #0]
 8008b36:	2b30      	cmp	r3, #48	; 0x30
 8008b38:	d10a      	bne.n	8008b50 <__cvt+0x8c>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 ffd9 	bl	8000af8 <__aeabi_dcmpeq>
 8008b46:	b918      	cbnz	r0, 8008b50 <__cvt+0x8c>
 8008b48:	f1c6 0601 	rsb	r6, r6, #1
 8008b4c:	f8ca 6000 	str.w	r6, [sl]
 8008b50:	f8da 3000 	ldr.w	r3, [sl]
 8008b54:	4499      	add	r9, r3
 8008b56:	2200      	movs	r2, #0
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	f7f7 ffcb 	bl	8000af8 <__aeabi_dcmpeq>
 8008b62:	b108      	cbz	r0, 8008b68 <__cvt+0xa4>
 8008b64:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b68:	2230      	movs	r2, #48	; 0x30
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	454b      	cmp	r3, r9
 8008b6e:	d307      	bcc.n	8008b80 <__cvt+0xbc>
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b74:	1bdb      	subs	r3, r3, r7
 8008b76:	4638      	mov	r0, r7
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	b004      	add	sp, #16
 8008b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b80:	1c59      	adds	r1, r3, #1
 8008b82:	9103      	str	r1, [sp, #12]
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e7f0      	b.n	8008b6a <__cvt+0xa6>

08008b88 <__exponent>:
 8008b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	bfb8      	it	lt
 8008b90:	4249      	neglt	r1, r1
 8008b92:	f803 2b02 	strb.w	r2, [r3], #2
 8008b96:	bfb4      	ite	lt
 8008b98:	222d      	movlt	r2, #45	; 0x2d
 8008b9a:	222b      	movge	r2, #43	; 0x2b
 8008b9c:	2909      	cmp	r1, #9
 8008b9e:	7042      	strb	r2, [r0, #1]
 8008ba0:	dd2a      	ble.n	8008bf8 <__exponent+0x70>
 8008ba2:	f10d 0407 	add.w	r4, sp, #7
 8008ba6:	46a4      	mov	ip, r4
 8008ba8:	270a      	movs	r7, #10
 8008baa:	46a6      	mov	lr, r4
 8008bac:	460a      	mov	r2, r1
 8008bae:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bb2:	fb07 1516 	mls	r5, r7, r6, r1
 8008bb6:	3530      	adds	r5, #48	; 0x30
 8008bb8:	2a63      	cmp	r2, #99	; 0x63
 8008bba:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	dcf1      	bgt.n	8008baa <__exponent+0x22>
 8008bc6:	3130      	adds	r1, #48	; 0x30
 8008bc8:	f1ae 0502 	sub.w	r5, lr, #2
 8008bcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bd0:	1c44      	adds	r4, r0, #1
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4561      	cmp	r1, ip
 8008bd6:	d30a      	bcc.n	8008bee <__exponent+0x66>
 8008bd8:	f10d 0209 	add.w	r2, sp, #9
 8008bdc:	eba2 020e 	sub.w	r2, r2, lr
 8008be0:	4565      	cmp	r5, ip
 8008be2:	bf88      	it	hi
 8008be4:	2200      	movhi	r2, #0
 8008be6:	4413      	add	r3, r2
 8008be8:	1a18      	subs	r0, r3, r0
 8008bea:	b003      	add	sp, #12
 8008bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008bf6:	e7ed      	b.n	8008bd4 <__exponent+0x4c>
 8008bf8:	2330      	movs	r3, #48	; 0x30
 8008bfa:	3130      	adds	r1, #48	; 0x30
 8008bfc:	7083      	strb	r3, [r0, #2]
 8008bfe:	70c1      	strb	r1, [r0, #3]
 8008c00:	1d03      	adds	r3, r0, #4
 8008c02:	e7f1      	b.n	8008be8 <__exponent+0x60>

08008c04 <_printf_float>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	ed2d 8b02 	vpush	{d8}
 8008c0c:	b08d      	sub	sp, #52	; 0x34
 8008c0e:	460c      	mov	r4, r1
 8008c10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c14:	4616      	mov	r6, r2
 8008c16:	461f      	mov	r7, r3
 8008c18:	4605      	mov	r5, r0
 8008c1a:	f001 fa55 	bl	800a0c8 <_localeconv_r>
 8008c1e:	f8d0 a000 	ldr.w	sl, [r0]
 8008c22:	4650      	mov	r0, sl
 8008c24:	f7f7 fae6 	bl	80001f4 <strlen>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	9305      	str	r3, [sp, #20]
 8008c30:	f8d8 3000 	ldr.w	r3, [r8]
 8008c34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c38:	3307      	adds	r3, #7
 8008c3a:	f023 0307 	bic.w	r3, r3, #7
 8008c3e:	f103 0208 	add.w	r2, r3, #8
 8008c42:	f8c8 2000 	str.w	r2, [r8]
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c5c:	ee08 0a10 	vmov	s16, r0
 8008c60:	4b9f      	ldr	r3, [pc, #636]	; (8008ee0 <_printf_float+0x2dc>)
 8008c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6a:	f7f7 ff77 	bl	8000b5c <__aeabi_dcmpun>
 8008c6e:	bb88      	cbnz	r0, 8008cd4 <_printf_float+0xd0>
 8008c70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c74:	4b9a      	ldr	r3, [pc, #616]	; (8008ee0 <_printf_float+0x2dc>)
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7a:	f7f7 ff51 	bl	8000b20 <__aeabi_dcmple>
 8008c7e:	bb48      	cbnz	r0, 8008cd4 <_printf_float+0xd0>
 8008c80:	2200      	movs	r2, #0
 8008c82:	2300      	movs	r3, #0
 8008c84:	4640      	mov	r0, r8
 8008c86:	4649      	mov	r1, r9
 8008c88:	f7f7 ff40 	bl	8000b0c <__aeabi_dcmplt>
 8008c8c:	b110      	cbz	r0, 8008c94 <_printf_float+0x90>
 8008c8e:	232d      	movs	r3, #45	; 0x2d
 8008c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c94:	4b93      	ldr	r3, [pc, #588]	; (8008ee4 <_printf_float+0x2e0>)
 8008c96:	4894      	ldr	r0, [pc, #592]	; (8008ee8 <_printf_float+0x2e4>)
 8008c98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c9c:	bf94      	ite	ls
 8008c9e:	4698      	movls	r8, r3
 8008ca0:	4680      	movhi	r8, r0
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	9b05      	ldr	r3, [sp, #20]
 8008ca8:	f023 0204 	bic.w	r2, r3, #4
 8008cac:	6022      	str	r2, [r4, #0]
 8008cae:	f04f 0900 	mov.w	r9, #0
 8008cb2:	9700      	str	r7, [sp, #0]
 8008cb4:	4633      	mov	r3, r6
 8008cb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 f9d8 	bl	8009070 <_printf_common>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	f040 8090 	bne.w	8008de6 <_printf_float+0x1e2>
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	b00d      	add	sp, #52	; 0x34
 8008ccc:	ecbd 8b02 	vpop	{d8}
 8008cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	4640      	mov	r0, r8
 8008cda:	4649      	mov	r1, r9
 8008cdc:	f7f7 ff3e 	bl	8000b5c <__aeabi_dcmpun>
 8008ce0:	b140      	cbz	r0, 8008cf4 <_printf_float+0xf0>
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfbc      	itt	lt
 8008ce8:	232d      	movlt	r3, #45	; 0x2d
 8008cea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cee:	487f      	ldr	r0, [pc, #508]	; (8008eec <_printf_float+0x2e8>)
 8008cf0:	4b7f      	ldr	r3, [pc, #508]	; (8008ef0 <_printf_float+0x2ec>)
 8008cf2:	e7d1      	b.n	8008c98 <_printf_float+0x94>
 8008cf4:	6863      	ldr	r3, [r4, #4]
 8008cf6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cfa:	9206      	str	r2, [sp, #24]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	d13f      	bne.n	8008d80 <_printf_float+0x17c>
 8008d00:	2306      	movs	r3, #6
 8008d02:	6063      	str	r3, [r4, #4]
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	6861      	ldr	r1, [r4, #4]
 8008d08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	ab0a      	add	r3, sp, #40	; 0x28
 8008d12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d16:	ab09      	add	r3, sp, #36	; 0x24
 8008d18:	ec49 8b10 	vmov	d0, r8, r9
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	6022      	str	r2, [r4, #0]
 8008d20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d24:	4628      	mov	r0, r5
 8008d26:	f7ff fecd 	bl	8008ac4 <__cvt>
 8008d2a:	9b06      	ldr	r3, [sp, #24]
 8008d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d2e:	2b47      	cmp	r3, #71	; 0x47
 8008d30:	4680      	mov	r8, r0
 8008d32:	d108      	bne.n	8008d46 <_printf_float+0x142>
 8008d34:	1cc8      	adds	r0, r1, #3
 8008d36:	db02      	blt.n	8008d3e <_printf_float+0x13a>
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	4299      	cmp	r1, r3
 8008d3c:	dd41      	ble.n	8008dc2 <_printf_float+0x1be>
 8008d3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d42:	fa5f fb8b 	uxtb.w	fp, fp
 8008d46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d4a:	d820      	bhi.n	8008d8e <_printf_float+0x18a>
 8008d4c:	3901      	subs	r1, #1
 8008d4e:	465a      	mov	r2, fp
 8008d50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d54:	9109      	str	r1, [sp, #36]	; 0x24
 8008d56:	f7ff ff17 	bl	8008b88 <__exponent>
 8008d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d5c:	1813      	adds	r3, r2, r0
 8008d5e:	2a01      	cmp	r2, #1
 8008d60:	4681      	mov	r9, r0
 8008d62:	6123      	str	r3, [r4, #16]
 8008d64:	dc02      	bgt.n	8008d6c <_printf_float+0x168>
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	07d2      	lsls	r2, r2, #31
 8008d6a:	d501      	bpl.n	8008d70 <_printf_float+0x16c>
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d09c      	beq.n	8008cb2 <_printf_float+0xae>
 8008d78:	232d      	movs	r3, #45	; 0x2d
 8008d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7e:	e798      	b.n	8008cb2 <_printf_float+0xae>
 8008d80:	9a06      	ldr	r2, [sp, #24]
 8008d82:	2a47      	cmp	r2, #71	; 0x47
 8008d84:	d1be      	bne.n	8008d04 <_printf_float+0x100>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1bc      	bne.n	8008d04 <_printf_float+0x100>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e7b9      	b.n	8008d02 <_printf_float+0xfe>
 8008d8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d92:	d118      	bne.n	8008dc6 <_printf_float+0x1c2>
 8008d94:	2900      	cmp	r1, #0
 8008d96:	6863      	ldr	r3, [r4, #4]
 8008d98:	dd0b      	ble.n	8008db2 <_printf_float+0x1ae>
 8008d9a:	6121      	str	r1, [r4, #16]
 8008d9c:	b913      	cbnz	r3, 8008da4 <_printf_float+0x1a0>
 8008d9e:	6822      	ldr	r2, [r4, #0]
 8008da0:	07d0      	lsls	r0, r2, #31
 8008da2:	d502      	bpl.n	8008daa <_printf_float+0x1a6>
 8008da4:	3301      	adds	r3, #1
 8008da6:	440b      	add	r3, r1
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	65a1      	str	r1, [r4, #88]	; 0x58
 8008dac:	f04f 0900 	mov.w	r9, #0
 8008db0:	e7de      	b.n	8008d70 <_printf_float+0x16c>
 8008db2:	b913      	cbnz	r3, 8008dba <_printf_float+0x1b6>
 8008db4:	6822      	ldr	r2, [r4, #0]
 8008db6:	07d2      	lsls	r2, r2, #31
 8008db8:	d501      	bpl.n	8008dbe <_printf_float+0x1ba>
 8008dba:	3302      	adds	r3, #2
 8008dbc:	e7f4      	b.n	8008da8 <_printf_float+0x1a4>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e7f2      	b.n	8008da8 <_printf_float+0x1a4>
 8008dc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc8:	4299      	cmp	r1, r3
 8008dca:	db05      	blt.n	8008dd8 <_printf_float+0x1d4>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	6121      	str	r1, [r4, #16]
 8008dd0:	07d8      	lsls	r0, r3, #31
 8008dd2:	d5ea      	bpl.n	8008daa <_printf_float+0x1a6>
 8008dd4:	1c4b      	adds	r3, r1, #1
 8008dd6:	e7e7      	b.n	8008da8 <_printf_float+0x1a4>
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	bfd4      	ite	le
 8008ddc:	f1c1 0202 	rsble	r2, r1, #2
 8008de0:	2201      	movgt	r2, #1
 8008de2:	4413      	add	r3, r2
 8008de4:	e7e0      	b.n	8008da8 <_printf_float+0x1a4>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	055a      	lsls	r2, r3, #21
 8008dea:	d407      	bmi.n	8008dfc <_printf_float+0x1f8>
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	4642      	mov	r2, r8
 8008df0:	4631      	mov	r1, r6
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b8      	blx	r7
 8008df6:	3001      	adds	r0, #1
 8008df8:	d12c      	bne.n	8008e54 <_printf_float+0x250>
 8008dfa:	e764      	b.n	8008cc6 <_printf_float+0xc2>
 8008dfc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e00:	f240 80e0 	bls.w	8008fc4 <_printf_float+0x3c0>
 8008e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f7f7 fe74 	bl	8000af8 <__aeabi_dcmpeq>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d034      	beq.n	8008e7e <_printf_float+0x27a>
 8008e14:	4a37      	ldr	r2, [pc, #220]	; (8008ef4 <_printf_float+0x2f0>)
 8008e16:	2301      	movs	r3, #1
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f43f af51 	beq.w	8008cc6 <_printf_float+0xc2>
 8008e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	db02      	blt.n	8008e32 <_printf_float+0x22e>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	07d8      	lsls	r0, r3, #31
 8008e30:	d510      	bpl.n	8008e54 <_printf_float+0x250>
 8008e32:	ee18 3a10 	vmov	r3, s16
 8008e36:	4652      	mov	r2, sl
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	47b8      	blx	r7
 8008e3e:	3001      	adds	r0, #1
 8008e40:	f43f af41 	beq.w	8008cc6 <_printf_float+0xc2>
 8008e44:	f04f 0800 	mov.w	r8, #0
 8008e48:	f104 091a 	add.w	r9, r4, #26
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	4543      	cmp	r3, r8
 8008e52:	dc09      	bgt.n	8008e68 <_printf_float+0x264>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	079b      	lsls	r3, r3, #30
 8008e58:	f100 8105 	bmi.w	8009066 <_printf_float+0x462>
 8008e5c:	68e0      	ldr	r0, [r4, #12]
 8008e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e60:	4298      	cmp	r0, r3
 8008e62:	bfb8      	it	lt
 8008e64:	4618      	movlt	r0, r3
 8008e66:	e730      	b.n	8008cca <_printf_float+0xc6>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	464a      	mov	r2, r9
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4628      	mov	r0, r5
 8008e70:	47b8      	blx	r7
 8008e72:	3001      	adds	r0, #1
 8008e74:	f43f af27 	beq.w	8008cc6 <_printf_float+0xc2>
 8008e78:	f108 0801 	add.w	r8, r8, #1
 8008e7c:	e7e6      	b.n	8008e4c <_printf_float+0x248>
 8008e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dc39      	bgt.n	8008ef8 <_printf_float+0x2f4>
 8008e84:	4a1b      	ldr	r2, [pc, #108]	; (8008ef4 <_printf_float+0x2f0>)
 8008e86:	2301      	movs	r3, #1
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	f43f af19 	beq.w	8008cc6 <_printf_float+0xc2>
 8008e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	d102      	bne.n	8008ea2 <_printf_float+0x29e>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	07d9      	lsls	r1, r3, #31
 8008ea0:	d5d8      	bpl.n	8008e54 <_printf_float+0x250>
 8008ea2:	ee18 3a10 	vmov	r3, s16
 8008ea6:	4652      	mov	r2, sl
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f af09 	beq.w	8008cc6 <_printf_float+0xc2>
 8008eb4:	f04f 0900 	mov.w	r9, #0
 8008eb8:	f104 0a1a 	add.w	sl, r4, #26
 8008ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebe:	425b      	negs	r3, r3
 8008ec0:	454b      	cmp	r3, r9
 8008ec2:	dc01      	bgt.n	8008ec8 <_printf_float+0x2c4>
 8008ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec6:	e792      	b.n	8008dee <_printf_float+0x1ea>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4652      	mov	r2, sl
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4628      	mov	r0, r5
 8008ed0:	47b8      	blx	r7
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f43f aef7 	beq.w	8008cc6 <_printf_float+0xc2>
 8008ed8:	f109 0901 	add.w	r9, r9, #1
 8008edc:	e7ee      	b.n	8008ebc <_printf_float+0x2b8>
 8008ede:	bf00      	nop
 8008ee0:	7fefffff 	.word	0x7fefffff
 8008ee4:	0800c9bc 	.word	0x0800c9bc
 8008ee8:	0800c9c0 	.word	0x0800c9c0
 8008eec:	0800c9c8 	.word	0x0800c9c8
 8008ef0:	0800c9c4 	.word	0x0800c9c4
 8008ef4:	0800c9cc 	.word	0x0800c9cc
 8008ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008efa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008efc:	429a      	cmp	r2, r3
 8008efe:	bfa8      	it	ge
 8008f00:	461a      	movge	r2, r3
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	4691      	mov	r9, r2
 8008f06:	dc37      	bgt.n	8008f78 <_printf_float+0x374>
 8008f08:	f04f 0b00 	mov.w	fp, #0
 8008f0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f10:	f104 021a 	add.w	r2, r4, #26
 8008f14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f16:	9305      	str	r3, [sp, #20]
 8008f18:	eba3 0309 	sub.w	r3, r3, r9
 8008f1c:	455b      	cmp	r3, fp
 8008f1e:	dc33      	bgt.n	8008f88 <_printf_float+0x384>
 8008f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f24:	429a      	cmp	r2, r3
 8008f26:	db3b      	blt.n	8008fa0 <_printf_float+0x39c>
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	07da      	lsls	r2, r3, #31
 8008f2c:	d438      	bmi.n	8008fa0 <_printf_float+0x39c>
 8008f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f30:	9b05      	ldr	r3, [sp, #20]
 8008f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	eba2 0901 	sub.w	r9, r2, r1
 8008f3a:	4599      	cmp	r9, r3
 8008f3c:	bfa8      	it	ge
 8008f3e:	4699      	movge	r9, r3
 8008f40:	f1b9 0f00 	cmp.w	r9, #0
 8008f44:	dc35      	bgt.n	8008fb2 <_printf_float+0x3ae>
 8008f46:	f04f 0800 	mov.w	r8, #0
 8008f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f4e:	f104 0a1a 	add.w	sl, r4, #26
 8008f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f56:	1a9b      	subs	r3, r3, r2
 8008f58:	eba3 0309 	sub.w	r3, r3, r9
 8008f5c:	4543      	cmp	r3, r8
 8008f5e:	f77f af79 	ble.w	8008e54 <_printf_float+0x250>
 8008f62:	2301      	movs	r3, #1
 8008f64:	4652      	mov	r2, sl
 8008f66:	4631      	mov	r1, r6
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b8      	blx	r7
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	f43f aeaa 	beq.w	8008cc6 <_printf_float+0xc2>
 8008f72:	f108 0801 	add.w	r8, r8, #1
 8008f76:	e7ec      	b.n	8008f52 <_printf_float+0x34e>
 8008f78:	4613      	mov	r3, r2
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4642      	mov	r2, r8
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	d1c0      	bne.n	8008f08 <_printf_float+0x304>
 8008f86:	e69e      	b.n	8008cc6 <_printf_float+0xc2>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	9205      	str	r2, [sp, #20]
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	f43f ae97 	beq.w	8008cc6 <_printf_float+0xc2>
 8008f98:	9a05      	ldr	r2, [sp, #20]
 8008f9a:	f10b 0b01 	add.w	fp, fp, #1
 8008f9e:	e7b9      	b.n	8008f14 <_printf_float+0x310>
 8008fa0:	ee18 3a10 	vmov	r3, s16
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b8      	blx	r7
 8008fac:	3001      	adds	r0, #1
 8008fae:	d1be      	bne.n	8008f2e <_printf_float+0x32a>
 8008fb0:	e689      	b.n	8008cc6 <_printf_float+0xc2>
 8008fb2:	9a05      	ldr	r2, [sp, #20]
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	4442      	add	r2, r8
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d1c1      	bne.n	8008f46 <_printf_float+0x342>
 8008fc2:	e680      	b.n	8008cc6 <_printf_float+0xc2>
 8008fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc6:	2a01      	cmp	r2, #1
 8008fc8:	dc01      	bgt.n	8008fce <_printf_float+0x3ca>
 8008fca:	07db      	lsls	r3, r3, #31
 8008fcc:	d538      	bpl.n	8009040 <_printf_float+0x43c>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b8      	blx	r7
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f43f ae74 	beq.w	8008cc6 <_printf_float+0xc2>
 8008fde:	ee18 3a10 	vmov	r3, s16
 8008fe2:	4652      	mov	r2, sl
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	f43f ae6b 	beq.w	8008cc6 <_printf_float+0xc2>
 8008ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f7f7 fd7e 	bl	8000af8 <__aeabi_dcmpeq>
 8008ffc:	b9d8      	cbnz	r0, 8009036 <_printf_float+0x432>
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009000:	f108 0201 	add.w	r2, r8, #1
 8009004:	3b01      	subs	r3, #1
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	d10e      	bne.n	800902e <_printf_float+0x42a>
 8009010:	e659      	b.n	8008cc6 <_printf_float+0xc2>
 8009012:	2301      	movs	r3, #1
 8009014:	4652      	mov	r2, sl
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f ae52 	beq.w	8008cc6 <_printf_float+0xc2>
 8009022:	f108 0801 	add.w	r8, r8, #1
 8009026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009028:	3b01      	subs	r3, #1
 800902a:	4543      	cmp	r3, r8
 800902c:	dcf1      	bgt.n	8009012 <_printf_float+0x40e>
 800902e:	464b      	mov	r3, r9
 8009030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009034:	e6dc      	b.n	8008df0 <_printf_float+0x1ec>
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	f104 0a1a 	add.w	sl, r4, #26
 800903e:	e7f2      	b.n	8009026 <_printf_float+0x422>
 8009040:	2301      	movs	r3, #1
 8009042:	4642      	mov	r2, r8
 8009044:	e7df      	b.n	8009006 <_printf_float+0x402>
 8009046:	2301      	movs	r3, #1
 8009048:	464a      	mov	r2, r9
 800904a:	4631      	mov	r1, r6
 800904c:	4628      	mov	r0, r5
 800904e:	47b8      	blx	r7
 8009050:	3001      	adds	r0, #1
 8009052:	f43f ae38 	beq.w	8008cc6 <_printf_float+0xc2>
 8009056:	f108 0801 	add.w	r8, r8, #1
 800905a:	68e3      	ldr	r3, [r4, #12]
 800905c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800905e:	1a5b      	subs	r3, r3, r1
 8009060:	4543      	cmp	r3, r8
 8009062:	dcf0      	bgt.n	8009046 <_printf_float+0x442>
 8009064:	e6fa      	b.n	8008e5c <_printf_float+0x258>
 8009066:	f04f 0800 	mov.w	r8, #0
 800906a:	f104 0919 	add.w	r9, r4, #25
 800906e:	e7f4      	b.n	800905a <_printf_float+0x456>

08009070 <_printf_common>:
 8009070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009074:	4616      	mov	r6, r2
 8009076:	4699      	mov	r9, r3
 8009078:	688a      	ldr	r2, [r1, #8]
 800907a:	690b      	ldr	r3, [r1, #16]
 800907c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009080:	4293      	cmp	r3, r2
 8009082:	bfb8      	it	lt
 8009084:	4613      	movlt	r3, r2
 8009086:	6033      	str	r3, [r6, #0]
 8009088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800908c:	4607      	mov	r7, r0
 800908e:	460c      	mov	r4, r1
 8009090:	b10a      	cbz	r2, 8009096 <_printf_common+0x26>
 8009092:	3301      	adds	r3, #1
 8009094:	6033      	str	r3, [r6, #0]
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	0699      	lsls	r1, r3, #26
 800909a:	bf42      	ittt	mi
 800909c:	6833      	ldrmi	r3, [r6, #0]
 800909e:	3302      	addmi	r3, #2
 80090a0:	6033      	strmi	r3, [r6, #0]
 80090a2:	6825      	ldr	r5, [r4, #0]
 80090a4:	f015 0506 	ands.w	r5, r5, #6
 80090a8:	d106      	bne.n	80090b8 <_printf_common+0x48>
 80090aa:	f104 0a19 	add.w	sl, r4, #25
 80090ae:	68e3      	ldr	r3, [r4, #12]
 80090b0:	6832      	ldr	r2, [r6, #0]
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	42ab      	cmp	r3, r5
 80090b6:	dc26      	bgt.n	8009106 <_printf_common+0x96>
 80090b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090bc:	1e13      	subs	r3, r2, #0
 80090be:	6822      	ldr	r2, [r4, #0]
 80090c0:	bf18      	it	ne
 80090c2:	2301      	movne	r3, #1
 80090c4:	0692      	lsls	r2, r2, #26
 80090c6:	d42b      	bmi.n	8009120 <_printf_common+0xb0>
 80090c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090cc:	4649      	mov	r1, r9
 80090ce:	4638      	mov	r0, r7
 80090d0:	47c0      	blx	r8
 80090d2:	3001      	adds	r0, #1
 80090d4:	d01e      	beq.n	8009114 <_printf_common+0xa4>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	68e5      	ldr	r5, [r4, #12]
 80090da:	6832      	ldr	r2, [r6, #0]
 80090dc:	f003 0306 	and.w	r3, r3, #6
 80090e0:	2b04      	cmp	r3, #4
 80090e2:	bf08      	it	eq
 80090e4:	1aad      	subeq	r5, r5, r2
 80090e6:	68a3      	ldr	r3, [r4, #8]
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	bf0c      	ite	eq
 80090ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f0:	2500      	movne	r5, #0
 80090f2:	4293      	cmp	r3, r2
 80090f4:	bfc4      	itt	gt
 80090f6:	1a9b      	subgt	r3, r3, r2
 80090f8:	18ed      	addgt	r5, r5, r3
 80090fa:	2600      	movs	r6, #0
 80090fc:	341a      	adds	r4, #26
 80090fe:	42b5      	cmp	r5, r6
 8009100:	d11a      	bne.n	8009138 <_printf_common+0xc8>
 8009102:	2000      	movs	r0, #0
 8009104:	e008      	b.n	8009118 <_printf_common+0xa8>
 8009106:	2301      	movs	r3, #1
 8009108:	4652      	mov	r2, sl
 800910a:	4649      	mov	r1, r9
 800910c:	4638      	mov	r0, r7
 800910e:	47c0      	blx	r8
 8009110:	3001      	adds	r0, #1
 8009112:	d103      	bne.n	800911c <_printf_common+0xac>
 8009114:	f04f 30ff 	mov.w	r0, #4294967295
 8009118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911c:	3501      	adds	r5, #1
 800911e:	e7c6      	b.n	80090ae <_printf_common+0x3e>
 8009120:	18e1      	adds	r1, r4, r3
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	2030      	movs	r0, #48	; 0x30
 8009126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800912a:	4422      	add	r2, r4
 800912c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009134:	3302      	adds	r3, #2
 8009136:	e7c7      	b.n	80090c8 <_printf_common+0x58>
 8009138:	2301      	movs	r3, #1
 800913a:	4622      	mov	r2, r4
 800913c:	4649      	mov	r1, r9
 800913e:	4638      	mov	r0, r7
 8009140:	47c0      	blx	r8
 8009142:	3001      	adds	r0, #1
 8009144:	d0e6      	beq.n	8009114 <_printf_common+0xa4>
 8009146:	3601      	adds	r6, #1
 8009148:	e7d9      	b.n	80090fe <_printf_common+0x8e>
	...

0800914c <_printf_i>:
 800914c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009150:	460c      	mov	r4, r1
 8009152:	4691      	mov	r9, r2
 8009154:	7e27      	ldrb	r7, [r4, #24]
 8009156:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009158:	2f78      	cmp	r7, #120	; 0x78
 800915a:	4680      	mov	r8, r0
 800915c:	469a      	mov	sl, r3
 800915e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009162:	d807      	bhi.n	8009174 <_printf_i+0x28>
 8009164:	2f62      	cmp	r7, #98	; 0x62
 8009166:	d80a      	bhi.n	800917e <_printf_i+0x32>
 8009168:	2f00      	cmp	r7, #0
 800916a:	f000 80d8 	beq.w	800931e <_printf_i+0x1d2>
 800916e:	2f58      	cmp	r7, #88	; 0x58
 8009170:	f000 80a3 	beq.w	80092ba <_printf_i+0x16e>
 8009174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800917c:	e03a      	b.n	80091f4 <_printf_i+0xa8>
 800917e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009182:	2b15      	cmp	r3, #21
 8009184:	d8f6      	bhi.n	8009174 <_printf_i+0x28>
 8009186:	a001      	add	r0, pc, #4	; (adr r0, 800918c <_printf_i+0x40>)
 8009188:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800918c:	080091e5 	.word	0x080091e5
 8009190:	080091f9 	.word	0x080091f9
 8009194:	08009175 	.word	0x08009175
 8009198:	08009175 	.word	0x08009175
 800919c:	08009175 	.word	0x08009175
 80091a0:	08009175 	.word	0x08009175
 80091a4:	080091f9 	.word	0x080091f9
 80091a8:	08009175 	.word	0x08009175
 80091ac:	08009175 	.word	0x08009175
 80091b0:	08009175 	.word	0x08009175
 80091b4:	08009175 	.word	0x08009175
 80091b8:	08009305 	.word	0x08009305
 80091bc:	08009229 	.word	0x08009229
 80091c0:	080092e7 	.word	0x080092e7
 80091c4:	08009175 	.word	0x08009175
 80091c8:	08009175 	.word	0x08009175
 80091cc:	08009327 	.word	0x08009327
 80091d0:	08009175 	.word	0x08009175
 80091d4:	08009229 	.word	0x08009229
 80091d8:	08009175 	.word	0x08009175
 80091dc:	08009175 	.word	0x08009175
 80091e0:	080092ef 	.word	0x080092ef
 80091e4:	680b      	ldr	r3, [r1, #0]
 80091e6:	1d1a      	adds	r2, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	600a      	str	r2, [r1, #0]
 80091ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091f4:	2301      	movs	r3, #1
 80091f6:	e0a3      	b.n	8009340 <_printf_i+0x1f4>
 80091f8:	6825      	ldr	r5, [r4, #0]
 80091fa:	6808      	ldr	r0, [r1, #0]
 80091fc:	062e      	lsls	r6, r5, #24
 80091fe:	f100 0304 	add.w	r3, r0, #4
 8009202:	d50a      	bpl.n	800921a <_printf_i+0xce>
 8009204:	6805      	ldr	r5, [r0, #0]
 8009206:	600b      	str	r3, [r1, #0]
 8009208:	2d00      	cmp	r5, #0
 800920a:	da03      	bge.n	8009214 <_printf_i+0xc8>
 800920c:	232d      	movs	r3, #45	; 0x2d
 800920e:	426d      	negs	r5, r5
 8009210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009214:	485e      	ldr	r0, [pc, #376]	; (8009390 <_printf_i+0x244>)
 8009216:	230a      	movs	r3, #10
 8009218:	e019      	b.n	800924e <_printf_i+0x102>
 800921a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800921e:	6805      	ldr	r5, [r0, #0]
 8009220:	600b      	str	r3, [r1, #0]
 8009222:	bf18      	it	ne
 8009224:	b22d      	sxthne	r5, r5
 8009226:	e7ef      	b.n	8009208 <_printf_i+0xbc>
 8009228:	680b      	ldr	r3, [r1, #0]
 800922a:	6825      	ldr	r5, [r4, #0]
 800922c:	1d18      	adds	r0, r3, #4
 800922e:	6008      	str	r0, [r1, #0]
 8009230:	0628      	lsls	r0, r5, #24
 8009232:	d501      	bpl.n	8009238 <_printf_i+0xec>
 8009234:	681d      	ldr	r5, [r3, #0]
 8009236:	e002      	b.n	800923e <_printf_i+0xf2>
 8009238:	0669      	lsls	r1, r5, #25
 800923a:	d5fb      	bpl.n	8009234 <_printf_i+0xe8>
 800923c:	881d      	ldrh	r5, [r3, #0]
 800923e:	4854      	ldr	r0, [pc, #336]	; (8009390 <_printf_i+0x244>)
 8009240:	2f6f      	cmp	r7, #111	; 0x6f
 8009242:	bf0c      	ite	eq
 8009244:	2308      	moveq	r3, #8
 8009246:	230a      	movne	r3, #10
 8009248:	2100      	movs	r1, #0
 800924a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800924e:	6866      	ldr	r6, [r4, #4]
 8009250:	60a6      	str	r6, [r4, #8]
 8009252:	2e00      	cmp	r6, #0
 8009254:	bfa2      	ittt	ge
 8009256:	6821      	ldrge	r1, [r4, #0]
 8009258:	f021 0104 	bicge.w	r1, r1, #4
 800925c:	6021      	strge	r1, [r4, #0]
 800925e:	b90d      	cbnz	r5, 8009264 <_printf_i+0x118>
 8009260:	2e00      	cmp	r6, #0
 8009262:	d04d      	beq.n	8009300 <_printf_i+0x1b4>
 8009264:	4616      	mov	r6, r2
 8009266:	fbb5 f1f3 	udiv	r1, r5, r3
 800926a:	fb03 5711 	mls	r7, r3, r1, r5
 800926e:	5dc7      	ldrb	r7, [r0, r7]
 8009270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009274:	462f      	mov	r7, r5
 8009276:	42bb      	cmp	r3, r7
 8009278:	460d      	mov	r5, r1
 800927a:	d9f4      	bls.n	8009266 <_printf_i+0x11a>
 800927c:	2b08      	cmp	r3, #8
 800927e:	d10b      	bne.n	8009298 <_printf_i+0x14c>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	07df      	lsls	r7, r3, #31
 8009284:	d508      	bpl.n	8009298 <_printf_i+0x14c>
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	6861      	ldr	r1, [r4, #4]
 800928a:	4299      	cmp	r1, r3
 800928c:	bfde      	ittt	le
 800928e:	2330      	movle	r3, #48	; 0x30
 8009290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009294:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009298:	1b92      	subs	r2, r2, r6
 800929a:	6122      	str	r2, [r4, #16]
 800929c:	f8cd a000 	str.w	sl, [sp]
 80092a0:	464b      	mov	r3, r9
 80092a2:	aa03      	add	r2, sp, #12
 80092a4:	4621      	mov	r1, r4
 80092a6:	4640      	mov	r0, r8
 80092a8:	f7ff fee2 	bl	8009070 <_printf_common>
 80092ac:	3001      	adds	r0, #1
 80092ae:	d14c      	bne.n	800934a <_printf_i+0x1fe>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	b004      	add	sp, #16
 80092b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ba:	4835      	ldr	r0, [pc, #212]	; (8009390 <_printf_i+0x244>)
 80092bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	680e      	ldr	r6, [r1, #0]
 80092c4:	061f      	lsls	r7, r3, #24
 80092c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80092ca:	600e      	str	r6, [r1, #0]
 80092cc:	d514      	bpl.n	80092f8 <_printf_i+0x1ac>
 80092ce:	07d9      	lsls	r1, r3, #31
 80092d0:	bf44      	itt	mi
 80092d2:	f043 0320 	orrmi.w	r3, r3, #32
 80092d6:	6023      	strmi	r3, [r4, #0]
 80092d8:	b91d      	cbnz	r5, 80092e2 <_printf_i+0x196>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	f023 0320 	bic.w	r3, r3, #32
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	2310      	movs	r3, #16
 80092e4:	e7b0      	b.n	8009248 <_printf_i+0xfc>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	f043 0320 	orr.w	r3, r3, #32
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	2378      	movs	r3, #120	; 0x78
 80092f0:	4828      	ldr	r0, [pc, #160]	; (8009394 <_printf_i+0x248>)
 80092f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092f6:	e7e3      	b.n	80092c0 <_printf_i+0x174>
 80092f8:	065e      	lsls	r6, r3, #25
 80092fa:	bf48      	it	mi
 80092fc:	b2ad      	uxthmi	r5, r5
 80092fe:	e7e6      	b.n	80092ce <_printf_i+0x182>
 8009300:	4616      	mov	r6, r2
 8009302:	e7bb      	b.n	800927c <_printf_i+0x130>
 8009304:	680b      	ldr	r3, [r1, #0]
 8009306:	6826      	ldr	r6, [r4, #0]
 8009308:	6960      	ldr	r0, [r4, #20]
 800930a:	1d1d      	adds	r5, r3, #4
 800930c:	600d      	str	r5, [r1, #0]
 800930e:	0635      	lsls	r5, r6, #24
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	d501      	bpl.n	8009318 <_printf_i+0x1cc>
 8009314:	6018      	str	r0, [r3, #0]
 8009316:	e002      	b.n	800931e <_printf_i+0x1d2>
 8009318:	0671      	lsls	r1, r6, #25
 800931a:	d5fb      	bpl.n	8009314 <_printf_i+0x1c8>
 800931c:	8018      	strh	r0, [r3, #0]
 800931e:	2300      	movs	r3, #0
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	4616      	mov	r6, r2
 8009324:	e7ba      	b.n	800929c <_printf_i+0x150>
 8009326:	680b      	ldr	r3, [r1, #0]
 8009328:	1d1a      	adds	r2, r3, #4
 800932a:	600a      	str	r2, [r1, #0]
 800932c:	681e      	ldr	r6, [r3, #0]
 800932e:	6862      	ldr	r2, [r4, #4]
 8009330:	2100      	movs	r1, #0
 8009332:	4630      	mov	r0, r6
 8009334:	f7f6 ff6c 	bl	8000210 <memchr>
 8009338:	b108      	cbz	r0, 800933e <_printf_i+0x1f2>
 800933a:	1b80      	subs	r0, r0, r6
 800933c:	6060      	str	r0, [r4, #4]
 800933e:	6863      	ldr	r3, [r4, #4]
 8009340:	6123      	str	r3, [r4, #16]
 8009342:	2300      	movs	r3, #0
 8009344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009348:	e7a8      	b.n	800929c <_printf_i+0x150>
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	4632      	mov	r2, r6
 800934e:	4649      	mov	r1, r9
 8009350:	4640      	mov	r0, r8
 8009352:	47d0      	blx	sl
 8009354:	3001      	adds	r0, #1
 8009356:	d0ab      	beq.n	80092b0 <_printf_i+0x164>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	079b      	lsls	r3, r3, #30
 800935c:	d413      	bmi.n	8009386 <_printf_i+0x23a>
 800935e:	68e0      	ldr	r0, [r4, #12]
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	4298      	cmp	r0, r3
 8009364:	bfb8      	it	lt
 8009366:	4618      	movlt	r0, r3
 8009368:	e7a4      	b.n	80092b4 <_printf_i+0x168>
 800936a:	2301      	movs	r3, #1
 800936c:	4632      	mov	r2, r6
 800936e:	4649      	mov	r1, r9
 8009370:	4640      	mov	r0, r8
 8009372:	47d0      	blx	sl
 8009374:	3001      	adds	r0, #1
 8009376:	d09b      	beq.n	80092b0 <_printf_i+0x164>
 8009378:	3501      	adds	r5, #1
 800937a:	68e3      	ldr	r3, [r4, #12]
 800937c:	9903      	ldr	r1, [sp, #12]
 800937e:	1a5b      	subs	r3, r3, r1
 8009380:	42ab      	cmp	r3, r5
 8009382:	dcf2      	bgt.n	800936a <_printf_i+0x21e>
 8009384:	e7eb      	b.n	800935e <_printf_i+0x212>
 8009386:	2500      	movs	r5, #0
 8009388:	f104 0619 	add.w	r6, r4, #25
 800938c:	e7f5      	b.n	800937a <_printf_i+0x22e>
 800938e:	bf00      	nop
 8009390:	0800c9ce 	.word	0x0800c9ce
 8009394:	0800c9df 	.word	0x0800c9df

08009398 <siprintf>:
 8009398:	b40e      	push	{r1, r2, r3}
 800939a:	b500      	push	{lr}
 800939c:	b09c      	sub	sp, #112	; 0x70
 800939e:	ab1d      	add	r3, sp, #116	; 0x74
 80093a0:	9002      	str	r0, [sp, #8]
 80093a2:	9006      	str	r0, [sp, #24]
 80093a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093a8:	4809      	ldr	r0, [pc, #36]	; (80093d0 <siprintf+0x38>)
 80093aa:	9107      	str	r1, [sp, #28]
 80093ac:	9104      	str	r1, [sp, #16]
 80093ae:	4909      	ldr	r1, [pc, #36]	; (80093d4 <siprintf+0x3c>)
 80093b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b4:	9105      	str	r1, [sp, #20]
 80093b6:	6800      	ldr	r0, [r0, #0]
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	a902      	add	r1, sp, #8
 80093bc:	f001 fb32 	bl	800aa24 <_svfiprintf_r>
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	b01c      	add	sp, #112	; 0x70
 80093c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093cc:	b003      	add	sp, #12
 80093ce:	4770      	bx	lr
 80093d0:	200000a4 	.word	0x200000a4
 80093d4:	ffff0208 	.word	0xffff0208

080093d8 <quorem>:
 80093d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	6903      	ldr	r3, [r0, #16]
 80093de:	690c      	ldr	r4, [r1, #16]
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	4607      	mov	r7, r0
 80093e4:	f2c0 8081 	blt.w	80094ea <quorem+0x112>
 80093e8:	3c01      	subs	r4, #1
 80093ea:	f101 0814 	add.w	r8, r1, #20
 80093ee:	f100 0514 	add.w	r5, r0, #20
 80093f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009400:	3301      	adds	r3, #1
 8009402:	429a      	cmp	r2, r3
 8009404:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009408:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800940c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009410:	d331      	bcc.n	8009476 <quorem+0x9e>
 8009412:	f04f 0e00 	mov.w	lr, #0
 8009416:	4640      	mov	r0, r8
 8009418:	46ac      	mov	ip, r5
 800941a:	46f2      	mov	sl, lr
 800941c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009420:	b293      	uxth	r3, r2
 8009422:	fb06 e303 	mla	r3, r6, r3, lr
 8009426:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800942a:	b29b      	uxth	r3, r3
 800942c:	ebaa 0303 	sub.w	r3, sl, r3
 8009430:	0c12      	lsrs	r2, r2, #16
 8009432:	f8dc a000 	ldr.w	sl, [ip]
 8009436:	fb06 e202 	mla	r2, r6, r2, lr
 800943a:	fa13 f38a 	uxtah	r3, r3, sl
 800943e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009442:	fa1f fa82 	uxth.w	sl, r2
 8009446:	f8dc 2000 	ldr.w	r2, [ip]
 800944a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800944e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009452:	b29b      	uxth	r3, r3
 8009454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009458:	4581      	cmp	r9, r0
 800945a:	f84c 3b04 	str.w	r3, [ip], #4
 800945e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009462:	d2db      	bcs.n	800941c <quorem+0x44>
 8009464:	f855 300b 	ldr.w	r3, [r5, fp]
 8009468:	b92b      	cbnz	r3, 8009476 <quorem+0x9e>
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	3b04      	subs	r3, #4
 800946e:	429d      	cmp	r5, r3
 8009470:	461a      	mov	r2, r3
 8009472:	d32e      	bcc.n	80094d2 <quorem+0xfa>
 8009474:	613c      	str	r4, [r7, #16]
 8009476:	4638      	mov	r0, r7
 8009478:	f001 f8be 	bl	800a5f8 <__mcmp>
 800947c:	2800      	cmp	r0, #0
 800947e:	db24      	blt.n	80094ca <quorem+0xf2>
 8009480:	3601      	adds	r6, #1
 8009482:	4628      	mov	r0, r5
 8009484:	f04f 0c00 	mov.w	ip, #0
 8009488:	f858 2b04 	ldr.w	r2, [r8], #4
 800948c:	f8d0 e000 	ldr.w	lr, [r0]
 8009490:	b293      	uxth	r3, r2
 8009492:	ebac 0303 	sub.w	r3, ip, r3
 8009496:	0c12      	lsrs	r2, r2, #16
 8009498:	fa13 f38e 	uxtah	r3, r3, lr
 800949c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094aa:	45c1      	cmp	r9, r8
 80094ac:	f840 3b04 	str.w	r3, [r0], #4
 80094b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80094b4:	d2e8      	bcs.n	8009488 <quorem+0xb0>
 80094b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094be:	b922      	cbnz	r2, 80094ca <quorem+0xf2>
 80094c0:	3b04      	subs	r3, #4
 80094c2:	429d      	cmp	r5, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	d30a      	bcc.n	80094de <quorem+0x106>
 80094c8:	613c      	str	r4, [r7, #16]
 80094ca:	4630      	mov	r0, r6
 80094cc:	b003      	add	sp, #12
 80094ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	3b04      	subs	r3, #4
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	d1cc      	bne.n	8009474 <quorem+0x9c>
 80094da:	3c01      	subs	r4, #1
 80094dc:	e7c7      	b.n	800946e <quorem+0x96>
 80094de:	6812      	ldr	r2, [r2, #0]
 80094e0:	3b04      	subs	r3, #4
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	d1f0      	bne.n	80094c8 <quorem+0xf0>
 80094e6:	3c01      	subs	r4, #1
 80094e8:	e7eb      	b.n	80094c2 <quorem+0xea>
 80094ea:	2000      	movs	r0, #0
 80094ec:	e7ee      	b.n	80094cc <quorem+0xf4>
	...

080094f0 <_dtoa_r>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	ed2d 8b02 	vpush	{d8}
 80094f8:	ec57 6b10 	vmov	r6, r7, d0
 80094fc:	b095      	sub	sp, #84	; 0x54
 80094fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009500:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009504:	9105      	str	r1, [sp, #20]
 8009506:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800950a:	4604      	mov	r4, r0
 800950c:	9209      	str	r2, [sp, #36]	; 0x24
 800950e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009510:	b975      	cbnz	r5, 8009530 <_dtoa_r+0x40>
 8009512:	2010      	movs	r0, #16
 8009514:	f000 fddc 	bl	800a0d0 <malloc>
 8009518:	4602      	mov	r2, r0
 800951a:	6260      	str	r0, [r4, #36]	; 0x24
 800951c:	b920      	cbnz	r0, 8009528 <_dtoa_r+0x38>
 800951e:	4bb2      	ldr	r3, [pc, #712]	; (80097e8 <_dtoa_r+0x2f8>)
 8009520:	21ea      	movs	r1, #234	; 0xea
 8009522:	48b2      	ldr	r0, [pc, #712]	; (80097ec <_dtoa_r+0x2fc>)
 8009524:	f001 fb8e 	bl	800ac44 <__assert_func>
 8009528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800952c:	6005      	str	r5, [r0, #0]
 800952e:	60c5      	str	r5, [r0, #12]
 8009530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009532:	6819      	ldr	r1, [r3, #0]
 8009534:	b151      	cbz	r1, 800954c <_dtoa_r+0x5c>
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	604a      	str	r2, [r1, #4]
 800953a:	2301      	movs	r3, #1
 800953c:	4093      	lsls	r3, r2
 800953e:	608b      	str	r3, [r1, #8]
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fe1b 	bl	800a17c <_Bfree>
 8009546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	1e3b      	subs	r3, r7, #0
 800954e:	bfb9      	ittee	lt
 8009550:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009554:	9303      	strlt	r3, [sp, #12]
 8009556:	2300      	movge	r3, #0
 8009558:	f8c8 3000 	strge.w	r3, [r8]
 800955c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009560:	4ba3      	ldr	r3, [pc, #652]	; (80097f0 <_dtoa_r+0x300>)
 8009562:	bfbc      	itt	lt
 8009564:	2201      	movlt	r2, #1
 8009566:	f8c8 2000 	strlt.w	r2, [r8]
 800956a:	ea33 0309 	bics.w	r3, r3, r9
 800956e:	d11b      	bne.n	80095a8 <_dtoa_r+0xb8>
 8009570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009572:	f242 730f 	movw	r3, #9999	; 0x270f
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800957c:	4333      	orrs	r3, r6
 800957e:	f000 857a 	beq.w	800a076 <_dtoa_r+0xb86>
 8009582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009584:	b963      	cbnz	r3, 80095a0 <_dtoa_r+0xb0>
 8009586:	4b9b      	ldr	r3, [pc, #620]	; (80097f4 <_dtoa_r+0x304>)
 8009588:	e024      	b.n	80095d4 <_dtoa_r+0xe4>
 800958a:	4b9b      	ldr	r3, [pc, #620]	; (80097f8 <_dtoa_r+0x308>)
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	3308      	adds	r3, #8
 8009590:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	9800      	ldr	r0, [sp, #0]
 8009596:	b015      	add	sp, #84	; 0x54
 8009598:	ecbd 8b02 	vpop	{d8}
 800959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	4b94      	ldr	r3, [pc, #592]	; (80097f4 <_dtoa_r+0x304>)
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	3303      	adds	r3, #3
 80095a6:	e7f3      	b.n	8009590 <_dtoa_r+0xa0>
 80095a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095ac:	2200      	movs	r2, #0
 80095ae:	ec51 0b17 	vmov	r0, r1, d7
 80095b2:	2300      	movs	r3, #0
 80095b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80095b8:	f7f7 fa9e 	bl	8000af8 <__aeabi_dcmpeq>
 80095bc:	4680      	mov	r8, r0
 80095be:	b158      	cbz	r0, 80095d8 <_dtoa_r+0xe8>
 80095c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095c2:	2301      	movs	r3, #1
 80095c4:	6013      	str	r3, [r2, #0]
 80095c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8551 	beq.w	800a070 <_dtoa_r+0xb80>
 80095ce:	488b      	ldr	r0, [pc, #556]	; (80097fc <_dtoa_r+0x30c>)
 80095d0:	6018      	str	r0, [r3, #0]
 80095d2:	1e43      	subs	r3, r0, #1
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	e7dd      	b.n	8009594 <_dtoa_r+0xa4>
 80095d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80095dc:	aa12      	add	r2, sp, #72	; 0x48
 80095de:	a913      	add	r1, sp, #76	; 0x4c
 80095e0:	4620      	mov	r0, r4
 80095e2:	f001 f8ad 	bl	800a740 <__d2b>
 80095e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095ea:	4683      	mov	fp, r0
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	d07c      	beq.n	80096ea <_dtoa_r+0x1fa>
 80095f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80095f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80095fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800960a:	4b7d      	ldr	r3, [pc, #500]	; (8009800 <_dtoa_r+0x310>)
 800960c:	2200      	movs	r2, #0
 800960e:	4630      	mov	r0, r6
 8009610:	4639      	mov	r1, r7
 8009612:	f7f6 fe51 	bl	80002b8 <__aeabi_dsub>
 8009616:	a36e      	add	r3, pc, #440	; (adr r3, 80097d0 <_dtoa_r+0x2e0>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f7f7 f804 	bl	8000628 <__aeabi_dmul>
 8009620:	a36d      	add	r3, pc, #436	; (adr r3, 80097d8 <_dtoa_r+0x2e8>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 fe49 	bl	80002bc <__adddf3>
 800962a:	4606      	mov	r6, r0
 800962c:	4628      	mov	r0, r5
 800962e:	460f      	mov	r7, r1
 8009630:	f7f6 ff90 	bl	8000554 <__aeabi_i2d>
 8009634:	a36a      	add	r3, pc, #424	; (adr r3, 80097e0 <_dtoa_r+0x2f0>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f7f6 fff5 	bl	8000628 <__aeabi_dmul>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4630      	mov	r0, r6
 8009644:	4639      	mov	r1, r7
 8009646:	f7f6 fe39 	bl	80002bc <__adddf3>
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	f7f7 fa9b 	bl	8000b88 <__aeabi_d2iz>
 8009652:	2200      	movs	r2, #0
 8009654:	4682      	mov	sl, r0
 8009656:	2300      	movs	r3, #0
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f7 fa56 	bl	8000b0c <__aeabi_dcmplt>
 8009660:	b148      	cbz	r0, 8009676 <_dtoa_r+0x186>
 8009662:	4650      	mov	r0, sl
 8009664:	f7f6 ff76 	bl	8000554 <__aeabi_i2d>
 8009668:	4632      	mov	r2, r6
 800966a:	463b      	mov	r3, r7
 800966c:	f7f7 fa44 	bl	8000af8 <__aeabi_dcmpeq>
 8009670:	b908      	cbnz	r0, 8009676 <_dtoa_r+0x186>
 8009672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009676:	f1ba 0f16 	cmp.w	sl, #22
 800967a:	d854      	bhi.n	8009726 <_dtoa_r+0x236>
 800967c:	4b61      	ldr	r3, [pc, #388]	; (8009804 <_dtoa_r+0x314>)
 800967e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800968a:	f7f7 fa3f 	bl	8000b0c <__aeabi_dcmplt>
 800968e:	2800      	cmp	r0, #0
 8009690:	d04b      	beq.n	800972a <_dtoa_r+0x23a>
 8009692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009696:	2300      	movs	r3, #0
 8009698:	930e      	str	r3, [sp, #56]	; 0x38
 800969a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800969c:	1b5d      	subs	r5, r3, r5
 800969e:	1e6b      	subs	r3, r5, #1
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	bf43      	ittte	mi
 80096a4:	2300      	movmi	r3, #0
 80096a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80096aa:	9304      	strmi	r3, [sp, #16]
 80096ac:	f04f 0800 	movpl.w	r8, #0
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	db3b      	blt.n	800972e <_dtoa_r+0x23e>
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80096bc:	4453      	add	r3, sl
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	2300      	movs	r3, #0
 80096c2:	9306      	str	r3, [sp, #24]
 80096c4:	9b05      	ldr	r3, [sp, #20]
 80096c6:	2b09      	cmp	r3, #9
 80096c8:	d869      	bhi.n	800979e <_dtoa_r+0x2ae>
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	bfc4      	itt	gt
 80096ce:	3b04      	subgt	r3, #4
 80096d0:	9305      	strgt	r3, [sp, #20]
 80096d2:	9b05      	ldr	r3, [sp, #20]
 80096d4:	f1a3 0302 	sub.w	r3, r3, #2
 80096d8:	bfcc      	ite	gt
 80096da:	2500      	movgt	r5, #0
 80096dc:	2501      	movle	r5, #1
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d869      	bhi.n	80097b6 <_dtoa_r+0x2c6>
 80096e2:	e8df f003 	tbb	[pc, r3]
 80096e6:	4e2c      	.short	0x4e2c
 80096e8:	5a4c      	.short	0x5a4c
 80096ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80096ee:	441d      	add	r5, r3
 80096f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096f4:	2b20      	cmp	r3, #32
 80096f6:	bfc1      	itttt	gt
 80096f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009700:	fa09 f303 	lslgt.w	r3, r9, r3
 8009704:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009708:	bfda      	itte	le
 800970a:	f1c3 0320 	rsble	r3, r3, #32
 800970e:	fa06 f003 	lslle.w	r0, r6, r3
 8009712:	4318      	orrgt	r0, r3
 8009714:	f7f6 ff0e 	bl	8000534 <__aeabi_ui2d>
 8009718:	2301      	movs	r3, #1
 800971a:	4606      	mov	r6, r0
 800971c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009720:	3d01      	subs	r5, #1
 8009722:	9310      	str	r3, [sp, #64]	; 0x40
 8009724:	e771      	b.n	800960a <_dtoa_r+0x11a>
 8009726:	2301      	movs	r3, #1
 8009728:	e7b6      	b.n	8009698 <_dtoa_r+0x1a8>
 800972a:	900e      	str	r0, [sp, #56]	; 0x38
 800972c:	e7b5      	b.n	800969a <_dtoa_r+0x1aa>
 800972e:	f1ca 0300 	rsb	r3, sl, #0
 8009732:	9306      	str	r3, [sp, #24]
 8009734:	2300      	movs	r3, #0
 8009736:	eba8 080a 	sub.w	r8, r8, sl
 800973a:	930d      	str	r3, [sp, #52]	; 0x34
 800973c:	e7c2      	b.n	80096c4 <_dtoa_r+0x1d4>
 800973e:	2300      	movs	r3, #0
 8009740:	9308      	str	r3, [sp, #32]
 8009742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	dc39      	bgt.n	80097bc <_dtoa_r+0x2cc>
 8009748:	f04f 0901 	mov.w	r9, #1
 800974c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009750:	464b      	mov	r3, r9
 8009752:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009756:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009758:	2200      	movs	r2, #0
 800975a:	6042      	str	r2, [r0, #4]
 800975c:	2204      	movs	r2, #4
 800975e:	f102 0614 	add.w	r6, r2, #20
 8009762:	429e      	cmp	r6, r3
 8009764:	6841      	ldr	r1, [r0, #4]
 8009766:	d92f      	bls.n	80097c8 <_dtoa_r+0x2d8>
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fcc7 	bl	800a0fc <_Balloc>
 800976e:	9000      	str	r0, [sp, #0]
 8009770:	2800      	cmp	r0, #0
 8009772:	d14b      	bne.n	800980c <_dtoa_r+0x31c>
 8009774:	4b24      	ldr	r3, [pc, #144]	; (8009808 <_dtoa_r+0x318>)
 8009776:	4602      	mov	r2, r0
 8009778:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800977c:	e6d1      	b.n	8009522 <_dtoa_r+0x32>
 800977e:	2301      	movs	r3, #1
 8009780:	e7de      	b.n	8009740 <_dtoa_r+0x250>
 8009782:	2300      	movs	r3, #0
 8009784:	9308      	str	r3, [sp, #32]
 8009786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009788:	eb0a 0903 	add.w	r9, sl, r3
 800978c:	f109 0301 	add.w	r3, r9, #1
 8009790:	2b01      	cmp	r3, #1
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	bfb8      	it	lt
 8009796:	2301      	movlt	r3, #1
 8009798:	e7dd      	b.n	8009756 <_dtoa_r+0x266>
 800979a:	2301      	movs	r3, #1
 800979c:	e7f2      	b.n	8009784 <_dtoa_r+0x294>
 800979e:	2501      	movs	r5, #1
 80097a0:	2300      	movs	r3, #0
 80097a2:	9305      	str	r3, [sp, #20]
 80097a4:	9508      	str	r5, [sp, #32]
 80097a6:	f04f 39ff 	mov.w	r9, #4294967295
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80097b0:	2312      	movs	r3, #18
 80097b2:	9209      	str	r2, [sp, #36]	; 0x24
 80097b4:	e7cf      	b.n	8009756 <_dtoa_r+0x266>
 80097b6:	2301      	movs	r3, #1
 80097b8:	9308      	str	r3, [sp, #32]
 80097ba:	e7f4      	b.n	80097a6 <_dtoa_r+0x2b6>
 80097bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80097c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80097c4:	464b      	mov	r3, r9
 80097c6:	e7c6      	b.n	8009756 <_dtoa_r+0x266>
 80097c8:	3101      	adds	r1, #1
 80097ca:	6041      	str	r1, [r0, #4]
 80097cc:	0052      	lsls	r2, r2, #1
 80097ce:	e7c6      	b.n	800975e <_dtoa_r+0x26e>
 80097d0:	636f4361 	.word	0x636f4361
 80097d4:	3fd287a7 	.word	0x3fd287a7
 80097d8:	8b60c8b3 	.word	0x8b60c8b3
 80097dc:	3fc68a28 	.word	0x3fc68a28
 80097e0:	509f79fb 	.word	0x509f79fb
 80097e4:	3fd34413 	.word	0x3fd34413
 80097e8:	0800c9fd 	.word	0x0800c9fd
 80097ec:	0800ca14 	.word	0x0800ca14
 80097f0:	7ff00000 	.word	0x7ff00000
 80097f4:	0800c9f9 	.word	0x0800c9f9
 80097f8:	0800c9f0 	.word	0x0800c9f0
 80097fc:	0800c9cd 	.word	0x0800c9cd
 8009800:	3ff80000 	.word	0x3ff80000
 8009804:	0800cb10 	.word	0x0800cb10
 8009808:	0800ca73 	.word	0x0800ca73
 800980c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800980e:	9a00      	ldr	r2, [sp, #0]
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	2b0e      	cmp	r3, #14
 8009816:	f200 80ad 	bhi.w	8009974 <_dtoa_r+0x484>
 800981a:	2d00      	cmp	r5, #0
 800981c:	f000 80aa 	beq.w	8009974 <_dtoa_r+0x484>
 8009820:	f1ba 0f00 	cmp.w	sl, #0
 8009824:	dd36      	ble.n	8009894 <_dtoa_r+0x3a4>
 8009826:	4ac3      	ldr	r2, [pc, #780]	; (8009b34 <_dtoa_r+0x644>)
 8009828:	f00a 030f 	and.w	r3, sl, #15
 800982c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009830:	ed93 7b00 	vldr	d7, [r3]
 8009834:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009838:	ea4f 172a 	mov.w	r7, sl, asr #4
 800983c:	eeb0 8a47 	vmov.f32	s16, s14
 8009840:	eef0 8a67 	vmov.f32	s17, s15
 8009844:	d016      	beq.n	8009874 <_dtoa_r+0x384>
 8009846:	4bbc      	ldr	r3, [pc, #752]	; (8009b38 <_dtoa_r+0x648>)
 8009848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800984c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009850:	f7f7 f814 	bl	800087c <__aeabi_ddiv>
 8009854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009858:	f007 070f 	and.w	r7, r7, #15
 800985c:	2503      	movs	r5, #3
 800985e:	4eb6      	ldr	r6, [pc, #728]	; (8009b38 <_dtoa_r+0x648>)
 8009860:	b957      	cbnz	r7, 8009878 <_dtoa_r+0x388>
 8009862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009866:	ec53 2b18 	vmov	r2, r3, d8
 800986a:	f7f7 f807 	bl	800087c <__aeabi_ddiv>
 800986e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009872:	e029      	b.n	80098c8 <_dtoa_r+0x3d8>
 8009874:	2502      	movs	r5, #2
 8009876:	e7f2      	b.n	800985e <_dtoa_r+0x36e>
 8009878:	07f9      	lsls	r1, r7, #31
 800987a:	d508      	bpl.n	800988e <_dtoa_r+0x39e>
 800987c:	ec51 0b18 	vmov	r0, r1, d8
 8009880:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009884:	f7f6 fed0 	bl	8000628 <__aeabi_dmul>
 8009888:	ec41 0b18 	vmov	d8, r0, r1
 800988c:	3501      	adds	r5, #1
 800988e:	107f      	asrs	r7, r7, #1
 8009890:	3608      	adds	r6, #8
 8009892:	e7e5      	b.n	8009860 <_dtoa_r+0x370>
 8009894:	f000 80a6 	beq.w	80099e4 <_dtoa_r+0x4f4>
 8009898:	f1ca 0600 	rsb	r6, sl, #0
 800989c:	4ba5      	ldr	r3, [pc, #660]	; (8009b34 <_dtoa_r+0x644>)
 800989e:	4fa6      	ldr	r7, [pc, #664]	; (8009b38 <_dtoa_r+0x648>)
 80098a0:	f006 020f 	and.w	r2, r6, #15
 80098a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098b0:	f7f6 feba 	bl	8000628 <__aeabi_dmul>
 80098b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098b8:	1136      	asrs	r6, r6, #4
 80098ba:	2300      	movs	r3, #0
 80098bc:	2502      	movs	r5, #2
 80098be:	2e00      	cmp	r6, #0
 80098c0:	f040 8085 	bne.w	80099ce <_dtoa_r+0x4de>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1d2      	bne.n	800986e <_dtoa_r+0x37e>
 80098c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 808c 	beq.w	80099e8 <_dtoa_r+0x4f8>
 80098d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098d4:	4b99      	ldr	r3, [pc, #612]	; (8009b3c <_dtoa_r+0x64c>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	4630      	mov	r0, r6
 80098da:	4639      	mov	r1, r7
 80098dc:	f7f7 f916 	bl	8000b0c <__aeabi_dcmplt>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f000 8081 	beq.w	80099e8 <_dtoa_r+0x4f8>
 80098e6:	9b01      	ldr	r3, [sp, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d07d      	beq.n	80099e8 <_dtoa_r+0x4f8>
 80098ec:	f1b9 0f00 	cmp.w	r9, #0
 80098f0:	dd3c      	ble.n	800996c <_dtoa_r+0x47c>
 80098f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80098f6:	9307      	str	r3, [sp, #28]
 80098f8:	2200      	movs	r2, #0
 80098fa:	4b91      	ldr	r3, [pc, #580]	; (8009b40 <_dtoa_r+0x650>)
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f6 fe92 	bl	8000628 <__aeabi_dmul>
 8009904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009908:	3501      	adds	r5, #1
 800990a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800990e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009912:	4628      	mov	r0, r5
 8009914:	f7f6 fe1e 	bl	8000554 <__aeabi_i2d>
 8009918:	4632      	mov	r2, r6
 800991a:	463b      	mov	r3, r7
 800991c:	f7f6 fe84 	bl	8000628 <__aeabi_dmul>
 8009920:	4b88      	ldr	r3, [pc, #544]	; (8009b44 <_dtoa_r+0x654>)
 8009922:	2200      	movs	r2, #0
 8009924:	f7f6 fcca 	bl	80002bc <__adddf3>
 8009928:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800992c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009930:	9303      	str	r3, [sp, #12]
 8009932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009934:	2b00      	cmp	r3, #0
 8009936:	d15c      	bne.n	80099f2 <_dtoa_r+0x502>
 8009938:	4b83      	ldr	r3, [pc, #524]	; (8009b48 <_dtoa_r+0x658>)
 800993a:	2200      	movs	r2, #0
 800993c:	4630      	mov	r0, r6
 800993e:	4639      	mov	r1, r7
 8009940:	f7f6 fcba 	bl	80002b8 <__aeabi_dsub>
 8009944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009948:	4606      	mov	r6, r0
 800994a:	460f      	mov	r7, r1
 800994c:	f7f7 f8fc 	bl	8000b48 <__aeabi_dcmpgt>
 8009950:	2800      	cmp	r0, #0
 8009952:	f040 8296 	bne.w	8009e82 <_dtoa_r+0x992>
 8009956:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800995a:	4630      	mov	r0, r6
 800995c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009960:	4639      	mov	r1, r7
 8009962:	f7f7 f8d3 	bl	8000b0c <__aeabi_dcmplt>
 8009966:	2800      	cmp	r0, #0
 8009968:	f040 8288 	bne.w	8009e7c <_dtoa_r+0x98c>
 800996c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009970:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009976:	2b00      	cmp	r3, #0
 8009978:	f2c0 8158 	blt.w	8009c2c <_dtoa_r+0x73c>
 800997c:	f1ba 0f0e 	cmp.w	sl, #14
 8009980:	f300 8154 	bgt.w	8009c2c <_dtoa_r+0x73c>
 8009984:	4b6b      	ldr	r3, [pc, #428]	; (8009b34 <_dtoa_r+0x644>)
 8009986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800998a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	f280 80e3 	bge.w	8009b5c <_dtoa_r+0x66c>
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f300 80df 	bgt.w	8009b5c <_dtoa_r+0x66c>
 800999e:	f040 826d 	bne.w	8009e7c <_dtoa_r+0x98c>
 80099a2:	4b69      	ldr	r3, [pc, #420]	; (8009b48 <_dtoa_r+0x658>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	4640      	mov	r0, r8
 80099a8:	4649      	mov	r1, r9
 80099aa:	f7f6 fe3d 	bl	8000628 <__aeabi_dmul>
 80099ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b2:	f7f7 f8bf 	bl	8000b34 <__aeabi_dcmpge>
 80099b6:	9e01      	ldr	r6, [sp, #4]
 80099b8:	4637      	mov	r7, r6
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f040 8243 	bne.w	8009e46 <_dtoa_r+0x956>
 80099c0:	9d00      	ldr	r5, [sp, #0]
 80099c2:	2331      	movs	r3, #49	; 0x31
 80099c4:	f805 3b01 	strb.w	r3, [r5], #1
 80099c8:	f10a 0a01 	add.w	sl, sl, #1
 80099cc:	e23f      	b.n	8009e4e <_dtoa_r+0x95e>
 80099ce:	07f2      	lsls	r2, r6, #31
 80099d0:	d505      	bpl.n	80099de <_dtoa_r+0x4ee>
 80099d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d6:	f7f6 fe27 	bl	8000628 <__aeabi_dmul>
 80099da:	3501      	adds	r5, #1
 80099dc:	2301      	movs	r3, #1
 80099de:	1076      	asrs	r6, r6, #1
 80099e0:	3708      	adds	r7, #8
 80099e2:	e76c      	b.n	80098be <_dtoa_r+0x3ce>
 80099e4:	2502      	movs	r5, #2
 80099e6:	e76f      	b.n	80098c8 <_dtoa_r+0x3d8>
 80099e8:	9b01      	ldr	r3, [sp, #4]
 80099ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80099ee:	930c      	str	r3, [sp, #48]	; 0x30
 80099f0:	e78d      	b.n	800990e <_dtoa_r+0x41e>
 80099f2:	9900      	ldr	r1, [sp, #0]
 80099f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80099f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099f8:	4b4e      	ldr	r3, [pc, #312]	; (8009b34 <_dtoa_r+0x644>)
 80099fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099fe:	4401      	add	r1, r0
 8009a00:	9102      	str	r1, [sp, #8]
 8009a02:	9908      	ldr	r1, [sp, #32]
 8009a04:	eeb0 8a47 	vmov.f32	s16, s14
 8009a08:	eef0 8a67 	vmov.f32	s17, s15
 8009a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a14:	2900      	cmp	r1, #0
 8009a16:	d045      	beq.n	8009aa4 <_dtoa_r+0x5b4>
 8009a18:	494c      	ldr	r1, [pc, #304]	; (8009b4c <_dtoa_r+0x65c>)
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	f7f6 ff2e 	bl	800087c <__aeabi_ddiv>
 8009a20:	ec53 2b18 	vmov	r2, r3, d8
 8009a24:	f7f6 fc48 	bl	80002b8 <__aeabi_dsub>
 8009a28:	9d00      	ldr	r5, [sp, #0]
 8009a2a:	ec41 0b18 	vmov	d8, r0, r1
 8009a2e:	4639      	mov	r1, r7
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7f7 f8a9 	bl	8000b88 <__aeabi_d2iz>
 8009a36:	900c      	str	r0, [sp, #48]	; 0x30
 8009a38:	f7f6 fd8c 	bl	8000554 <__aeabi_i2d>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4630      	mov	r0, r6
 8009a42:	4639      	mov	r1, r7
 8009a44:	f7f6 fc38 	bl	80002b8 <__aeabi_dsub>
 8009a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a4a:	3330      	adds	r3, #48	; 0x30
 8009a4c:	f805 3b01 	strb.w	r3, [r5], #1
 8009a50:	ec53 2b18 	vmov	r2, r3, d8
 8009a54:	4606      	mov	r6, r0
 8009a56:	460f      	mov	r7, r1
 8009a58:	f7f7 f858 	bl	8000b0c <__aeabi_dcmplt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d165      	bne.n	8009b2c <_dtoa_r+0x63c>
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	4935      	ldr	r1, [pc, #212]	; (8009b3c <_dtoa_r+0x64c>)
 8009a66:	2000      	movs	r0, #0
 8009a68:	f7f6 fc26 	bl	80002b8 <__aeabi_dsub>
 8009a6c:	ec53 2b18 	vmov	r2, r3, d8
 8009a70:	f7f7 f84c 	bl	8000b0c <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f040 80b9 	bne.w	8009bec <_dtoa_r+0x6fc>
 8009a7a:	9b02      	ldr	r3, [sp, #8]
 8009a7c:	429d      	cmp	r5, r3
 8009a7e:	f43f af75 	beq.w	800996c <_dtoa_r+0x47c>
 8009a82:	4b2f      	ldr	r3, [pc, #188]	; (8009b40 <_dtoa_r+0x650>)
 8009a84:	ec51 0b18 	vmov	r0, r1, d8
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f7f6 fdcd 	bl	8000628 <__aeabi_dmul>
 8009a8e:	4b2c      	ldr	r3, [pc, #176]	; (8009b40 <_dtoa_r+0x650>)
 8009a90:	ec41 0b18 	vmov	d8, r0, r1
 8009a94:	2200      	movs	r2, #0
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f6 fdc5 	bl	8000628 <__aeabi_dmul>
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	460f      	mov	r7, r1
 8009aa2:	e7c4      	b.n	8009a2e <_dtoa_r+0x53e>
 8009aa4:	ec51 0b17 	vmov	r0, r1, d7
 8009aa8:	f7f6 fdbe 	bl	8000628 <__aeabi_dmul>
 8009aac:	9b02      	ldr	r3, [sp, #8]
 8009aae:	9d00      	ldr	r5, [sp, #0]
 8009ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ab2:	ec41 0b18 	vmov	d8, r0, r1
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f7f7 f865 	bl	8000b88 <__aeabi_d2iz>
 8009abe:	9011      	str	r0, [sp, #68]	; 0x44
 8009ac0:	f7f6 fd48 	bl	8000554 <__aeabi_i2d>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fbf4 	bl	80002b8 <__aeabi_dsub>
 8009ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ad2:	3330      	adds	r3, #48	; 0x30
 8009ad4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ad8:	9b02      	ldr	r3, [sp, #8]
 8009ada:	429d      	cmp	r5, r3
 8009adc:	4606      	mov	r6, r0
 8009ade:	460f      	mov	r7, r1
 8009ae0:	f04f 0200 	mov.w	r2, #0
 8009ae4:	d134      	bne.n	8009b50 <_dtoa_r+0x660>
 8009ae6:	4b19      	ldr	r3, [pc, #100]	; (8009b4c <_dtoa_r+0x65c>)
 8009ae8:	ec51 0b18 	vmov	r0, r1, d8
 8009aec:	f7f6 fbe6 	bl	80002bc <__adddf3>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f7 f826 	bl	8000b48 <__aeabi_dcmpgt>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d175      	bne.n	8009bec <_dtoa_r+0x6fc>
 8009b00:	ec53 2b18 	vmov	r2, r3, d8
 8009b04:	4911      	ldr	r1, [pc, #68]	; (8009b4c <_dtoa_r+0x65c>)
 8009b06:	2000      	movs	r0, #0
 8009b08:	f7f6 fbd6 	bl	80002b8 <__aeabi_dsub>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4630      	mov	r0, r6
 8009b12:	4639      	mov	r1, r7
 8009b14:	f7f6 fffa 	bl	8000b0c <__aeabi_dcmplt>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	f43f af27 	beq.w	800996c <_dtoa_r+0x47c>
 8009b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b20:	1e6b      	subs	r3, r5, #1
 8009b22:	930c      	str	r3, [sp, #48]	; 0x30
 8009b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b28:	2b30      	cmp	r3, #48	; 0x30
 8009b2a:	d0f8      	beq.n	8009b1e <_dtoa_r+0x62e>
 8009b2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b30:	e04a      	b.n	8009bc8 <_dtoa_r+0x6d8>
 8009b32:	bf00      	nop
 8009b34:	0800cb10 	.word	0x0800cb10
 8009b38:	0800cae8 	.word	0x0800cae8
 8009b3c:	3ff00000 	.word	0x3ff00000
 8009b40:	40240000 	.word	0x40240000
 8009b44:	401c0000 	.word	0x401c0000
 8009b48:	40140000 	.word	0x40140000
 8009b4c:	3fe00000 	.word	0x3fe00000
 8009b50:	4baf      	ldr	r3, [pc, #700]	; (8009e10 <_dtoa_r+0x920>)
 8009b52:	f7f6 fd69 	bl	8000628 <__aeabi_dmul>
 8009b56:	4606      	mov	r6, r0
 8009b58:	460f      	mov	r7, r1
 8009b5a:	e7ac      	b.n	8009ab6 <_dtoa_r+0x5c6>
 8009b5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b60:	9d00      	ldr	r5, [sp, #0]
 8009b62:	4642      	mov	r2, r8
 8009b64:	464b      	mov	r3, r9
 8009b66:	4630      	mov	r0, r6
 8009b68:	4639      	mov	r1, r7
 8009b6a:	f7f6 fe87 	bl	800087c <__aeabi_ddiv>
 8009b6e:	f7f7 f80b 	bl	8000b88 <__aeabi_d2iz>
 8009b72:	9002      	str	r0, [sp, #8]
 8009b74:	f7f6 fcee 	bl	8000554 <__aeabi_i2d>
 8009b78:	4642      	mov	r2, r8
 8009b7a:	464b      	mov	r3, r9
 8009b7c:	f7f6 fd54 	bl	8000628 <__aeabi_dmul>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4630      	mov	r0, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	f7f6 fb96 	bl	80002b8 <__aeabi_dsub>
 8009b8c:	9e02      	ldr	r6, [sp, #8]
 8009b8e:	9f01      	ldr	r7, [sp, #4]
 8009b90:	3630      	adds	r6, #48	; 0x30
 8009b92:	f805 6b01 	strb.w	r6, [r5], #1
 8009b96:	9e00      	ldr	r6, [sp, #0]
 8009b98:	1bae      	subs	r6, r5, r6
 8009b9a:	42b7      	cmp	r7, r6
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	d137      	bne.n	8009c12 <_dtoa_r+0x722>
 8009ba2:	f7f6 fb8b 	bl	80002bc <__adddf3>
 8009ba6:	4642      	mov	r2, r8
 8009ba8:	464b      	mov	r3, r9
 8009baa:	4606      	mov	r6, r0
 8009bac:	460f      	mov	r7, r1
 8009bae:	f7f6 ffcb 	bl	8000b48 <__aeabi_dcmpgt>
 8009bb2:	b9c8      	cbnz	r0, 8009be8 <_dtoa_r+0x6f8>
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	4630      	mov	r0, r6
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f6 ff9c 	bl	8000af8 <__aeabi_dcmpeq>
 8009bc0:	b110      	cbz	r0, 8009bc8 <_dtoa_r+0x6d8>
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	07d9      	lsls	r1, r3, #31
 8009bc6:	d40f      	bmi.n	8009be8 <_dtoa_r+0x6f8>
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4659      	mov	r1, fp
 8009bcc:	f000 fad6 	bl	800a17c <_Bfree>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	702b      	strb	r3, [r5, #0]
 8009bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bd6:	f10a 0001 	add.w	r0, sl, #1
 8009bda:	6018      	str	r0, [r3, #0]
 8009bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f43f acd8 	beq.w	8009594 <_dtoa_r+0xa4>
 8009be4:	601d      	str	r5, [r3, #0]
 8009be6:	e4d5      	b.n	8009594 <_dtoa_r+0xa4>
 8009be8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009bec:	462b      	mov	r3, r5
 8009bee:	461d      	mov	r5, r3
 8009bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bf4:	2a39      	cmp	r2, #57	; 0x39
 8009bf6:	d108      	bne.n	8009c0a <_dtoa_r+0x71a>
 8009bf8:	9a00      	ldr	r2, [sp, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d1f7      	bne.n	8009bee <_dtoa_r+0x6fe>
 8009bfe:	9a07      	ldr	r2, [sp, #28]
 8009c00:	9900      	ldr	r1, [sp, #0]
 8009c02:	3201      	adds	r2, #1
 8009c04:	9207      	str	r2, [sp, #28]
 8009c06:	2230      	movs	r2, #48	; 0x30
 8009c08:	700a      	strb	r2, [r1, #0]
 8009c0a:	781a      	ldrb	r2, [r3, #0]
 8009c0c:	3201      	adds	r2, #1
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	e78c      	b.n	8009b2c <_dtoa_r+0x63c>
 8009c12:	4b7f      	ldr	r3, [pc, #508]	; (8009e10 <_dtoa_r+0x920>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	f7f6 fd07 	bl	8000628 <__aeabi_dmul>
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460f      	mov	r7, r1
 8009c22:	f7f6 ff69 	bl	8000af8 <__aeabi_dcmpeq>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d09b      	beq.n	8009b62 <_dtoa_r+0x672>
 8009c2a:	e7cd      	b.n	8009bc8 <_dtoa_r+0x6d8>
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	2a00      	cmp	r2, #0
 8009c30:	f000 80c4 	beq.w	8009dbc <_dtoa_r+0x8cc>
 8009c34:	9a05      	ldr	r2, [sp, #20]
 8009c36:	2a01      	cmp	r2, #1
 8009c38:	f300 80a8 	bgt.w	8009d8c <_dtoa_r+0x89c>
 8009c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	f000 80a0 	beq.w	8009d84 <_dtoa_r+0x894>
 8009c44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c48:	9e06      	ldr	r6, [sp, #24]
 8009c4a:	4645      	mov	r5, r8
 8009c4c:	9a04      	ldr	r2, [sp, #16]
 8009c4e:	2101      	movs	r1, #1
 8009c50:	441a      	add	r2, r3
 8009c52:	4620      	mov	r0, r4
 8009c54:	4498      	add	r8, r3
 8009c56:	9204      	str	r2, [sp, #16]
 8009c58:	f000 fb4c 	bl	800a2f4 <__i2b>
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	2d00      	cmp	r5, #0
 8009c60:	dd0b      	ble.n	8009c7a <_dtoa_r+0x78a>
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dd08      	ble.n	8009c7a <_dtoa_r+0x78a>
 8009c68:	42ab      	cmp	r3, r5
 8009c6a:	9a04      	ldr	r2, [sp, #16]
 8009c6c:	bfa8      	it	ge
 8009c6e:	462b      	movge	r3, r5
 8009c70:	eba8 0803 	sub.w	r8, r8, r3
 8009c74:	1aed      	subs	r5, r5, r3
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	9304      	str	r3, [sp, #16]
 8009c7a:	9b06      	ldr	r3, [sp, #24]
 8009c7c:	b1fb      	cbz	r3, 8009cbe <_dtoa_r+0x7ce>
 8009c7e:	9b08      	ldr	r3, [sp, #32]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 809f 	beq.w	8009dc4 <_dtoa_r+0x8d4>
 8009c86:	2e00      	cmp	r6, #0
 8009c88:	dd11      	ble.n	8009cae <_dtoa_r+0x7be>
 8009c8a:	4639      	mov	r1, r7
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 fbec 	bl	800a46c <__pow5mult>
 8009c94:	465a      	mov	r2, fp
 8009c96:	4601      	mov	r1, r0
 8009c98:	4607      	mov	r7, r0
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fb40 	bl	800a320 <__multiply>
 8009ca0:	4659      	mov	r1, fp
 8009ca2:	9007      	str	r0, [sp, #28]
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f000 fa69 	bl	800a17c <_Bfree>
 8009caa:	9b07      	ldr	r3, [sp, #28]
 8009cac:	469b      	mov	fp, r3
 8009cae:	9b06      	ldr	r3, [sp, #24]
 8009cb0:	1b9a      	subs	r2, r3, r6
 8009cb2:	d004      	beq.n	8009cbe <_dtoa_r+0x7ce>
 8009cb4:	4659      	mov	r1, fp
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 fbd8 	bl	800a46c <__pow5mult>
 8009cbc:	4683      	mov	fp, r0
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 fb17 	bl	800a2f4 <__i2b>
 8009cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	4606      	mov	r6, r0
 8009ccc:	dd7c      	ble.n	8009dc8 <_dtoa_r+0x8d8>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fbca 	bl	800a46c <__pow5mult>
 8009cd8:	9b05      	ldr	r3, [sp, #20]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	4606      	mov	r6, r0
 8009cde:	dd76      	ble.n	8009dce <_dtoa_r+0x8de>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9306      	str	r3, [sp, #24]
 8009ce4:	6933      	ldr	r3, [r6, #16]
 8009ce6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009cea:	6918      	ldr	r0, [r3, #16]
 8009cec:	f000 fab2 	bl	800a254 <__hi0bits>
 8009cf0:	f1c0 0020 	rsb	r0, r0, #32
 8009cf4:	9b04      	ldr	r3, [sp, #16]
 8009cf6:	4418      	add	r0, r3
 8009cf8:	f010 001f 	ands.w	r0, r0, #31
 8009cfc:	f000 8086 	beq.w	8009e0c <_dtoa_r+0x91c>
 8009d00:	f1c0 0320 	rsb	r3, r0, #32
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	dd7f      	ble.n	8009e08 <_dtoa_r+0x918>
 8009d08:	f1c0 001c 	rsb	r0, r0, #28
 8009d0c:	9b04      	ldr	r3, [sp, #16]
 8009d0e:	4403      	add	r3, r0
 8009d10:	4480      	add	r8, r0
 8009d12:	4405      	add	r5, r0
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	f1b8 0f00 	cmp.w	r8, #0
 8009d1a:	dd05      	ble.n	8009d28 <_dtoa_r+0x838>
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	4642      	mov	r2, r8
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fbfd 	bl	800a520 <__lshift>
 8009d26:	4683      	mov	fp, r0
 8009d28:	9b04      	ldr	r3, [sp, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dd05      	ble.n	8009d3a <_dtoa_r+0x84a>
 8009d2e:	4631      	mov	r1, r6
 8009d30:	461a      	mov	r2, r3
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fbf4 	bl	800a520 <__lshift>
 8009d38:	4606      	mov	r6, r0
 8009d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d069      	beq.n	8009e14 <_dtoa_r+0x924>
 8009d40:	4631      	mov	r1, r6
 8009d42:	4658      	mov	r0, fp
 8009d44:	f000 fc58 	bl	800a5f8 <__mcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	da63      	bge.n	8009e14 <_dtoa_r+0x924>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4659      	mov	r1, fp
 8009d50:	220a      	movs	r2, #10
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fa34 	bl	800a1c0 <__multadd>
 8009d58:	9b08      	ldr	r3, [sp, #32]
 8009d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d5e:	4683      	mov	fp, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 818f 	beq.w	800a084 <_dtoa_r+0xb94>
 8009d66:	4639      	mov	r1, r7
 8009d68:	2300      	movs	r3, #0
 8009d6a:	220a      	movs	r2, #10
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 fa27 	bl	800a1c0 <__multadd>
 8009d72:	f1b9 0f00 	cmp.w	r9, #0
 8009d76:	4607      	mov	r7, r0
 8009d78:	f300 808e 	bgt.w	8009e98 <_dtoa_r+0x9a8>
 8009d7c:	9b05      	ldr	r3, [sp, #20]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	dc50      	bgt.n	8009e24 <_dtoa_r+0x934>
 8009d82:	e089      	b.n	8009e98 <_dtoa_r+0x9a8>
 8009d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d8a:	e75d      	b.n	8009c48 <_dtoa_r+0x758>
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	1e5e      	subs	r6, r3, #1
 8009d90:	9b06      	ldr	r3, [sp, #24]
 8009d92:	42b3      	cmp	r3, r6
 8009d94:	bfbf      	itttt	lt
 8009d96:	9b06      	ldrlt	r3, [sp, #24]
 8009d98:	9606      	strlt	r6, [sp, #24]
 8009d9a:	1af2      	sublt	r2, r6, r3
 8009d9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009d9e:	bfb6      	itet	lt
 8009da0:	189b      	addlt	r3, r3, r2
 8009da2:	1b9e      	subge	r6, r3, r6
 8009da4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	bfb8      	it	lt
 8009daa:	2600      	movlt	r6, #0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfb5      	itete	lt
 8009db0:	eba8 0503 	sublt.w	r5, r8, r3
 8009db4:	9b01      	ldrge	r3, [sp, #4]
 8009db6:	2300      	movlt	r3, #0
 8009db8:	4645      	movge	r5, r8
 8009dba:	e747      	b.n	8009c4c <_dtoa_r+0x75c>
 8009dbc:	9e06      	ldr	r6, [sp, #24]
 8009dbe:	9f08      	ldr	r7, [sp, #32]
 8009dc0:	4645      	mov	r5, r8
 8009dc2:	e74c      	b.n	8009c5e <_dtoa_r+0x76e>
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	e775      	b.n	8009cb4 <_dtoa_r+0x7c4>
 8009dc8:	9b05      	ldr	r3, [sp, #20]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	dc18      	bgt.n	8009e00 <_dtoa_r+0x910>
 8009dce:	9b02      	ldr	r3, [sp, #8]
 8009dd0:	b9b3      	cbnz	r3, 8009e00 <_dtoa_r+0x910>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dd8:	b9a3      	cbnz	r3, 8009e04 <_dtoa_r+0x914>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	0d1b      	lsrs	r3, r3, #20
 8009de2:	051b      	lsls	r3, r3, #20
 8009de4:	b12b      	cbz	r3, 8009df2 <_dtoa_r+0x902>
 8009de6:	9b04      	ldr	r3, [sp, #16]
 8009de8:	3301      	adds	r3, #1
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	f108 0801 	add.w	r8, r8, #1
 8009df0:	2301      	movs	r3, #1
 8009df2:	9306      	str	r3, [sp, #24]
 8009df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f47f af74 	bne.w	8009ce4 <_dtoa_r+0x7f4>
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	e779      	b.n	8009cf4 <_dtoa_r+0x804>
 8009e00:	2300      	movs	r3, #0
 8009e02:	e7f6      	b.n	8009df2 <_dtoa_r+0x902>
 8009e04:	9b02      	ldr	r3, [sp, #8]
 8009e06:	e7f4      	b.n	8009df2 <_dtoa_r+0x902>
 8009e08:	d085      	beq.n	8009d16 <_dtoa_r+0x826>
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	301c      	adds	r0, #28
 8009e0e:	e77d      	b.n	8009d0c <_dtoa_r+0x81c>
 8009e10:	40240000 	.word	0x40240000
 8009e14:	9b01      	ldr	r3, [sp, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	dc38      	bgt.n	8009e8c <_dtoa_r+0x99c>
 8009e1a:	9b05      	ldr	r3, [sp, #20]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	dd35      	ble.n	8009e8c <_dtoa_r+0x99c>
 8009e20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e24:	f1b9 0f00 	cmp.w	r9, #0
 8009e28:	d10d      	bne.n	8009e46 <_dtoa_r+0x956>
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	2205      	movs	r2, #5
 8009e30:	4620      	mov	r0, r4
 8009e32:	f000 f9c5 	bl	800a1c0 <__multadd>
 8009e36:	4601      	mov	r1, r0
 8009e38:	4606      	mov	r6, r0
 8009e3a:	4658      	mov	r0, fp
 8009e3c:	f000 fbdc 	bl	800a5f8 <__mcmp>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f73f adbd 	bgt.w	80099c0 <_dtoa_r+0x4d0>
 8009e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e48:	9d00      	ldr	r5, [sp, #0]
 8009e4a:	ea6f 0a03 	mvn.w	sl, r3
 8009e4e:	f04f 0800 	mov.w	r8, #0
 8009e52:	4631      	mov	r1, r6
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 f991 	bl	800a17c <_Bfree>
 8009e5a:	2f00      	cmp	r7, #0
 8009e5c:	f43f aeb4 	beq.w	8009bc8 <_dtoa_r+0x6d8>
 8009e60:	f1b8 0f00 	cmp.w	r8, #0
 8009e64:	d005      	beq.n	8009e72 <_dtoa_r+0x982>
 8009e66:	45b8      	cmp	r8, r7
 8009e68:	d003      	beq.n	8009e72 <_dtoa_r+0x982>
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 f985 	bl	800a17c <_Bfree>
 8009e72:	4639      	mov	r1, r7
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 f981 	bl	800a17c <_Bfree>
 8009e7a:	e6a5      	b.n	8009bc8 <_dtoa_r+0x6d8>
 8009e7c:	2600      	movs	r6, #0
 8009e7e:	4637      	mov	r7, r6
 8009e80:	e7e1      	b.n	8009e46 <_dtoa_r+0x956>
 8009e82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009e84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e88:	4637      	mov	r7, r6
 8009e8a:	e599      	b.n	80099c0 <_dtoa_r+0x4d0>
 8009e8c:	9b08      	ldr	r3, [sp, #32]
 8009e8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 80fd 	beq.w	800a092 <_dtoa_r+0xba2>
 8009e98:	2d00      	cmp	r5, #0
 8009e9a:	dd05      	ble.n	8009ea8 <_dtoa_r+0x9b8>
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fb3d 	bl	800a520 <__lshift>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	9b06      	ldr	r3, [sp, #24]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d05c      	beq.n	8009f68 <_dtoa_r+0xa78>
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 f923 	bl	800a0fc <_Balloc>
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	b928      	cbnz	r0, 8009ec6 <_dtoa_r+0x9d6>
 8009eba:	4b80      	ldr	r3, [pc, #512]	; (800a0bc <_dtoa_r+0xbcc>)
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ec2:	f7ff bb2e 	b.w	8009522 <_dtoa_r+0x32>
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	3202      	adds	r2, #2
 8009eca:	0092      	lsls	r2, r2, #2
 8009ecc:	f107 010c 	add.w	r1, r7, #12
 8009ed0:	300c      	adds	r0, #12
 8009ed2:	f000 f905 	bl	800a0e0 <memcpy>
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 fb20 	bl	800a520 <__lshift>
 8009ee0:	9b00      	ldr	r3, [sp, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	9b00      	ldr	r3, [sp, #0]
 8009ee8:	444b      	add	r3, r9
 8009eea:	9307      	str	r3, [sp, #28]
 8009eec:	9b02      	ldr	r3, [sp, #8]
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	46b8      	mov	r8, r7
 8009ef4:	9306      	str	r3, [sp, #24]
 8009ef6:	4607      	mov	r7, r0
 8009ef8:	9b01      	ldr	r3, [sp, #4]
 8009efa:	4631      	mov	r1, r6
 8009efc:	3b01      	subs	r3, #1
 8009efe:	4658      	mov	r0, fp
 8009f00:	9302      	str	r3, [sp, #8]
 8009f02:	f7ff fa69 	bl	80093d8 <quorem>
 8009f06:	4603      	mov	r3, r0
 8009f08:	3330      	adds	r3, #48	; 0x30
 8009f0a:	9004      	str	r0, [sp, #16]
 8009f0c:	4641      	mov	r1, r8
 8009f0e:	4658      	mov	r0, fp
 8009f10:	9308      	str	r3, [sp, #32]
 8009f12:	f000 fb71 	bl	800a5f8 <__mcmp>
 8009f16:	463a      	mov	r2, r7
 8009f18:	4681      	mov	r9, r0
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 fb87 	bl	800a630 <__mdiff>
 8009f22:	68c2      	ldr	r2, [r0, #12]
 8009f24:	9b08      	ldr	r3, [sp, #32]
 8009f26:	4605      	mov	r5, r0
 8009f28:	bb02      	cbnz	r2, 8009f6c <_dtoa_r+0xa7c>
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	4658      	mov	r0, fp
 8009f2e:	f000 fb63 	bl	800a5f8 <__mcmp>
 8009f32:	9b08      	ldr	r3, [sp, #32]
 8009f34:	4602      	mov	r2, r0
 8009f36:	4629      	mov	r1, r5
 8009f38:	4620      	mov	r0, r4
 8009f3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009f3e:	f000 f91d 	bl	800a17c <_Bfree>
 8009f42:	9b05      	ldr	r3, [sp, #20]
 8009f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f46:	9d01      	ldr	r5, [sp, #4]
 8009f48:	ea43 0102 	orr.w	r1, r3, r2
 8009f4c:	9b06      	ldr	r3, [sp, #24]
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	9b08      	ldr	r3, [sp, #32]
 8009f52:	d10d      	bne.n	8009f70 <_dtoa_r+0xa80>
 8009f54:	2b39      	cmp	r3, #57	; 0x39
 8009f56:	d029      	beq.n	8009fac <_dtoa_r+0xabc>
 8009f58:	f1b9 0f00 	cmp.w	r9, #0
 8009f5c:	dd01      	ble.n	8009f62 <_dtoa_r+0xa72>
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	3331      	adds	r3, #49	; 0x31
 8009f62:	9a02      	ldr	r2, [sp, #8]
 8009f64:	7013      	strb	r3, [r2, #0]
 8009f66:	e774      	b.n	8009e52 <_dtoa_r+0x962>
 8009f68:	4638      	mov	r0, r7
 8009f6a:	e7b9      	b.n	8009ee0 <_dtoa_r+0x9f0>
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	e7e2      	b.n	8009f36 <_dtoa_r+0xa46>
 8009f70:	f1b9 0f00 	cmp.w	r9, #0
 8009f74:	db06      	blt.n	8009f84 <_dtoa_r+0xa94>
 8009f76:	9905      	ldr	r1, [sp, #20]
 8009f78:	ea41 0909 	orr.w	r9, r1, r9
 8009f7c:	9906      	ldr	r1, [sp, #24]
 8009f7e:	ea59 0101 	orrs.w	r1, r9, r1
 8009f82:	d120      	bne.n	8009fc6 <_dtoa_r+0xad6>
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	ddec      	ble.n	8009f62 <_dtoa_r+0xa72>
 8009f88:	4659      	mov	r1, fp
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	f000 fac6 	bl	800a520 <__lshift>
 8009f94:	4631      	mov	r1, r6
 8009f96:	4683      	mov	fp, r0
 8009f98:	f000 fb2e 	bl	800a5f8 <__mcmp>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	9b01      	ldr	r3, [sp, #4]
 8009fa0:	dc02      	bgt.n	8009fa8 <_dtoa_r+0xab8>
 8009fa2:	d1de      	bne.n	8009f62 <_dtoa_r+0xa72>
 8009fa4:	07da      	lsls	r2, r3, #31
 8009fa6:	d5dc      	bpl.n	8009f62 <_dtoa_r+0xa72>
 8009fa8:	2b39      	cmp	r3, #57	; 0x39
 8009faa:	d1d8      	bne.n	8009f5e <_dtoa_r+0xa6e>
 8009fac:	9a02      	ldr	r2, [sp, #8]
 8009fae:	2339      	movs	r3, #57	; 0x39
 8009fb0:	7013      	strb	r3, [r2, #0]
 8009fb2:	462b      	mov	r3, r5
 8009fb4:	461d      	mov	r5, r3
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fbc:	2a39      	cmp	r2, #57	; 0x39
 8009fbe:	d050      	beq.n	800a062 <_dtoa_r+0xb72>
 8009fc0:	3201      	adds	r2, #1
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	e745      	b.n	8009e52 <_dtoa_r+0x962>
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	dd03      	ble.n	8009fd2 <_dtoa_r+0xae2>
 8009fca:	2b39      	cmp	r3, #57	; 0x39
 8009fcc:	d0ee      	beq.n	8009fac <_dtoa_r+0xabc>
 8009fce:	3301      	adds	r3, #1
 8009fd0:	e7c7      	b.n	8009f62 <_dtoa_r+0xa72>
 8009fd2:	9a01      	ldr	r2, [sp, #4]
 8009fd4:	9907      	ldr	r1, [sp, #28]
 8009fd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009fda:	428a      	cmp	r2, r1
 8009fdc:	d02a      	beq.n	800a034 <_dtoa_r+0xb44>
 8009fde:	4659      	mov	r1, fp
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	220a      	movs	r2, #10
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 f8eb 	bl	800a1c0 <__multadd>
 8009fea:	45b8      	cmp	r8, r7
 8009fec:	4683      	mov	fp, r0
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	f04f 020a 	mov.w	r2, #10
 8009ff6:	4641      	mov	r1, r8
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	d107      	bne.n	800a00c <_dtoa_r+0xb1c>
 8009ffc:	f000 f8e0 	bl	800a1c0 <__multadd>
 800a000:	4680      	mov	r8, r0
 800a002:	4607      	mov	r7, r0
 800a004:	9b01      	ldr	r3, [sp, #4]
 800a006:	3301      	adds	r3, #1
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	e775      	b.n	8009ef8 <_dtoa_r+0xa08>
 800a00c:	f000 f8d8 	bl	800a1c0 <__multadd>
 800a010:	4639      	mov	r1, r7
 800a012:	4680      	mov	r8, r0
 800a014:	2300      	movs	r3, #0
 800a016:	220a      	movs	r2, #10
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 f8d1 	bl	800a1c0 <__multadd>
 800a01e:	4607      	mov	r7, r0
 800a020:	e7f0      	b.n	800a004 <_dtoa_r+0xb14>
 800a022:	f1b9 0f00 	cmp.w	r9, #0
 800a026:	9a00      	ldr	r2, [sp, #0]
 800a028:	bfcc      	ite	gt
 800a02a:	464d      	movgt	r5, r9
 800a02c:	2501      	movle	r5, #1
 800a02e:	4415      	add	r5, r2
 800a030:	f04f 0800 	mov.w	r8, #0
 800a034:	4659      	mov	r1, fp
 800a036:	2201      	movs	r2, #1
 800a038:	4620      	mov	r0, r4
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	f000 fa70 	bl	800a520 <__lshift>
 800a040:	4631      	mov	r1, r6
 800a042:	4683      	mov	fp, r0
 800a044:	f000 fad8 	bl	800a5f8 <__mcmp>
 800a048:	2800      	cmp	r0, #0
 800a04a:	dcb2      	bgt.n	8009fb2 <_dtoa_r+0xac2>
 800a04c:	d102      	bne.n	800a054 <_dtoa_r+0xb64>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	07db      	lsls	r3, r3, #31
 800a052:	d4ae      	bmi.n	8009fb2 <_dtoa_r+0xac2>
 800a054:	462b      	mov	r3, r5
 800a056:	461d      	mov	r5, r3
 800a058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a05c:	2a30      	cmp	r2, #48	; 0x30
 800a05e:	d0fa      	beq.n	800a056 <_dtoa_r+0xb66>
 800a060:	e6f7      	b.n	8009e52 <_dtoa_r+0x962>
 800a062:	9a00      	ldr	r2, [sp, #0]
 800a064:	429a      	cmp	r2, r3
 800a066:	d1a5      	bne.n	8009fb4 <_dtoa_r+0xac4>
 800a068:	f10a 0a01 	add.w	sl, sl, #1
 800a06c:	2331      	movs	r3, #49	; 0x31
 800a06e:	e779      	b.n	8009f64 <_dtoa_r+0xa74>
 800a070:	4b13      	ldr	r3, [pc, #76]	; (800a0c0 <_dtoa_r+0xbd0>)
 800a072:	f7ff baaf 	b.w	80095d4 <_dtoa_r+0xe4>
 800a076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f47f aa86 	bne.w	800958a <_dtoa_r+0x9a>
 800a07e:	4b11      	ldr	r3, [pc, #68]	; (800a0c4 <_dtoa_r+0xbd4>)
 800a080:	f7ff baa8 	b.w	80095d4 <_dtoa_r+0xe4>
 800a084:	f1b9 0f00 	cmp.w	r9, #0
 800a088:	dc03      	bgt.n	800a092 <_dtoa_r+0xba2>
 800a08a:	9b05      	ldr	r3, [sp, #20]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	f73f aec9 	bgt.w	8009e24 <_dtoa_r+0x934>
 800a092:	9d00      	ldr	r5, [sp, #0]
 800a094:	4631      	mov	r1, r6
 800a096:	4658      	mov	r0, fp
 800a098:	f7ff f99e 	bl	80093d8 <quorem>
 800a09c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0a0:	f805 3b01 	strb.w	r3, [r5], #1
 800a0a4:	9a00      	ldr	r2, [sp, #0]
 800a0a6:	1aaa      	subs	r2, r5, r2
 800a0a8:	4591      	cmp	r9, r2
 800a0aa:	ddba      	ble.n	800a022 <_dtoa_r+0xb32>
 800a0ac:	4659      	mov	r1, fp
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f884 	bl	800a1c0 <__multadd>
 800a0b8:	4683      	mov	fp, r0
 800a0ba:	e7eb      	b.n	800a094 <_dtoa_r+0xba4>
 800a0bc:	0800ca73 	.word	0x0800ca73
 800a0c0:	0800c9cc 	.word	0x0800c9cc
 800a0c4:	0800c9f0 	.word	0x0800c9f0

0800a0c8 <_localeconv_r>:
 800a0c8:	4800      	ldr	r0, [pc, #0]	; (800a0cc <_localeconv_r+0x4>)
 800a0ca:	4770      	bx	lr
 800a0cc:	200001f8 	.word	0x200001f8

0800a0d0 <malloc>:
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <malloc+0xc>)
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	f000 bbef 	b.w	800a8b8 <_malloc_r>
 800a0da:	bf00      	nop
 800a0dc:	200000a4 	.word	0x200000a4

0800a0e0 <memcpy>:
 800a0e0:	440a      	add	r2, r1
 800a0e2:	4291      	cmp	r1, r2
 800a0e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0e8:	d100      	bne.n	800a0ec <memcpy+0xc>
 800a0ea:	4770      	bx	lr
 800a0ec:	b510      	push	{r4, lr}
 800a0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0f6:	4291      	cmp	r1, r2
 800a0f8:	d1f9      	bne.n	800a0ee <memcpy+0xe>
 800a0fa:	bd10      	pop	{r4, pc}

0800a0fc <_Balloc>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a100:	4604      	mov	r4, r0
 800a102:	460d      	mov	r5, r1
 800a104:	b976      	cbnz	r6, 800a124 <_Balloc+0x28>
 800a106:	2010      	movs	r0, #16
 800a108:	f7ff ffe2 	bl	800a0d0 <malloc>
 800a10c:	4602      	mov	r2, r0
 800a10e:	6260      	str	r0, [r4, #36]	; 0x24
 800a110:	b920      	cbnz	r0, 800a11c <_Balloc+0x20>
 800a112:	4b18      	ldr	r3, [pc, #96]	; (800a174 <_Balloc+0x78>)
 800a114:	4818      	ldr	r0, [pc, #96]	; (800a178 <_Balloc+0x7c>)
 800a116:	2166      	movs	r1, #102	; 0x66
 800a118:	f000 fd94 	bl	800ac44 <__assert_func>
 800a11c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a120:	6006      	str	r6, [r0, #0]
 800a122:	60c6      	str	r6, [r0, #12]
 800a124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a126:	68f3      	ldr	r3, [r6, #12]
 800a128:	b183      	cbz	r3, 800a14c <_Balloc+0x50>
 800a12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a132:	b9b8      	cbnz	r0, 800a164 <_Balloc+0x68>
 800a134:	2101      	movs	r1, #1
 800a136:	fa01 f605 	lsl.w	r6, r1, r5
 800a13a:	1d72      	adds	r2, r6, #5
 800a13c:	0092      	lsls	r2, r2, #2
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 fb5a 	bl	800a7f8 <_calloc_r>
 800a144:	b160      	cbz	r0, 800a160 <_Balloc+0x64>
 800a146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a14a:	e00e      	b.n	800a16a <_Balloc+0x6e>
 800a14c:	2221      	movs	r2, #33	; 0x21
 800a14e:	2104      	movs	r1, #4
 800a150:	4620      	mov	r0, r4
 800a152:	f000 fb51 	bl	800a7f8 <_calloc_r>
 800a156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a158:	60f0      	str	r0, [r6, #12]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e4      	bne.n	800a12a <_Balloc+0x2e>
 800a160:	2000      	movs	r0, #0
 800a162:	bd70      	pop	{r4, r5, r6, pc}
 800a164:	6802      	ldr	r2, [r0, #0]
 800a166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a16a:	2300      	movs	r3, #0
 800a16c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a170:	e7f7      	b.n	800a162 <_Balloc+0x66>
 800a172:	bf00      	nop
 800a174:	0800c9fd 	.word	0x0800c9fd
 800a178:	0800ca84 	.word	0x0800ca84

0800a17c <_Bfree>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a180:	4605      	mov	r5, r0
 800a182:	460c      	mov	r4, r1
 800a184:	b976      	cbnz	r6, 800a1a4 <_Bfree+0x28>
 800a186:	2010      	movs	r0, #16
 800a188:	f7ff ffa2 	bl	800a0d0 <malloc>
 800a18c:	4602      	mov	r2, r0
 800a18e:	6268      	str	r0, [r5, #36]	; 0x24
 800a190:	b920      	cbnz	r0, 800a19c <_Bfree+0x20>
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <_Bfree+0x3c>)
 800a194:	4809      	ldr	r0, [pc, #36]	; (800a1bc <_Bfree+0x40>)
 800a196:	218a      	movs	r1, #138	; 0x8a
 800a198:	f000 fd54 	bl	800ac44 <__assert_func>
 800a19c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a0:	6006      	str	r6, [r0, #0]
 800a1a2:	60c6      	str	r6, [r0, #12]
 800a1a4:	b13c      	cbz	r4, 800a1b6 <_Bfree+0x3a>
 800a1a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1a8:	6862      	ldr	r2, [r4, #4]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1b0:	6021      	str	r1, [r4, #0]
 800a1b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	0800c9fd 	.word	0x0800c9fd
 800a1bc:	0800ca84 	.word	0x0800ca84

0800a1c0 <__multadd>:
 800a1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c4:	690e      	ldr	r6, [r1, #16]
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	4698      	mov	r8, r3
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	f101 0014 	add.w	r0, r1, #20
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	6805      	ldr	r5, [r0, #0]
 800a1d4:	b2a9      	uxth	r1, r5
 800a1d6:	fb02 8101 	mla	r1, r2, r1, r8
 800a1da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a1de:	0c2d      	lsrs	r5, r5, #16
 800a1e0:	fb02 c505 	mla	r5, r2, r5, ip
 800a1e4:	b289      	uxth	r1, r1
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a1ec:	429e      	cmp	r6, r3
 800a1ee:	f840 1b04 	str.w	r1, [r0], #4
 800a1f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a1f6:	dcec      	bgt.n	800a1d2 <__multadd+0x12>
 800a1f8:	f1b8 0f00 	cmp.w	r8, #0
 800a1fc:	d022      	beq.n	800a244 <__multadd+0x84>
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	42b3      	cmp	r3, r6
 800a202:	dc19      	bgt.n	800a238 <__multadd+0x78>
 800a204:	6861      	ldr	r1, [r4, #4]
 800a206:	4638      	mov	r0, r7
 800a208:	3101      	adds	r1, #1
 800a20a:	f7ff ff77 	bl	800a0fc <_Balloc>
 800a20e:	4605      	mov	r5, r0
 800a210:	b928      	cbnz	r0, 800a21e <__multadd+0x5e>
 800a212:	4602      	mov	r2, r0
 800a214:	4b0d      	ldr	r3, [pc, #52]	; (800a24c <__multadd+0x8c>)
 800a216:	480e      	ldr	r0, [pc, #56]	; (800a250 <__multadd+0x90>)
 800a218:	21b5      	movs	r1, #181	; 0xb5
 800a21a:	f000 fd13 	bl	800ac44 <__assert_func>
 800a21e:	6922      	ldr	r2, [r4, #16]
 800a220:	3202      	adds	r2, #2
 800a222:	f104 010c 	add.w	r1, r4, #12
 800a226:	0092      	lsls	r2, r2, #2
 800a228:	300c      	adds	r0, #12
 800a22a:	f7ff ff59 	bl	800a0e0 <memcpy>
 800a22e:	4621      	mov	r1, r4
 800a230:	4638      	mov	r0, r7
 800a232:	f7ff ffa3 	bl	800a17c <_Bfree>
 800a236:	462c      	mov	r4, r5
 800a238:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a23c:	3601      	adds	r6, #1
 800a23e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a242:	6126      	str	r6, [r4, #16]
 800a244:	4620      	mov	r0, r4
 800a246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24a:	bf00      	nop
 800a24c:	0800ca73 	.word	0x0800ca73
 800a250:	0800ca84 	.word	0x0800ca84

0800a254 <__hi0bits>:
 800a254:	0c03      	lsrs	r3, r0, #16
 800a256:	041b      	lsls	r3, r3, #16
 800a258:	b9d3      	cbnz	r3, 800a290 <__hi0bits+0x3c>
 800a25a:	0400      	lsls	r0, r0, #16
 800a25c:	2310      	movs	r3, #16
 800a25e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a262:	bf04      	itt	eq
 800a264:	0200      	lsleq	r0, r0, #8
 800a266:	3308      	addeq	r3, #8
 800a268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a26c:	bf04      	itt	eq
 800a26e:	0100      	lsleq	r0, r0, #4
 800a270:	3304      	addeq	r3, #4
 800a272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a276:	bf04      	itt	eq
 800a278:	0080      	lsleq	r0, r0, #2
 800a27a:	3302      	addeq	r3, #2
 800a27c:	2800      	cmp	r0, #0
 800a27e:	db05      	blt.n	800a28c <__hi0bits+0x38>
 800a280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a284:	f103 0301 	add.w	r3, r3, #1
 800a288:	bf08      	it	eq
 800a28a:	2320      	moveq	r3, #32
 800a28c:	4618      	mov	r0, r3
 800a28e:	4770      	bx	lr
 800a290:	2300      	movs	r3, #0
 800a292:	e7e4      	b.n	800a25e <__hi0bits+0xa>

0800a294 <__lo0bits>:
 800a294:	6803      	ldr	r3, [r0, #0]
 800a296:	f013 0207 	ands.w	r2, r3, #7
 800a29a:	4601      	mov	r1, r0
 800a29c:	d00b      	beq.n	800a2b6 <__lo0bits+0x22>
 800a29e:	07da      	lsls	r2, r3, #31
 800a2a0:	d424      	bmi.n	800a2ec <__lo0bits+0x58>
 800a2a2:	0798      	lsls	r0, r3, #30
 800a2a4:	bf49      	itett	mi
 800a2a6:	085b      	lsrmi	r3, r3, #1
 800a2a8:	089b      	lsrpl	r3, r3, #2
 800a2aa:	2001      	movmi	r0, #1
 800a2ac:	600b      	strmi	r3, [r1, #0]
 800a2ae:	bf5c      	itt	pl
 800a2b0:	600b      	strpl	r3, [r1, #0]
 800a2b2:	2002      	movpl	r0, #2
 800a2b4:	4770      	bx	lr
 800a2b6:	b298      	uxth	r0, r3
 800a2b8:	b9b0      	cbnz	r0, 800a2e8 <__lo0bits+0x54>
 800a2ba:	0c1b      	lsrs	r3, r3, #16
 800a2bc:	2010      	movs	r0, #16
 800a2be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2c2:	bf04      	itt	eq
 800a2c4:	0a1b      	lsreq	r3, r3, #8
 800a2c6:	3008      	addeq	r0, #8
 800a2c8:	071a      	lsls	r2, r3, #28
 800a2ca:	bf04      	itt	eq
 800a2cc:	091b      	lsreq	r3, r3, #4
 800a2ce:	3004      	addeq	r0, #4
 800a2d0:	079a      	lsls	r2, r3, #30
 800a2d2:	bf04      	itt	eq
 800a2d4:	089b      	lsreq	r3, r3, #2
 800a2d6:	3002      	addeq	r0, #2
 800a2d8:	07da      	lsls	r2, r3, #31
 800a2da:	d403      	bmi.n	800a2e4 <__lo0bits+0x50>
 800a2dc:	085b      	lsrs	r3, r3, #1
 800a2de:	f100 0001 	add.w	r0, r0, #1
 800a2e2:	d005      	beq.n	800a2f0 <__lo0bits+0x5c>
 800a2e4:	600b      	str	r3, [r1, #0]
 800a2e6:	4770      	bx	lr
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	e7e8      	b.n	800a2be <__lo0bits+0x2a>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	4770      	bx	lr
 800a2f0:	2020      	movs	r0, #32
 800a2f2:	4770      	bx	lr

0800a2f4 <__i2b>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	f7ff feff 	bl	800a0fc <_Balloc>
 800a2fe:	4602      	mov	r2, r0
 800a300:	b928      	cbnz	r0, 800a30e <__i2b+0x1a>
 800a302:	4b05      	ldr	r3, [pc, #20]	; (800a318 <__i2b+0x24>)
 800a304:	4805      	ldr	r0, [pc, #20]	; (800a31c <__i2b+0x28>)
 800a306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a30a:	f000 fc9b 	bl	800ac44 <__assert_func>
 800a30e:	2301      	movs	r3, #1
 800a310:	6144      	str	r4, [r0, #20]
 800a312:	6103      	str	r3, [r0, #16]
 800a314:	bd10      	pop	{r4, pc}
 800a316:	bf00      	nop
 800a318:	0800ca73 	.word	0x0800ca73
 800a31c:	0800ca84 	.word	0x0800ca84

0800a320 <__multiply>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	4614      	mov	r4, r2
 800a326:	690a      	ldr	r2, [r1, #16]
 800a328:	6923      	ldr	r3, [r4, #16]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	bfb8      	it	lt
 800a32e:	460b      	movlt	r3, r1
 800a330:	460d      	mov	r5, r1
 800a332:	bfbc      	itt	lt
 800a334:	4625      	movlt	r5, r4
 800a336:	461c      	movlt	r4, r3
 800a338:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a33c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a340:	68ab      	ldr	r3, [r5, #8]
 800a342:	6869      	ldr	r1, [r5, #4]
 800a344:	eb0a 0709 	add.w	r7, sl, r9
 800a348:	42bb      	cmp	r3, r7
 800a34a:	b085      	sub	sp, #20
 800a34c:	bfb8      	it	lt
 800a34e:	3101      	addlt	r1, #1
 800a350:	f7ff fed4 	bl	800a0fc <_Balloc>
 800a354:	b930      	cbnz	r0, 800a364 <__multiply+0x44>
 800a356:	4602      	mov	r2, r0
 800a358:	4b42      	ldr	r3, [pc, #264]	; (800a464 <__multiply+0x144>)
 800a35a:	4843      	ldr	r0, [pc, #268]	; (800a468 <__multiply+0x148>)
 800a35c:	f240 115d 	movw	r1, #349	; 0x15d
 800a360:	f000 fc70 	bl	800ac44 <__assert_func>
 800a364:	f100 0614 	add.w	r6, r0, #20
 800a368:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a36c:	4633      	mov	r3, r6
 800a36e:	2200      	movs	r2, #0
 800a370:	4543      	cmp	r3, r8
 800a372:	d31e      	bcc.n	800a3b2 <__multiply+0x92>
 800a374:	f105 0c14 	add.w	ip, r5, #20
 800a378:	f104 0314 	add.w	r3, r4, #20
 800a37c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a380:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a384:	9202      	str	r2, [sp, #8]
 800a386:	ebac 0205 	sub.w	r2, ip, r5
 800a38a:	3a15      	subs	r2, #21
 800a38c:	f022 0203 	bic.w	r2, r2, #3
 800a390:	3204      	adds	r2, #4
 800a392:	f105 0115 	add.w	r1, r5, #21
 800a396:	458c      	cmp	ip, r1
 800a398:	bf38      	it	cc
 800a39a:	2204      	movcc	r2, #4
 800a39c:	9201      	str	r2, [sp, #4]
 800a39e:	9a02      	ldr	r2, [sp, #8]
 800a3a0:	9303      	str	r3, [sp, #12]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d808      	bhi.n	800a3b8 <__multiply+0x98>
 800a3a6:	2f00      	cmp	r7, #0
 800a3a8:	dc55      	bgt.n	800a456 <__multiply+0x136>
 800a3aa:	6107      	str	r7, [r0, #16]
 800a3ac:	b005      	add	sp, #20
 800a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b2:	f843 2b04 	str.w	r2, [r3], #4
 800a3b6:	e7db      	b.n	800a370 <__multiply+0x50>
 800a3b8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3bc:	f1ba 0f00 	cmp.w	sl, #0
 800a3c0:	d020      	beq.n	800a404 <__multiply+0xe4>
 800a3c2:	f105 0e14 	add.w	lr, r5, #20
 800a3c6:	46b1      	mov	r9, r6
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a3ce:	f8d9 b000 	ldr.w	fp, [r9]
 800a3d2:	b2a1      	uxth	r1, r4
 800a3d4:	fa1f fb8b 	uxth.w	fp, fp
 800a3d8:	fb0a b101 	mla	r1, sl, r1, fp
 800a3dc:	4411      	add	r1, r2
 800a3de:	f8d9 2000 	ldr.w	r2, [r9]
 800a3e2:	0c24      	lsrs	r4, r4, #16
 800a3e4:	0c12      	lsrs	r2, r2, #16
 800a3e6:	fb0a 2404 	mla	r4, sl, r4, r2
 800a3ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a3ee:	b289      	uxth	r1, r1
 800a3f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a3f4:	45f4      	cmp	ip, lr
 800a3f6:	f849 1b04 	str.w	r1, [r9], #4
 800a3fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a3fe:	d8e4      	bhi.n	800a3ca <__multiply+0xaa>
 800a400:	9901      	ldr	r1, [sp, #4]
 800a402:	5072      	str	r2, [r6, r1]
 800a404:	9a03      	ldr	r2, [sp, #12]
 800a406:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a40a:	3304      	adds	r3, #4
 800a40c:	f1b9 0f00 	cmp.w	r9, #0
 800a410:	d01f      	beq.n	800a452 <__multiply+0x132>
 800a412:	6834      	ldr	r4, [r6, #0]
 800a414:	f105 0114 	add.w	r1, r5, #20
 800a418:	46b6      	mov	lr, r6
 800a41a:	f04f 0a00 	mov.w	sl, #0
 800a41e:	880a      	ldrh	r2, [r1, #0]
 800a420:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a424:	fb09 b202 	mla	r2, r9, r2, fp
 800a428:	4492      	add	sl, r2
 800a42a:	b2a4      	uxth	r4, r4
 800a42c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a430:	f84e 4b04 	str.w	r4, [lr], #4
 800a434:	f851 4b04 	ldr.w	r4, [r1], #4
 800a438:	f8be 2000 	ldrh.w	r2, [lr]
 800a43c:	0c24      	lsrs	r4, r4, #16
 800a43e:	fb09 2404 	mla	r4, r9, r4, r2
 800a442:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a446:	458c      	cmp	ip, r1
 800a448:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a44c:	d8e7      	bhi.n	800a41e <__multiply+0xfe>
 800a44e:	9a01      	ldr	r2, [sp, #4]
 800a450:	50b4      	str	r4, [r6, r2]
 800a452:	3604      	adds	r6, #4
 800a454:	e7a3      	b.n	800a39e <__multiply+0x7e>
 800a456:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1a5      	bne.n	800a3aa <__multiply+0x8a>
 800a45e:	3f01      	subs	r7, #1
 800a460:	e7a1      	b.n	800a3a6 <__multiply+0x86>
 800a462:	bf00      	nop
 800a464:	0800ca73 	.word	0x0800ca73
 800a468:	0800ca84 	.word	0x0800ca84

0800a46c <__pow5mult>:
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a470:	4615      	mov	r5, r2
 800a472:	f012 0203 	ands.w	r2, r2, #3
 800a476:	4606      	mov	r6, r0
 800a478:	460f      	mov	r7, r1
 800a47a:	d007      	beq.n	800a48c <__pow5mult+0x20>
 800a47c:	4c25      	ldr	r4, [pc, #148]	; (800a514 <__pow5mult+0xa8>)
 800a47e:	3a01      	subs	r2, #1
 800a480:	2300      	movs	r3, #0
 800a482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a486:	f7ff fe9b 	bl	800a1c0 <__multadd>
 800a48a:	4607      	mov	r7, r0
 800a48c:	10ad      	asrs	r5, r5, #2
 800a48e:	d03d      	beq.n	800a50c <__pow5mult+0xa0>
 800a490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a492:	b97c      	cbnz	r4, 800a4b4 <__pow5mult+0x48>
 800a494:	2010      	movs	r0, #16
 800a496:	f7ff fe1b 	bl	800a0d0 <malloc>
 800a49a:	4602      	mov	r2, r0
 800a49c:	6270      	str	r0, [r6, #36]	; 0x24
 800a49e:	b928      	cbnz	r0, 800a4ac <__pow5mult+0x40>
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <__pow5mult+0xac>)
 800a4a2:	481e      	ldr	r0, [pc, #120]	; (800a51c <__pow5mult+0xb0>)
 800a4a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4a8:	f000 fbcc 	bl	800ac44 <__assert_func>
 800a4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4b0:	6004      	str	r4, [r0, #0]
 800a4b2:	60c4      	str	r4, [r0, #12]
 800a4b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4bc:	b94c      	cbnz	r4, 800a4d2 <__pow5mult+0x66>
 800a4be:	f240 2171 	movw	r1, #625	; 0x271
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ff16 	bl	800a2f4 <__i2b>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	6003      	str	r3, [r0, #0]
 800a4d2:	f04f 0900 	mov.w	r9, #0
 800a4d6:	07eb      	lsls	r3, r5, #31
 800a4d8:	d50a      	bpl.n	800a4f0 <__pow5mult+0x84>
 800a4da:	4639      	mov	r1, r7
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ff1e 	bl	800a320 <__multiply>
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff fe47 	bl	800a17c <_Bfree>
 800a4ee:	4647      	mov	r7, r8
 800a4f0:	106d      	asrs	r5, r5, #1
 800a4f2:	d00b      	beq.n	800a50c <__pow5mult+0xa0>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	b938      	cbnz	r0, 800a508 <__pow5mult+0x9c>
 800a4f8:	4622      	mov	r2, r4
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7ff ff0f 	bl	800a320 <__multiply>
 800a502:	6020      	str	r0, [r4, #0]
 800a504:	f8c0 9000 	str.w	r9, [r0]
 800a508:	4604      	mov	r4, r0
 800a50a:	e7e4      	b.n	800a4d6 <__pow5mult+0x6a>
 800a50c:	4638      	mov	r0, r7
 800a50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a512:	bf00      	nop
 800a514:	0800cbd8 	.word	0x0800cbd8
 800a518:	0800c9fd 	.word	0x0800c9fd
 800a51c:	0800ca84 	.word	0x0800ca84

0800a520 <__lshift>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	460c      	mov	r4, r1
 800a526:	6849      	ldr	r1, [r1, #4]
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a52e:	68a3      	ldr	r3, [r4, #8]
 800a530:	4607      	mov	r7, r0
 800a532:	4691      	mov	r9, r2
 800a534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a538:	f108 0601 	add.w	r6, r8, #1
 800a53c:	42b3      	cmp	r3, r6
 800a53e:	db0b      	blt.n	800a558 <__lshift+0x38>
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff fddb 	bl	800a0fc <_Balloc>
 800a546:	4605      	mov	r5, r0
 800a548:	b948      	cbnz	r0, 800a55e <__lshift+0x3e>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b28      	ldr	r3, [pc, #160]	; (800a5f0 <__lshift+0xd0>)
 800a54e:	4829      	ldr	r0, [pc, #164]	; (800a5f4 <__lshift+0xd4>)
 800a550:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a554:	f000 fb76 	bl	800ac44 <__assert_func>
 800a558:	3101      	adds	r1, #1
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	e7ee      	b.n	800a53c <__lshift+0x1c>
 800a55e:	2300      	movs	r3, #0
 800a560:	f100 0114 	add.w	r1, r0, #20
 800a564:	f100 0210 	add.w	r2, r0, #16
 800a568:	4618      	mov	r0, r3
 800a56a:	4553      	cmp	r3, sl
 800a56c:	db33      	blt.n	800a5d6 <__lshift+0xb6>
 800a56e:	6920      	ldr	r0, [r4, #16]
 800a570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a574:	f104 0314 	add.w	r3, r4, #20
 800a578:	f019 091f 	ands.w	r9, r9, #31
 800a57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a584:	d02b      	beq.n	800a5de <__lshift+0xbe>
 800a586:	f1c9 0e20 	rsb	lr, r9, #32
 800a58a:	468a      	mov	sl, r1
 800a58c:	2200      	movs	r2, #0
 800a58e:	6818      	ldr	r0, [r3, #0]
 800a590:	fa00 f009 	lsl.w	r0, r0, r9
 800a594:	4302      	orrs	r2, r0
 800a596:	f84a 2b04 	str.w	r2, [sl], #4
 800a59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59e:	459c      	cmp	ip, r3
 800a5a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5a4:	d8f3      	bhi.n	800a58e <__lshift+0x6e>
 800a5a6:	ebac 0304 	sub.w	r3, ip, r4
 800a5aa:	3b15      	subs	r3, #21
 800a5ac:	f023 0303 	bic.w	r3, r3, #3
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	f104 0015 	add.w	r0, r4, #21
 800a5b6:	4584      	cmp	ip, r0
 800a5b8:	bf38      	it	cc
 800a5ba:	2304      	movcc	r3, #4
 800a5bc:	50ca      	str	r2, [r1, r3]
 800a5be:	b10a      	cbz	r2, 800a5c4 <__lshift+0xa4>
 800a5c0:	f108 0602 	add.w	r6, r8, #2
 800a5c4:	3e01      	subs	r6, #1
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	612e      	str	r6, [r5, #16]
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	f7ff fdd6 	bl	800a17c <_Bfree>
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5da:	3301      	adds	r3, #1
 800a5dc:	e7c5      	b.n	800a56a <__lshift+0x4a>
 800a5de:	3904      	subs	r1, #4
 800a5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5e8:	459c      	cmp	ip, r3
 800a5ea:	d8f9      	bhi.n	800a5e0 <__lshift+0xc0>
 800a5ec:	e7ea      	b.n	800a5c4 <__lshift+0xa4>
 800a5ee:	bf00      	nop
 800a5f0:	0800ca73 	.word	0x0800ca73
 800a5f4:	0800ca84 	.word	0x0800ca84

0800a5f8 <__mcmp>:
 800a5f8:	b530      	push	{r4, r5, lr}
 800a5fa:	6902      	ldr	r2, [r0, #16]
 800a5fc:	690c      	ldr	r4, [r1, #16]
 800a5fe:	1b12      	subs	r2, r2, r4
 800a600:	d10e      	bne.n	800a620 <__mcmp+0x28>
 800a602:	f100 0314 	add.w	r3, r0, #20
 800a606:	3114      	adds	r1, #20
 800a608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a60c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a618:	42a5      	cmp	r5, r4
 800a61a:	d003      	beq.n	800a624 <__mcmp+0x2c>
 800a61c:	d305      	bcc.n	800a62a <__mcmp+0x32>
 800a61e:	2201      	movs	r2, #1
 800a620:	4610      	mov	r0, r2
 800a622:	bd30      	pop	{r4, r5, pc}
 800a624:	4283      	cmp	r3, r0
 800a626:	d3f3      	bcc.n	800a610 <__mcmp+0x18>
 800a628:	e7fa      	b.n	800a620 <__mcmp+0x28>
 800a62a:	f04f 32ff 	mov.w	r2, #4294967295
 800a62e:	e7f7      	b.n	800a620 <__mcmp+0x28>

0800a630 <__mdiff>:
 800a630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	4606      	mov	r6, r0
 800a638:	4611      	mov	r1, r2
 800a63a:	4620      	mov	r0, r4
 800a63c:	4617      	mov	r7, r2
 800a63e:	f7ff ffdb 	bl	800a5f8 <__mcmp>
 800a642:	1e05      	subs	r5, r0, #0
 800a644:	d110      	bne.n	800a668 <__mdiff+0x38>
 800a646:	4629      	mov	r1, r5
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff fd57 	bl	800a0fc <_Balloc>
 800a64e:	b930      	cbnz	r0, 800a65e <__mdiff+0x2e>
 800a650:	4b39      	ldr	r3, [pc, #228]	; (800a738 <__mdiff+0x108>)
 800a652:	4602      	mov	r2, r0
 800a654:	f240 2132 	movw	r1, #562	; 0x232
 800a658:	4838      	ldr	r0, [pc, #224]	; (800a73c <__mdiff+0x10c>)
 800a65a:	f000 faf3 	bl	800ac44 <__assert_func>
 800a65e:	2301      	movs	r3, #1
 800a660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a668:	bfa4      	itt	ge
 800a66a:	463b      	movge	r3, r7
 800a66c:	4627      	movge	r7, r4
 800a66e:	4630      	mov	r0, r6
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	bfa6      	itte	ge
 800a674:	461c      	movge	r4, r3
 800a676:	2500      	movge	r5, #0
 800a678:	2501      	movlt	r5, #1
 800a67a:	f7ff fd3f 	bl	800a0fc <_Balloc>
 800a67e:	b920      	cbnz	r0, 800a68a <__mdiff+0x5a>
 800a680:	4b2d      	ldr	r3, [pc, #180]	; (800a738 <__mdiff+0x108>)
 800a682:	4602      	mov	r2, r0
 800a684:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a688:	e7e6      	b.n	800a658 <__mdiff+0x28>
 800a68a:	693e      	ldr	r6, [r7, #16]
 800a68c:	60c5      	str	r5, [r0, #12]
 800a68e:	6925      	ldr	r5, [r4, #16]
 800a690:	f107 0114 	add.w	r1, r7, #20
 800a694:	f104 0914 	add.w	r9, r4, #20
 800a698:	f100 0e14 	add.w	lr, r0, #20
 800a69c:	f107 0210 	add.w	r2, r7, #16
 800a6a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6a8:	46f2      	mov	sl, lr
 800a6aa:	2700      	movs	r7, #0
 800a6ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6b4:	fa1f f883 	uxth.w	r8, r3
 800a6b8:	fa17 f78b 	uxtah	r7, r7, fp
 800a6bc:	0c1b      	lsrs	r3, r3, #16
 800a6be:	eba7 0808 	sub.w	r8, r7, r8
 800a6c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6ca:	fa1f f888 	uxth.w	r8, r8
 800a6ce:	141f      	asrs	r7, r3, #16
 800a6d0:	454d      	cmp	r5, r9
 800a6d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6d6:	f84a 3b04 	str.w	r3, [sl], #4
 800a6da:	d8e7      	bhi.n	800a6ac <__mdiff+0x7c>
 800a6dc:	1b2b      	subs	r3, r5, r4
 800a6de:	3b15      	subs	r3, #21
 800a6e0:	f023 0303 	bic.w	r3, r3, #3
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	3415      	adds	r4, #21
 800a6e8:	42a5      	cmp	r5, r4
 800a6ea:	bf38      	it	cc
 800a6ec:	2304      	movcc	r3, #4
 800a6ee:	4419      	add	r1, r3
 800a6f0:	4473      	add	r3, lr
 800a6f2:	469e      	mov	lr, r3
 800a6f4:	460d      	mov	r5, r1
 800a6f6:	4565      	cmp	r5, ip
 800a6f8:	d30e      	bcc.n	800a718 <__mdiff+0xe8>
 800a6fa:	f10c 0203 	add.w	r2, ip, #3
 800a6fe:	1a52      	subs	r2, r2, r1
 800a700:	f022 0203 	bic.w	r2, r2, #3
 800a704:	3903      	subs	r1, #3
 800a706:	458c      	cmp	ip, r1
 800a708:	bf38      	it	cc
 800a70a:	2200      	movcc	r2, #0
 800a70c:	441a      	add	r2, r3
 800a70e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a712:	b17b      	cbz	r3, 800a734 <__mdiff+0x104>
 800a714:	6106      	str	r6, [r0, #16]
 800a716:	e7a5      	b.n	800a664 <__mdiff+0x34>
 800a718:	f855 8b04 	ldr.w	r8, [r5], #4
 800a71c:	fa17 f488 	uxtah	r4, r7, r8
 800a720:	1422      	asrs	r2, r4, #16
 800a722:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a726:	b2a4      	uxth	r4, r4
 800a728:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a72c:	f84e 4b04 	str.w	r4, [lr], #4
 800a730:	1417      	asrs	r7, r2, #16
 800a732:	e7e0      	b.n	800a6f6 <__mdiff+0xc6>
 800a734:	3e01      	subs	r6, #1
 800a736:	e7ea      	b.n	800a70e <__mdiff+0xde>
 800a738:	0800ca73 	.word	0x0800ca73
 800a73c:	0800ca84 	.word	0x0800ca84

0800a740 <__d2b>:
 800a740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a744:	4689      	mov	r9, r1
 800a746:	2101      	movs	r1, #1
 800a748:	ec57 6b10 	vmov	r6, r7, d0
 800a74c:	4690      	mov	r8, r2
 800a74e:	f7ff fcd5 	bl	800a0fc <_Balloc>
 800a752:	4604      	mov	r4, r0
 800a754:	b930      	cbnz	r0, 800a764 <__d2b+0x24>
 800a756:	4602      	mov	r2, r0
 800a758:	4b25      	ldr	r3, [pc, #148]	; (800a7f0 <__d2b+0xb0>)
 800a75a:	4826      	ldr	r0, [pc, #152]	; (800a7f4 <__d2b+0xb4>)
 800a75c:	f240 310a 	movw	r1, #778	; 0x30a
 800a760:	f000 fa70 	bl	800ac44 <__assert_func>
 800a764:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a76c:	bb35      	cbnz	r5, 800a7bc <__d2b+0x7c>
 800a76e:	2e00      	cmp	r6, #0
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	d028      	beq.n	800a7c6 <__d2b+0x86>
 800a774:	4668      	mov	r0, sp
 800a776:	9600      	str	r6, [sp, #0]
 800a778:	f7ff fd8c 	bl	800a294 <__lo0bits>
 800a77c:	9900      	ldr	r1, [sp, #0]
 800a77e:	b300      	cbz	r0, 800a7c2 <__d2b+0x82>
 800a780:	9a01      	ldr	r2, [sp, #4]
 800a782:	f1c0 0320 	rsb	r3, r0, #32
 800a786:	fa02 f303 	lsl.w	r3, r2, r3
 800a78a:	430b      	orrs	r3, r1
 800a78c:	40c2      	lsrs	r2, r0
 800a78e:	6163      	str	r3, [r4, #20]
 800a790:	9201      	str	r2, [sp, #4]
 800a792:	9b01      	ldr	r3, [sp, #4]
 800a794:	61a3      	str	r3, [r4, #24]
 800a796:	2b00      	cmp	r3, #0
 800a798:	bf14      	ite	ne
 800a79a:	2202      	movne	r2, #2
 800a79c:	2201      	moveq	r2, #1
 800a79e:	6122      	str	r2, [r4, #16]
 800a7a0:	b1d5      	cbz	r5, 800a7d8 <__d2b+0x98>
 800a7a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7a6:	4405      	add	r5, r0
 800a7a8:	f8c9 5000 	str.w	r5, [r9]
 800a7ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7b0:	f8c8 0000 	str.w	r0, [r8]
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	b003      	add	sp, #12
 800a7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7c0:	e7d5      	b.n	800a76e <__d2b+0x2e>
 800a7c2:	6161      	str	r1, [r4, #20]
 800a7c4:	e7e5      	b.n	800a792 <__d2b+0x52>
 800a7c6:	a801      	add	r0, sp, #4
 800a7c8:	f7ff fd64 	bl	800a294 <__lo0bits>
 800a7cc:	9b01      	ldr	r3, [sp, #4]
 800a7ce:	6163      	str	r3, [r4, #20]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	6122      	str	r2, [r4, #16]
 800a7d4:	3020      	adds	r0, #32
 800a7d6:	e7e3      	b.n	800a7a0 <__d2b+0x60>
 800a7d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7e0:	f8c9 0000 	str.w	r0, [r9]
 800a7e4:	6918      	ldr	r0, [r3, #16]
 800a7e6:	f7ff fd35 	bl	800a254 <__hi0bits>
 800a7ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7ee:	e7df      	b.n	800a7b0 <__d2b+0x70>
 800a7f0:	0800ca73 	.word	0x0800ca73
 800a7f4:	0800ca84 	.word	0x0800ca84

0800a7f8 <_calloc_r>:
 800a7f8:	b513      	push	{r0, r1, r4, lr}
 800a7fa:	434a      	muls	r2, r1
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	9201      	str	r2, [sp, #4]
 800a800:	f000 f85a 	bl	800a8b8 <_malloc_r>
 800a804:	4604      	mov	r4, r0
 800a806:	b118      	cbz	r0, 800a810 <_calloc_r+0x18>
 800a808:	9a01      	ldr	r2, [sp, #4]
 800a80a:	2100      	movs	r1, #0
 800a80c:	f7fe f952 	bl	8008ab4 <memset>
 800a810:	4620      	mov	r0, r4
 800a812:	b002      	add	sp, #8
 800a814:	bd10      	pop	{r4, pc}
	...

0800a818 <_free_r>:
 800a818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a81a:	2900      	cmp	r1, #0
 800a81c:	d048      	beq.n	800a8b0 <_free_r+0x98>
 800a81e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a822:	9001      	str	r0, [sp, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f1a1 0404 	sub.w	r4, r1, #4
 800a82a:	bfb8      	it	lt
 800a82c:	18e4      	addlt	r4, r4, r3
 800a82e:	f000 fa65 	bl	800acfc <__malloc_lock>
 800a832:	4a20      	ldr	r2, [pc, #128]	; (800a8b4 <_free_r+0x9c>)
 800a834:	9801      	ldr	r0, [sp, #4]
 800a836:	6813      	ldr	r3, [r2, #0]
 800a838:	4615      	mov	r5, r2
 800a83a:	b933      	cbnz	r3, 800a84a <_free_r+0x32>
 800a83c:	6063      	str	r3, [r4, #4]
 800a83e:	6014      	str	r4, [r2, #0]
 800a840:	b003      	add	sp, #12
 800a842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a846:	f000 ba5f 	b.w	800ad08 <__malloc_unlock>
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	d90b      	bls.n	800a866 <_free_r+0x4e>
 800a84e:	6821      	ldr	r1, [r4, #0]
 800a850:	1862      	adds	r2, r4, r1
 800a852:	4293      	cmp	r3, r2
 800a854:	bf04      	itt	eq
 800a856:	681a      	ldreq	r2, [r3, #0]
 800a858:	685b      	ldreq	r3, [r3, #4]
 800a85a:	6063      	str	r3, [r4, #4]
 800a85c:	bf04      	itt	eq
 800a85e:	1852      	addeq	r2, r2, r1
 800a860:	6022      	streq	r2, [r4, #0]
 800a862:	602c      	str	r4, [r5, #0]
 800a864:	e7ec      	b.n	800a840 <_free_r+0x28>
 800a866:	461a      	mov	r2, r3
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	b10b      	cbz	r3, 800a870 <_free_r+0x58>
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	d9fa      	bls.n	800a866 <_free_r+0x4e>
 800a870:	6811      	ldr	r1, [r2, #0]
 800a872:	1855      	adds	r5, r2, r1
 800a874:	42a5      	cmp	r5, r4
 800a876:	d10b      	bne.n	800a890 <_free_r+0x78>
 800a878:	6824      	ldr	r4, [r4, #0]
 800a87a:	4421      	add	r1, r4
 800a87c:	1854      	adds	r4, r2, r1
 800a87e:	42a3      	cmp	r3, r4
 800a880:	6011      	str	r1, [r2, #0]
 800a882:	d1dd      	bne.n	800a840 <_free_r+0x28>
 800a884:	681c      	ldr	r4, [r3, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	6053      	str	r3, [r2, #4]
 800a88a:	4421      	add	r1, r4
 800a88c:	6011      	str	r1, [r2, #0]
 800a88e:	e7d7      	b.n	800a840 <_free_r+0x28>
 800a890:	d902      	bls.n	800a898 <_free_r+0x80>
 800a892:	230c      	movs	r3, #12
 800a894:	6003      	str	r3, [r0, #0]
 800a896:	e7d3      	b.n	800a840 <_free_r+0x28>
 800a898:	6825      	ldr	r5, [r4, #0]
 800a89a:	1961      	adds	r1, r4, r5
 800a89c:	428b      	cmp	r3, r1
 800a89e:	bf04      	itt	eq
 800a8a0:	6819      	ldreq	r1, [r3, #0]
 800a8a2:	685b      	ldreq	r3, [r3, #4]
 800a8a4:	6063      	str	r3, [r4, #4]
 800a8a6:	bf04      	itt	eq
 800a8a8:	1949      	addeq	r1, r1, r5
 800a8aa:	6021      	streq	r1, [r4, #0]
 800a8ac:	6054      	str	r4, [r2, #4]
 800a8ae:	e7c7      	b.n	800a840 <_free_r+0x28>
 800a8b0:	b003      	add	sp, #12
 800a8b2:	bd30      	pop	{r4, r5, pc}
 800a8b4:	200002a8 	.word	0x200002a8

0800a8b8 <_malloc_r>:
 800a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ba:	1ccd      	adds	r5, r1, #3
 800a8bc:	f025 0503 	bic.w	r5, r5, #3
 800a8c0:	3508      	adds	r5, #8
 800a8c2:	2d0c      	cmp	r5, #12
 800a8c4:	bf38      	it	cc
 800a8c6:	250c      	movcc	r5, #12
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	db01      	blt.n	800a8d2 <_malloc_r+0x1a>
 800a8ce:	42a9      	cmp	r1, r5
 800a8d0:	d903      	bls.n	800a8da <_malloc_r+0x22>
 800a8d2:	230c      	movs	r3, #12
 800a8d4:	6033      	str	r3, [r6, #0]
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8da:	f000 fa0f 	bl	800acfc <__malloc_lock>
 800a8de:	4921      	ldr	r1, [pc, #132]	; (800a964 <_malloc_r+0xac>)
 800a8e0:	680a      	ldr	r2, [r1, #0]
 800a8e2:	4614      	mov	r4, r2
 800a8e4:	b99c      	cbnz	r4, 800a90e <_malloc_r+0x56>
 800a8e6:	4f20      	ldr	r7, [pc, #128]	; (800a968 <_malloc_r+0xb0>)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	b923      	cbnz	r3, 800a8f6 <_malloc_r+0x3e>
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f000 f998 	bl	800ac24 <_sbrk_r>
 800a8f4:	6038      	str	r0, [r7, #0]
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f000 f993 	bl	800ac24 <_sbrk_r>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	d123      	bne.n	800a94a <_malloc_r+0x92>
 800a902:	230c      	movs	r3, #12
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f9fe 	bl	800ad08 <__malloc_unlock>
 800a90c:	e7e3      	b.n	800a8d6 <_malloc_r+0x1e>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	1b5b      	subs	r3, r3, r5
 800a912:	d417      	bmi.n	800a944 <_malloc_r+0x8c>
 800a914:	2b0b      	cmp	r3, #11
 800a916:	d903      	bls.n	800a920 <_malloc_r+0x68>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	441c      	add	r4, r3
 800a91c:	6025      	str	r5, [r4, #0]
 800a91e:	e004      	b.n	800a92a <_malloc_r+0x72>
 800a920:	6863      	ldr	r3, [r4, #4]
 800a922:	42a2      	cmp	r2, r4
 800a924:	bf0c      	ite	eq
 800a926:	600b      	streq	r3, [r1, #0]
 800a928:	6053      	strne	r3, [r2, #4]
 800a92a:	4630      	mov	r0, r6
 800a92c:	f000 f9ec 	bl	800ad08 <__malloc_unlock>
 800a930:	f104 000b 	add.w	r0, r4, #11
 800a934:	1d23      	adds	r3, r4, #4
 800a936:	f020 0007 	bic.w	r0, r0, #7
 800a93a:	1ac2      	subs	r2, r0, r3
 800a93c:	d0cc      	beq.n	800a8d8 <_malloc_r+0x20>
 800a93e:	1a1b      	subs	r3, r3, r0
 800a940:	50a3      	str	r3, [r4, r2]
 800a942:	e7c9      	b.n	800a8d8 <_malloc_r+0x20>
 800a944:	4622      	mov	r2, r4
 800a946:	6864      	ldr	r4, [r4, #4]
 800a948:	e7cc      	b.n	800a8e4 <_malloc_r+0x2c>
 800a94a:	1cc4      	adds	r4, r0, #3
 800a94c:	f024 0403 	bic.w	r4, r4, #3
 800a950:	42a0      	cmp	r0, r4
 800a952:	d0e3      	beq.n	800a91c <_malloc_r+0x64>
 800a954:	1a21      	subs	r1, r4, r0
 800a956:	4630      	mov	r0, r6
 800a958:	f000 f964 	bl	800ac24 <_sbrk_r>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d1dd      	bne.n	800a91c <_malloc_r+0x64>
 800a960:	e7cf      	b.n	800a902 <_malloc_r+0x4a>
 800a962:	bf00      	nop
 800a964:	200002a8 	.word	0x200002a8
 800a968:	200002ac 	.word	0x200002ac

0800a96c <__ssputs_r>:
 800a96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a970:	688e      	ldr	r6, [r1, #8]
 800a972:	429e      	cmp	r6, r3
 800a974:	4682      	mov	sl, r0
 800a976:	460c      	mov	r4, r1
 800a978:	4690      	mov	r8, r2
 800a97a:	461f      	mov	r7, r3
 800a97c:	d838      	bhi.n	800a9f0 <__ssputs_r+0x84>
 800a97e:	898a      	ldrh	r2, [r1, #12]
 800a980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a984:	d032      	beq.n	800a9ec <__ssputs_r+0x80>
 800a986:	6825      	ldr	r5, [r4, #0]
 800a988:	6909      	ldr	r1, [r1, #16]
 800a98a:	eba5 0901 	sub.w	r9, r5, r1
 800a98e:	6965      	ldr	r5, [r4, #20]
 800a990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a998:	3301      	adds	r3, #1
 800a99a:	444b      	add	r3, r9
 800a99c:	106d      	asrs	r5, r5, #1
 800a99e:	429d      	cmp	r5, r3
 800a9a0:	bf38      	it	cc
 800a9a2:	461d      	movcc	r5, r3
 800a9a4:	0553      	lsls	r3, r2, #21
 800a9a6:	d531      	bpl.n	800aa0c <__ssputs_r+0xa0>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	f7ff ff85 	bl	800a8b8 <_malloc_r>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	b950      	cbnz	r0, 800a9c8 <__ssputs_r+0x5c>
 800a9b2:	230c      	movs	r3, #12
 800a9b4:	f8ca 3000 	str.w	r3, [sl]
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c8:	6921      	ldr	r1, [r4, #16]
 800a9ca:	464a      	mov	r2, r9
 800a9cc:	f7ff fb88 	bl	800a0e0 <memcpy>
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	6126      	str	r6, [r4, #16]
 800a9de:	6165      	str	r5, [r4, #20]
 800a9e0:	444e      	add	r6, r9
 800a9e2:	eba5 0509 	sub.w	r5, r5, r9
 800a9e6:	6026      	str	r6, [r4, #0]
 800a9e8:	60a5      	str	r5, [r4, #8]
 800a9ea:	463e      	mov	r6, r7
 800a9ec:	42be      	cmp	r6, r7
 800a9ee:	d900      	bls.n	800a9f2 <__ssputs_r+0x86>
 800a9f0:	463e      	mov	r6, r7
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	6820      	ldr	r0, [r4, #0]
 800a9f6:	4641      	mov	r1, r8
 800a9f8:	f000 f966 	bl	800acc8 <memmove>
 800a9fc:	68a3      	ldr	r3, [r4, #8]
 800a9fe:	6822      	ldr	r2, [r4, #0]
 800aa00:	1b9b      	subs	r3, r3, r6
 800aa02:	4432      	add	r2, r6
 800aa04:	60a3      	str	r3, [r4, #8]
 800aa06:	6022      	str	r2, [r4, #0]
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7db      	b.n	800a9c4 <__ssputs_r+0x58>
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	f000 f981 	bl	800ad14 <_realloc_r>
 800aa12:	4606      	mov	r6, r0
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d1e1      	bne.n	800a9dc <__ssputs_r+0x70>
 800aa18:	6921      	ldr	r1, [r4, #16]
 800aa1a:	4650      	mov	r0, sl
 800aa1c:	f7ff fefc 	bl	800a818 <_free_r>
 800aa20:	e7c7      	b.n	800a9b2 <__ssputs_r+0x46>
	...

0800aa24 <_svfiprintf_r>:
 800aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	4698      	mov	r8, r3
 800aa2a:	898b      	ldrh	r3, [r1, #12]
 800aa2c:	061b      	lsls	r3, r3, #24
 800aa2e:	b09d      	sub	sp, #116	; 0x74
 800aa30:	4607      	mov	r7, r0
 800aa32:	460d      	mov	r5, r1
 800aa34:	4614      	mov	r4, r2
 800aa36:	d50e      	bpl.n	800aa56 <_svfiprintf_r+0x32>
 800aa38:	690b      	ldr	r3, [r1, #16]
 800aa3a:	b963      	cbnz	r3, 800aa56 <_svfiprintf_r+0x32>
 800aa3c:	2140      	movs	r1, #64	; 0x40
 800aa3e:	f7ff ff3b 	bl	800a8b8 <_malloc_r>
 800aa42:	6028      	str	r0, [r5, #0]
 800aa44:	6128      	str	r0, [r5, #16]
 800aa46:	b920      	cbnz	r0, 800aa52 <_svfiprintf_r+0x2e>
 800aa48:	230c      	movs	r3, #12
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	e0d1      	b.n	800abf6 <_svfiprintf_r+0x1d2>
 800aa52:	2340      	movs	r3, #64	; 0x40
 800aa54:	616b      	str	r3, [r5, #20]
 800aa56:	2300      	movs	r3, #0
 800aa58:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5a:	2320      	movs	r3, #32
 800aa5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa60:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa64:	2330      	movs	r3, #48	; 0x30
 800aa66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac10 <_svfiprintf_r+0x1ec>
 800aa6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa6e:	f04f 0901 	mov.w	r9, #1
 800aa72:	4623      	mov	r3, r4
 800aa74:	469a      	mov	sl, r3
 800aa76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7a:	b10a      	cbz	r2, 800aa80 <_svfiprintf_r+0x5c>
 800aa7c:	2a25      	cmp	r2, #37	; 0x25
 800aa7e:	d1f9      	bne.n	800aa74 <_svfiprintf_r+0x50>
 800aa80:	ebba 0b04 	subs.w	fp, sl, r4
 800aa84:	d00b      	beq.n	800aa9e <_svfiprintf_r+0x7a>
 800aa86:	465b      	mov	r3, fp
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	f7ff ff6d 	bl	800a96c <__ssputs_r>
 800aa92:	3001      	adds	r0, #1
 800aa94:	f000 80aa 	beq.w	800abec <_svfiprintf_r+0x1c8>
 800aa98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa9a:	445a      	add	r2, fp
 800aa9c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa9e:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 80a2 	beq.w	800abec <_svfiprintf_r+0x1c8>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aaae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab2:	f10a 0a01 	add.w	sl, sl, #1
 800aab6:	9304      	str	r3, [sp, #16]
 800aab8:	9307      	str	r3, [sp, #28]
 800aaba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aabe:	931a      	str	r3, [sp, #104]	; 0x68
 800aac0:	4654      	mov	r4, sl
 800aac2:	2205      	movs	r2, #5
 800aac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac8:	4851      	ldr	r0, [pc, #324]	; (800ac10 <_svfiprintf_r+0x1ec>)
 800aaca:	f7f5 fba1 	bl	8000210 <memchr>
 800aace:	9a04      	ldr	r2, [sp, #16]
 800aad0:	b9d8      	cbnz	r0, 800ab0a <_svfiprintf_r+0xe6>
 800aad2:	06d0      	lsls	r0, r2, #27
 800aad4:	bf44      	itt	mi
 800aad6:	2320      	movmi	r3, #32
 800aad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aadc:	0711      	lsls	r1, r2, #28
 800aade:	bf44      	itt	mi
 800aae0:	232b      	movmi	r3, #43	; 0x2b
 800aae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae6:	f89a 3000 	ldrb.w	r3, [sl]
 800aaea:	2b2a      	cmp	r3, #42	; 0x2a
 800aaec:	d015      	beq.n	800ab1a <_svfiprintf_r+0xf6>
 800aaee:	9a07      	ldr	r2, [sp, #28]
 800aaf0:	4654      	mov	r4, sl
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	f04f 0c0a 	mov.w	ip, #10
 800aaf8:	4621      	mov	r1, r4
 800aafa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aafe:	3b30      	subs	r3, #48	; 0x30
 800ab00:	2b09      	cmp	r3, #9
 800ab02:	d94e      	bls.n	800aba2 <_svfiprintf_r+0x17e>
 800ab04:	b1b0      	cbz	r0, 800ab34 <_svfiprintf_r+0x110>
 800ab06:	9207      	str	r2, [sp, #28]
 800ab08:	e014      	b.n	800ab34 <_svfiprintf_r+0x110>
 800ab0a:	eba0 0308 	sub.w	r3, r0, r8
 800ab0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab12:	4313      	orrs	r3, r2
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	46a2      	mov	sl, r4
 800ab18:	e7d2      	b.n	800aac0 <_svfiprintf_r+0x9c>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	1d19      	adds	r1, r3, #4
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	9103      	str	r1, [sp, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	bfbb      	ittet	lt
 800ab26:	425b      	neglt	r3, r3
 800ab28:	f042 0202 	orrlt.w	r2, r2, #2
 800ab2c:	9307      	strge	r3, [sp, #28]
 800ab2e:	9307      	strlt	r3, [sp, #28]
 800ab30:	bfb8      	it	lt
 800ab32:	9204      	strlt	r2, [sp, #16]
 800ab34:	7823      	ldrb	r3, [r4, #0]
 800ab36:	2b2e      	cmp	r3, #46	; 0x2e
 800ab38:	d10c      	bne.n	800ab54 <_svfiprintf_r+0x130>
 800ab3a:	7863      	ldrb	r3, [r4, #1]
 800ab3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab3e:	d135      	bne.n	800abac <_svfiprintf_r+0x188>
 800ab40:	9b03      	ldr	r3, [sp, #12]
 800ab42:	1d1a      	adds	r2, r3, #4
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	9203      	str	r2, [sp, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	bfb8      	it	lt
 800ab4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab50:	3402      	adds	r4, #2
 800ab52:	9305      	str	r3, [sp, #20]
 800ab54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac20 <_svfiprintf_r+0x1fc>
 800ab58:	7821      	ldrb	r1, [r4, #0]
 800ab5a:	2203      	movs	r2, #3
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	f7f5 fb57 	bl	8000210 <memchr>
 800ab62:	b140      	cbz	r0, 800ab76 <_svfiprintf_r+0x152>
 800ab64:	2340      	movs	r3, #64	; 0x40
 800ab66:	eba0 000a 	sub.w	r0, r0, sl
 800ab6a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	4303      	orrs	r3, r0
 800ab72:	3401      	adds	r4, #1
 800ab74:	9304      	str	r3, [sp, #16]
 800ab76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab7a:	4826      	ldr	r0, [pc, #152]	; (800ac14 <_svfiprintf_r+0x1f0>)
 800ab7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab80:	2206      	movs	r2, #6
 800ab82:	f7f5 fb45 	bl	8000210 <memchr>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d038      	beq.n	800abfc <_svfiprintf_r+0x1d8>
 800ab8a:	4b23      	ldr	r3, [pc, #140]	; (800ac18 <_svfiprintf_r+0x1f4>)
 800ab8c:	bb1b      	cbnz	r3, 800abd6 <_svfiprintf_r+0x1b2>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	3307      	adds	r3, #7
 800ab92:	f023 0307 	bic.w	r3, r3, #7
 800ab96:	3308      	adds	r3, #8
 800ab98:	9303      	str	r3, [sp, #12]
 800ab9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9c:	4433      	add	r3, r6
 800ab9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aba0:	e767      	b.n	800aa72 <_svfiprintf_r+0x4e>
 800aba2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aba6:	460c      	mov	r4, r1
 800aba8:	2001      	movs	r0, #1
 800abaa:	e7a5      	b.n	800aaf8 <_svfiprintf_r+0xd4>
 800abac:	2300      	movs	r3, #0
 800abae:	3401      	adds	r4, #1
 800abb0:	9305      	str	r3, [sp, #20]
 800abb2:	4619      	mov	r1, r3
 800abb4:	f04f 0c0a 	mov.w	ip, #10
 800abb8:	4620      	mov	r0, r4
 800abba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abbe:	3a30      	subs	r2, #48	; 0x30
 800abc0:	2a09      	cmp	r2, #9
 800abc2:	d903      	bls.n	800abcc <_svfiprintf_r+0x1a8>
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d0c5      	beq.n	800ab54 <_svfiprintf_r+0x130>
 800abc8:	9105      	str	r1, [sp, #20]
 800abca:	e7c3      	b.n	800ab54 <_svfiprintf_r+0x130>
 800abcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd0:	4604      	mov	r4, r0
 800abd2:	2301      	movs	r3, #1
 800abd4:	e7f0      	b.n	800abb8 <_svfiprintf_r+0x194>
 800abd6:	ab03      	add	r3, sp, #12
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	462a      	mov	r2, r5
 800abdc:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <_svfiprintf_r+0x1f8>)
 800abde:	a904      	add	r1, sp, #16
 800abe0:	4638      	mov	r0, r7
 800abe2:	f7fe f80f 	bl	8008c04 <_printf_float>
 800abe6:	1c42      	adds	r2, r0, #1
 800abe8:	4606      	mov	r6, r0
 800abea:	d1d6      	bne.n	800ab9a <_svfiprintf_r+0x176>
 800abec:	89ab      	ldrh	r3, [r5, #12]
 800abee:	065b      	lsls	r3, r3, #25
 800abf0:	f53f af2c 	bmi.w	800aa4c <_svfiprintf_r+0x28>
 800abf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abf6:	b01d      	add	sp, #116	; 0x74
 800abf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfc:	ab03      	add	r3, sp, #12
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	462a      	mov	r2, r5
 800ac02:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <_svfiprintf_r+0x1f8>)
 800ac04:	a904      	add	r1, sp, #16
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7fe faa0 	bl	800914c <_printf_i>
 800ac0c:	e7eb      	b.n	800abe6 <_svfiprintf_r+0x1c2>
 800ac0e:	bf00      	nop
 800ac10:	0800cbe4 	.word	0x0800cbe4
 800ac14:	0800cbee 	.word	0x0800cbee
 800ac18:	08008c05 	.word	0x08008c05
 800ac1c:	0800a96d 	.word	0x0800a96d
 800ac20:	0800cbea 	.word	0x0800cbea

0800ac24 <_sbrk_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d06      	ldr	r5, [pc, #24]	; (800ac40 <_sbrk_r+0x1c>)
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4608      	mov	r0, r1
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7f8 fb78 	bl	8003324 <_sbrk>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_sbrk_r+0x1a>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_sbrk_r+0x1a>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	200006c0 	.word	0x200006c0

0800ac44 <__assert_func>:
 800ac44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac46:	4614      	mov	r4, r2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <__assert_func+0x2c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4605      	mov	r5, r0
 800ac50:	68d8      	ldr	r0, [r3, #12]
 800ac52:	b14c      	cbz	r4, 800ac68 <__assert_func+0x24>
 800ac54:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <__assert_func+0x30>)
 800ac56:	9100      	str	r1, [sp, #0]
 800ac58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac5c:	4906      	ldr	r1, [pc, #24]	; (800ac78 <__assert_func+0x34>)
 800ac5e:	462b      	mov	r3, r5
 800ac60:	f000 f80e 	bl	800ac80 <fiprintf>
 800ac64:	f000 faa4 	bl	800b1b0 <abort>
 800ac68:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <__assert_func+0x38>)
 800ac6a:	461c      	mov	r4, r3
 800ac6c:	e7f3      	b.n	800ac56 <__assert_func+0x12>
 800ac6e:	bf00      	nop
 800ac70:	200000a4 	.word	0x200000a4
 800ac74:	0800cbf5 	.word	0x0800cbf5
 800ac78:	0800cc02 	.word	0x0800cc02
 800ac7c:	0800cc30 	.word	0x0800cc30

0800ac80 <fiprintf>:
 800ac80:	b40e      	push	{r1, r2, r3}
 800ac82:	b503      	push	{r0, r1, lr}
 800ac84:	4601      	mov	r1, r0
 800ac86:	ab03      	add	r3, sp, #12
 800ac88:	4805      	ldr	r0, [pc, #20]	; (800aca0 <fiprintf+0x20>)
 800ac8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8e:	6800      	ldr	r0, [r0, #0]
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	f000 f88f 	bl	800adb4 <_vfiprintf_r>
 800ac96:	b002      	add	sp, #8
 800ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac9c:	b003      	add	sp, #12
 800ac9e:	4770      	bx	lr
 800aca0:	200000a4 	.word	0x200000a4

0800aca4 <__ascii_mbtowc>:
 800aca4:	b082      	sub	sp, #8
 800aca6:	b901      	cbnz	r1, 800acaa <__ascii_mbtowc+0x6>
 800aca8:	a901      	add	r1, sp, #4
 800acaa:	b142      	cbz	r2, 800acbe <__ascii_mbtowc+0x1a>
 800acac:	b14b      	cbz	r3, 800acc2 <__ascii_mbtowc+0x1e>
 800acae:	7813      	ldrb	r3, [r2, #0]
 800acb0:	600b      	str	r3, [r1, #0]
 800acb2:	7812      	ldrb	r2, [r2, #0]
 800acb4:	1e10      	subs	r0, r2, #0
 800acb6:	bf18      	it	ne
 800acb8:	2001      	movne	r0, #1
 800acba:	b002      	add	sp, #8
 800acbc:	4770      	bx	lr
 800acbe:	4610      	mov	r0, r2
 800acc0:	e7fb      	b.n	800acba <__ascii_mbtowc+0x16>
 800acc2:	f06f 0001 	mvn.w	r0, #1
 800acc6:	e7f8      	b.n	800acba <__ascii_mbtowc+0x16>

0800acc8 <memmove>:
 800acc8:	4288      	cmp	r0, r1
 800acca:	b510      	push	{r4, lr}
 800accc:	eb01 0402 	add.w	r4, r1, r2
 800acd0:	d902      	bls.n	800acd8 <memmove+0x10>
 800acd2:	4284      	cmp	r4, r0
 800acd4:	4623      	mov	r3, r4
 800acd6:	d807      	bhi.n	800ace8 <memmove+0x20>
 800acd8:	1e43      	subs	r3, r0, #1
 800acda:	42a1      	cmp	r1, r4
 800acdc:	d008      	beq.n	800acf0 <memmove+0x28>
 800acde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ace6:	e7f8      	b.n	800acda <memmove+0x12>
 800ace8:	4402      	add	r2, r0
 800acea:	4601      	mov	r1, r0
 800acec:	428a      	cmp	r2, r1
 800acee:	d100      	bne.n	800acf2 <memmove+0x2a>
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acfa:	e7f7      	b.n	800acec <memmove+0x24>

0800acfc <__malloc_lock>:
 800acfc:	4801      	ldr	r0, [pc, #4]	; (800ad04 <__malloc_lock+0x8>)
 800acfe:	f000 bc17 	b.w	800b530 <__retarget_lock_acquire_recursive>
 800ad02:	bf00      	nop
 800ad04:	200006c8 	.word	0x200006c8

0800ad08 <__malloc_unlock>:
 800ad08:	4801      	ldr	r0, [pc, #4]	; (800ad10 <__malloc_unlock+0x8>)
 800ad0a:	f000 bc12 	b.w	800b532 <__retarget_lock_release_recursive>
 800ad0e:	bf00      	nop
 800ad10:	200006c8 	.word	0x200006c8

0800ad14 <_realloc_r>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	4607      	mov	r7, r0
 800ad18:	4614      	mov	r4, r2
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	b921      	cbnz	r1, 800ad28 <_realloc_r+0x14>
 800ad1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad22:	4611      	mov	r1, r2
 800ad24:	f7ff bdc8 	b.w	800a8b8 <_malloc_r>
 800ad28:	b922      	cbnz	r2, 800ad34 <_realloc_r+0x20>
 800ad2a:	f7ff fd75 	bl	800a818 <_free_r>
 800ad2e:	4625      	mov	r5, r4
 800ad30:	4628      	mov	r0, r5
 800ad32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad34:	f000 fc62 	bl	800b5fc <_malloc_usable_size_r>
 800ad38:	42a0      	cmp	r0, r4
 800ad3a:	d20f      	bcs.n	800ad5c <_realloc_r+0x48>
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7ff fdba 	bl	800a8b8 <_malloc_r>
 800ad44:	4605      	mov	r5, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d0f2      	beq.n	800ad30 <_realloc_r+0x1c>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	f7ff f9c7 	bl	800a0e0 <memcpy>
 800ad52:	4631      	mov	r1, r6
 800ad54:	4638      	mov	r0, r7
 800ad56:	f7ff fd5f 	bl	800a818 <_free_r>
 800ad5a:	e7e9      	b.n	800ad30 <_realloc_r+0x1c>
 800ad5c:	4635      	mov	r5, r6
 800ad5e:	e7e7      	b.n	800ad30 <_realloc_r+0x1c>

0800ad60 <__sfputc_r>:
 800ad60:	6893      	ldr	r3, [r2, #8]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	b410      	push	{r4}
 800ad68:	6093      	str	r3, [r2, #8]
 800ad6a:	da08      	bge.n	800ad7e <__sfputc_r+0x1e>
 800ad6c:	6994      	ldr	r4, [r2, #24]
 800ad6e:	42a3      	cmp	r3, r4
 800ad70:	db01      	blt.n	800ad76 <__sfputc_r+0x16>
 800ad72:	290a      	cmp	r1, #10
 800ad74:	d103      	bne.n	800ad7e <__sfputc_r+0x1e>
 800ad76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7a:	f000 b94b 	b.w	800b014 <__swbuf_r>
 800ad7e:	6813      	ldr	r3, [r2, #0]
 800ad80:	1c58      	adds	r0, r3, #1
 800ad82:	6010      	str	r0, [r2, #0]
 800ad84:	7019      	strb	r1, [r3, #0]
 800ad86:	4608      	mov	r0, r1
 800ad88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <__sfputs_r>:
 800ad8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad90:	4606      	mov	r6, r0
 800ad92:	460f      	mov	r7, r1
 800ad94:	4614      	mov	r4, r2
 800ad96:	18d5      	adds	r5, r2, r3
 800ad98:	42ac      	cmp	r4, r5
 800ad9a:	d101      	bne.n	800ada0 <__sfputs_r+0x12>
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e007      	b.n	800adb0 <__sfputs_r+0x22>
 800ada0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada4:	463a      	mov	r2, r7
 800ada6:	4630      	mov	r0, r6
 800ada8:	f7ff ffda 	bl	800ad60 <__sfputc_r>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d1f3      	bne.n	800ad98 <__sfputs_r+0xa>
 800adb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800adb4 <_vfiprintf_r>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	460d      	mov	r5, r1
 800adba:	b09d      	sub	sp, #116	; 0x74
 800adbc:	4614      	mov	r4, r2
 800adbe:	4698      	mov	r8, r3
 800adc0:	4606      	mov	r6, r0
 800adc2:	b118      	cbz	r0, 800adcc <_vfiprintf_r+0x18>
 800adc4:	6983      	ldr	r3, [r0, #24]
 800adc6:	b90b      	cbnz	r3, 800adcc <_vfiprintf_r+0x18>
 800adc8:	f000 fb14 	bl	800b3f4 <__sinit>
 800adcc:	4b89      	ldr	r3, [pc, #548]	; (800aff4 <_vfiprintf_r+0x240>)
 800adce:	429d      	cmp	r5, r3
 800add0:	d11b      	bne.n	800ae0a <_vfiprintf_r+0x56>
 800add2:	6875      	ldr	r5, [r6, #4]
 800add4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800add6:	07d9      	lsls	r1, r3, #31
 800add8:	d405      	bmi.n	800ade6 <_vfiprintf_r+0x32>
 800adda:	89ab      	ldrh	r3, [r5, #12]
 800addc:	059a      	lsls	r2, r3, #22
 800adde:	d402      	bmi.n	800ade6 <_vfiprintf_r+0x32>
 800ade0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ade2:	f000 fba5 	bl	800b530 <__retarget_lock_acquire_recursive>
 800ade6:	89ab      	ldrh	r3, [r5, #12]
 800ade8:	071b      	lsls	r3, r3, #28
 800adea:	d501      	bpl.n	800adf0 <_vfiprintf_r+0x3c>
 800adec:	692b      	ldr	r3, [r5, #16]
 800adee:	b9eb      	cbnz	r3, 800ae2c <_vfiprintf_r+0x78>
 800adf0:	4629      	mov	r1, r5
 800adf2:	4630      	mov	r0, r6
 800adf4:	f000 f96e 	bl	800b0d4 <__swsetup_r>
 800adf8:	b1c0      	cbz	r0, 800ae2c <_vfiprintf_r+0x78>
 800adfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adfc:	07dc      	lsls	r4, r3, #31
 800adfe:	d50e      	bpl.n	800ae1e <_vfiprintf_r+0x6a>
 800ae00:	f04f 30ff 	mov.w	r0, #4294967295
 800ae04:	b01d      	add	sp, #116	; 0x74
 800ae06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0a:	4b7b      	ldr	r3, [pc, #492]	; (800aff8 <_vfiprintf_r+0x244>)
 800ae0c:	429d      	cmp	r5, r3
 800ae0e:	d101      	bne.n	800ae14 <_vfiprintf_r+0x60>
 800ae10:	68b5      	ldr	r5, [r6, #8]
 800ae12:	e7df      	b.n	800add4 <_vfiprintf_r+0x20>
 800ae14:	4b79      	ldr	r3, [pc, #484]	; (800affc <_vfiprintf_r+0x248>)
 800ae16:	429d      	cmp	r5, r3
 800ae18:	bf08      	it	eq
 800ae1a:	68f5      	ldreq	r5, [r6, #12]
 800ae1c:	e7da      	b.n	800add4 <_vfiprintf_r+0x20>
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	0598      	lsls	r0, r3, #22
 800ae22:	d4ed      	bmi.n	800ae00 <_vfiprintf_r+0x4c>
 800ae24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae26:	f000 fb84 	bl	800b532 <__retarget_lock_release_recursive>
 800ae2a:	e7e9      	b.n	800ae00 <_vfiprintf_r+0x4c>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae30:	2320      	movs	r3, #32
 800ae32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae3a:	2330      	movs	r3, #48	; 0x30
 800ae3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b000 <_vfiprintf_r+0x24c>
 800ae40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae44:	f04f 0901 	mov.w	r9, #1
 800ae48:	4623      	mov	r3, r4
 800ae4a:	469a      	mov	sl, r3
 800ae4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae50:	b10a      	cbz	r2, 800ae56 <_vfiprintf_r+0xa2>
 800ae52:	2a25      	cmp	r2, #37	; 0x25
 800ae54:	d1f9      	bne.n	800ae4a <_vfiprintf_r+0x96>
 800ae56:	ebba 0b04 	subs.w	fp, sl, r4
 800ae5a:	d00b      	beq.n	800ae74 <_vfiprintf_r+0xc0>
 800ae5c:	465b      	mov	r3, fp
 800ae5e:	4622      	mov	r2, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ff93 	bl	800ad8e <__sfputs_r>
 800ae68:	3001      	adds	r0, #1
 800ae6a:	f000 80aa 	beq.w	800afc2 <_vfiprintf_r+0x20e>
 800ae6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae70:	445a      	add	r2, fp
 800ae72:	9209      	str	r2, [sp, #36]	; 0x24
 800ae74:	f89a 3000 	ldrb.w	r3, [sl]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 80a2 	beq.w	800afc2 <_vfiprintf_r+0x20e>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f04f 32ff 	mov.w	r2, #4294967295
 800ae84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae88:	f10a 0a01 	add.w	sl, sl, #1
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	9307      	str	r3, [sp, #28]
 800ae90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae94:	931a      	str	r3, [sp, #104]	; 0x68
 800ae96:	4654      	mov	r4, sl
 800ae98:	2205      	movs	r2, #5
 800ae9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9e:	4858      	ldr	r0, [pc, #352]	; (800b000 <_vfiprintf_r+0x24c>)
 800aea0:	f7f5 f9b6 	bl	8000210 <memchr>
 800aea4:	9a04      	ldr	r2, [sp, #16]
 800aea6:	b9d8      	cbnz	r0, 800aee0 <_vfiprintf_r+0x12c>
 800aea8:	06d1      	lsls	r1, r2, #27
 800aeaa:	bf44      	itt	mi
 800aeac:	2320      	movmi	r3, #32
 800aeae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeb2:	0713      	lsls	r3, r2, #28
 800aeb4:	bf44      	itt	mi
 800aeb6:	232b      	movmi	r3, #43	; 0x2b
 800aeb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aebc:	f89a 3000 	ldrb.w	r3, [sl]
 800aec0:	2b2a      	cmp	r3, #42	; 0x2a
 800aec2:	d015      	beq.n	800aef0 <_vfiprintf_r+0x13c>
 800aec4:	9a07      	ldr	r2, [sp, #28]
 800aec6:	4654      	mov	r4, sl
 800aec8:	2000      	movs	r0, #0
 800aeca:	f04f 0c0a 	mov.w	ip, #10
 800aece:	4621      	mov	r1, r4
 800aed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed4:	3b30      	subs	r3, #48	; 0x30
 800aed6:	2b09      	cmp	r3, #9
 800aed8:	d94e      	bls.n	800af78 <_vfiprintf_r+0x1c4>
 800aeda:	b1b0      	cbz	r0, 800af0a <_vfiprintf_r+0x156>
 800aedc:	9207      	str	r2, [sp, #28]
 800aede:	e014      	b.n	800af0a <_vfiprintf_r+0x156>
 800aee0:	eba0 0308 	sub.w	r3, r0, r8
 800aee4:	fa09 f303 	lsl.w	r3, r9, r3
 800aee8:	4313      	orrs	r3, r2
 800aeea:	9304      	str	r3, [sp, #16]
 800aeec:	46a2      	mov	sl, r4
 800aeee:	e7d2      	b.n	800ae96 <_vfiprintf_r+0xe2>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	1d19      	adds	r1, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	9103      	str	r1, [sp, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bfbb      	ittet	lt
 800aefc:	425b      	neglt	r3, r3
 800aefe:	f042 0202 	orrlt.w	r2, r2, #2
 800af02:	9307      	strge	r3, [sp, #28]
 800af04:	9307      	strlt	r3, [sp, #28]
 800af06:	bfb8      	it	lt
 800af08:	9204      	strlt	r2, [sp, #16]
 800af0a:	7823      	ldrb	r3, [r4, #0]
 800af0c:	2b2e      	cmp	r3, #46	; 0x2e
 800af0e:	d10c      	bne.n	800af2a <_vfiprintf_r+0x176>
 800af10:	7863      	ldrb	r3, [r4, #1]
 800af12:	2b2a      	cmp	r3, #42	; 0x2a
 800af14:	d135      	bne.n	800af82 <_vfiprintf_r+0x1ce>
 800af16:	9b03      	ldr	r3, [sp, #12]
 800af18:	1d1a      	adds	r2, r3, #4
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	9203      	str	r2, [sp, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	bfb8      	it	lt
 800af22:	f04f 33ff 	movlt.w	r3, #4294967295
 800af26:	3402      	adds	r4, #2
 800af28:	9305      	str	r3, [sp, #20]
 800af2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b010 <_vfiprintf_r+0x25c>
 800af2e:	7821      	ldrb	r1, [r4, #0]
 800af30:	2203      	movs	r2, #3
 800af32:	4650      	mov	r0, sl
 800af34:	f7f5 f96c 	bl	8000210 <memchr>
 800af38:	b140      	cbz	r0, 800af4c <_vfiprintf_r+0x198>
 800af3a:	2340      	movs	r3, #64	; 0x40
 800af3c:	eba0 000a 	sub.w	r0, r0, sl
 800af40:	fa03 f000 	lsl.w	r0, r3, r0
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	4303      	orrs	r3, r0
 800af48:	3401      	adds	r4, #1
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af50:	482c      	ldr	r0, [pc, #176]	; (800b004 <_vfiprintf_r+0x250>)
 800af52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af56:	2206      	movs	r2, #6
 800af58:	f7f5 f95a 	bl	8000210 <memchr>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d03f      	beq.n	800afe0 <_vfiprintf_r+0x22c>
 800af60:	4b29      	ldr	r3, [pc, #164]	; (800b008 <_vfiprintf_r+0x254>)
 800af62:	bb1b      	cbnz	r3, 800afac <_vfiprintf_r+0x1f8>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	3307      	adds	r3, #7
 800af68:	f023 0307 	bic.w	r3, r3, #7
 800af6c:	3308      	adds	r3, #8
 800af6e:	9303      	str	r3, [sp, #12]
 800af70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af72:	443b      	add	r3, r7
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	e767      	b.n	800ae48 <_vfiprintf_r+0x94>
 800af78:	fb0c 3202 	mla	r2, ip, r2, r3
 800af7c:	460c      	mov	r4, r1
 800af7e:	2001      	movs	r0, #1
 800af80:	e7a5      	b.n	800aece <_vfiprintf_r+0x11a>
 800af82:	2300      	movs	r3, #0
 800af84:	3401      	adds	r4, #1
 800af86:	9305      	str	r3, [sp, #20]
 800af88:	4619      	mov	r1, r3
 800af8a:	f04f 0c0a 	mov.w	ip, #10
 800af8e:	4620      	mov	r0, r4
 800af90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af94:	3a30      	subs	r2, #48	; 0x30
 800af96:	2a09      	cmp	r2, #9
 800af98:	d903      	bls.n	800afa2 <_vfiprintf_r+0x1ee>
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0c5      	beq.n	800af2a <_vfiprintf_r+0x176>
 800af9e:	9105      	str	r1, [sp, #20]
 800afa0:	e7c3      	b.n	800af2a <_vfiprintf_r+0x176>
 800afa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afa6:	4604      	mov	r4, r0
 800afa8:	2301      	movs	r3, #1
 800afaa:	e7f0      	b.n	800af8e <_vfiprintf_r+0x1da>
 800afac:	ab03      	add	r3, sp, #12
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	462a      	mov	r2, r5
 800afb2:	4b16      	ldr	r3, [pc, #88]	; (800b00c <_vfiprintf_r+0x258>)
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7fd fe24 	bl	8008c04 <_printf_float>
 800afbc:	4607      	mov	r7, r0
 800afbe:	1c78      	adds	r0, r7, #1
 800afc0:	d1d6      	bne.n	800af70 <_vfiprintf_r+0x1bc>
 800afc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc4:	07d9      	lsls	r1, r3, #31
 800afc6:	d405      	bmi.n	800afd4 <_vfiprintf_r+0x220>
 800afc8:	89ab      	ldrh	r3, [r5, #12]
 800afca:	059a      	lsls	r2, r3, #22
 800afcc:	d402      	bmi.n	800afd4 <_vfiprintf_r+0x220>
 800afce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd0:	f000 faaf 	bl	800b532 <__retarget_lock_release_recursive>
 800afd4:	89ab      	ldrh	r3, [r5, #12]
 800afd6:	065b      	lsls	r3, r3, #25
 800afd8:	f53f af12 	bmi.w	800ae00 <_vfiprintf_r+0x4c>
 800afdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afde:	e711      	b.n	800ae04 <_vfiprintf_r+0x50>
 800afe0:	ab03      	add	r3, sp, #12
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	462a      	mov	r2, r5
 800afe6:	4b09      	ldr	r3, [pc, #36]	; (800b00c <_vfiprintf_r+0x258>)
 800afe8:	a904      	add	r1, sp, #16
 800afea:	4630      	mov	r0, r6
 800afec:	f7fe f8ae 	bl	800914c <_printf_i>
 800aff0:	e7e4      	b.n	800afbc <_vfiprintf_r+0x208>
 800aff2:	bf00      	nop
 800aff4:	0800cd5c 	.word	0x0800cd5c
 800aff8:	0800cd7c 	.word	0x0800cd7c
 800affc:	0800cd3c 	.word	0x0800cd3c
 800b000:	0800cbe4 	.word	0x0800cbe4
 800b004:	0800cbee 	.word	0x0800cbee
 800b008:	08008c05 	.word	0x08008c05
 800b00c:	0800ad8f 	.word	0x0800ad8f
 800b010:	0800cbea 	.word	0x0800cbea

0800b014 <__swbuf_r>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	460e      	mov	r6, r1
 800b018:	4614      	mov	r4, r2
 800b01a:	4605      	mov	r5, r0
 800b01c:	b118      	cbz	r0, 800b026 <__swbuf_r+0x12>
 800b01e:	6983      	ldr	r3, [r0, #24]
 800b020:	b90b      	cbnz	r3, 800b026 <__swbuf_r+0x12>
 800b022:	f000 f9e7 	bl	800b3f4 <__sinit>
 800b026:	4b21      	ldr	r3, [pc, #132]	; (800b0ac <__swbuf_r+0x98>)
 800b028:	429c      	cmp	r4, r3
 800b02a:	d12b      	bne.n	800b084 <__swbuf_r+0x70>
 800b02c:	686c      	ldr	r4, [r5, #4]
 800b02e:	69a3      	ldr	r3, [r4, #24]
 800b030:	60a3      	str	r3, [r4, #8]
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	071a      	lsls	r2, r3, #28
 800b036:	d52f      	bpl.n	800b098 <__swbuf_r+0x84>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	b36b      	cbz	r3, 800b098 <__swbuf_r+0x84>
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	6820      	ldr	r0, [r4, #0]
 800b040:	1ac0      	subs	r0, r0, r3
 800b042:	6963      	ldr	r3, [r4, #20]
 800b044:	b2f6      	uxtb	r6, r6
 800b046:	4283      	cmp	r3, r0
 800b048:	4637      	mov	r7, r6
 800b04a:	dc04      	bgt.n	800b056 <__swbuf_r+0x42>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4628      	mov	r0, r5
 800b050:	f000 f93c 	bl	800b2cc <_fflush_r>
 800b054:	bb30      	cbnz	r0, 800b0a4 <__swbuf_r+0x90>
 800b056:	68a3      	ldr	r3, [r4, #8]
 800b058:	3b01      	subs	r3, #1
 800b05a:	60a3      	str	r3, [r4, #8]
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	6022      	str	r2, [r4, #0]
 800b062:	701e      	strb	r6, [r3, #0]
 800b064:	6963      	ldr	r3, [r4, #20]
 800b066:	3001      	adds	r0, #1
 800b068:	4283      	cmp	r3, r0
 800b06a:	d004      	beq.n	800b076 <__swbuf_r+0x62>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	07db      	lsls	r3, r3, #31
 800b070:	d506      	bpl.n	800b080 <__swbuf_r+0x6c>
 800b072:	2e0a      	cmp	r6, #10
 800b074:	d104      	bne.n	800b080 <__swbuf_r+0x6c>
 800b076:	4621      	mov	r1, r4
 800b078:	4628      	mov	r0, r5
 800b07a:	f000 f927 	bl	800b2cc <_fflush_r>
 800b07e:	b988      	cbnz	r0, 800b0a4 <__swbuf_r+0x90>
 800b080:	4638      	mov	r0, r7
 800b082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <__swbuf_r+0x9c>)
 800b086:	429c      	cmp	r4, r3
 800b088:	d101      	bne.n	800b08e <__swbuf_r+0x7a>
 800b08a:	68ac      	ldr	r4, [r5, #8]
 800b08c:	e7cf      	b.n	800b02e <__swbuf_r+0x1a>
 800b08e:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <__swbuf_r+0xa0>)
 800b090:	429c      	cmp	r4, r3
 800b092:	bf08      	it	eq
 800b094:	68ec      	ldreq	r4, [r5, #12]
 800b096:	e7ca      	b.n	800b02e <__swbuf_r+0x1a>
 800b098:	4621      	mov	r1, r4
 800b09a:	4628      	mov	r0, r5
 800b09c:	f000 f81a 	bl	800b0d4 <__swsetup_r>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d0cb      	beq.n	800b03c <__swbuf_r+0x28>
 800b0a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b0a8:	e7ea      	b.n	800b080 <__swbuf_r+0x6c>
 800b0aa:	bf00      	nop
 800b0ac:	0800cd5c 	.word	0x0800cd5c
 800b0b0:	0800cd7c 	.word	0x0800cd7c
 800b0b4:	0800cd3c 	.word	0x0800cd3c

0800b0b8 <__ascii_wctomb>:
 800b0b8:	b149      	cbz	r1, 800b0ce <__ascii_wctomb+0x16>
 800b0ba:	2aff      	cmp	r2, #255	; 0xff
 800b0bc:	bf85      	ittet	hi
 800b0be:	238a      	movhi	r3, #138	; 0x8a
 800b0c0:	6003      	strhi	r3, [r0, #0]
 800b0c2:	700a      	strbls	r2, [r1, #0]
 800b0c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0c8:	bf98      	it	ls
 800b0ca:	2001      	movls	r0, #1
 800b0cc:	4770      	bx	lr
 800b0ce:	4608      	mov	r0, r1
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <__swsetup_r>:
 800b0d4:	4b32      	ldr	r3, [pc, #200]	; (800b1a0 <__swsetup_r+0xcc>)
 800b0d6:	b570      	push	{r4, r5, r6, lr}
 800b0d8:	681d      	ldr	r5, [r3, #0]
 800b0da:	4606      	mov	r6, r0
 800b0dc:	460c      	mov	r4, r1
 800b0de:	b125      	cbz	r5, 800b0ea <__swsetup_r+0x16>
 800b0e0:	69ab      	ldr	r3, [r5, #24]
 800b0e2:	b913      	cbnz	r3, 800b0ea <__swsetup_r+0x16>
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f000 f985 	bl	800b3f4 <__sinit>
 800b0ea:	4b2e      	ldr	r3, [pc, #184]	; (800b1a4 <__swsetup_r+0xd0>)
 800b0ec:	429c      	cmp	r4, r3
 800b0ee:	d10f      	bne.n	800b110 <__swsetup_r+0x3c>
 800b0f0:	686c      	ldr	r4, [r5, #4]
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0f8:	0719      	lsls	r1, r3, #28
 800b0fa:	d42c      	bmi.n	800b156 <__swsetup_r+0x82>
 800b0fc:	06dd      	lsls	r5, r3, #27
 800b0fe:	d411      	bmi.n	800b124 <__swsetup_r+0x50>
 800b100:	2309      	movs	r3, #9
 800b102:	6033      	str	r3, [r6, #0]
 800b104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b108:	81a3      	strh	r3, [r4, #12]
 800b10a:	f04f 30ff 	mov.w	r0, #4294967295
 800b10e:	e03e      	b.n	800b18e <__swsetup_r+0xba>
 800b110:	4b25      	ldr	r3, [pc, #148]	; (800b1a8 <__swsetup_r+0xd4>)
 800b112:	429c      	cmp	r4, r3
 800b114:	d101      	bne.n	800b11a <__swsetup_r+0x46>
 800b116:	68ac      	ldr	r4, [r5, #8]
 800b118:	e7eb      	b.n	800b0f2 <__swsetup_r+0x1e>
 800b11a:	4b24      	ldr	r3, [pc, #144]	; (800b1ac <__swsetup_r+0xd8>)
 800b11c:	429c      	cmp	r4, r3
 800b11e:	bf08      	it	eq
 800b120:	68ec      	ldreq	r4, [r5, #12]
 800b122:	e7e6      	b.n	800b0f2 <__swsetup_r+0x1e>
 800b124:	0758      	lsls	r0, r3, #29
 800b126:	d512      	bpl.n	800b14e <__swsetup_r+0x7a>
 800b128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12a:	b141      	cbz	r1, 800b13e <__swsetup_r+0x6a>
 800b12c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b130:	4299      	cmp	r1, r3
 800b132:	d002      	beq.n	800b13a <__swsetup_r+0x66>
 800b134:	4630      	mov	r0, r6
 800b136:	f7ff fb6f 	bl	800a818 <_free_r>
 800b13a:	2300      	movs	r3, #0
 800b13c:	6363      	str	r3, [r4, #52]	; 0x34
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b144:	81a3      	strh	r3, [r4, #12]
 800b146:	2300      	movs	r3, #0
 800b148:	6063      	str	r3, [r4, #4]
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f043 0308 	orr.w	r3, r3, #8
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	b94b      	cbnz	r3, 800b16e <__swsetup_r+0x9a>
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b164:	d003      	beq.n	800b16e <__swsetup_r+0x9a>
 800b166:	4621      	mov	r1, r4
 800b168:	4630      	mov	r0, r6
 800b16a:	f000 fa07 	bl	800b57c <__smakebuf_r>
 800b16e:	89a0      	ldrh	r0, [r4, #12]
 800b170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b174:	f010 0301 	ands.w	r3, r0, #1
 800b178:	d00a      	beq.n	800b190 <__swsetup_r+0xbc>
 800b17a:	2300      	movs	r3, #0
 800b17c:	60a3      	str	r3, [r4, #8]
 800b17e:	6963      	ldr	r3, [r4, #20]
 800b180:	425b      	negs	r3, r3
 800b182:	61a3      	str	r3, [r4, #24]
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	b943      	cbnz	r3, 800b19a <__swsetup_r+0xc6>
 800b188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b18c:	d1ba      	bne.n	800b104 <__swsetup_r+0x30>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	0781      	lsls	r1, r0, #30
 800b192:	bf58      	it	pl
 800b194:	6963      	ldrpl	r3, [r4, #20]
 800b196:	60a3      	str	r3, [r4, #8]
 800b198:	e7f4      	b.n	800b184 <__swsetup_r+0xb0>
 800b19a:	2000      	movs	r0, #0
 800b19c:	e7f7      	b.n	800b18e <__swsetup_r+0xba>
 800b19e:	bf00      	nop
 800b1a0:	200000a4 	.word	0x200000a4
 800b1a4:	0800cd5c 	.word	0x0800cd5c
 800b1a8:	0800cd7c 	.word	0x0800cd7c
 800b1ac:	0800cd3c 	.word	0x0800cd3c

0800b1b0 <abort>:
 800b1b0:	b508      	push	{r3, lr}
 800b1b2:	2006      	movs	r0, #6
 800b1b4:	f000 fa52 	bl	800b65c <raise>
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	f7f8 f83b 	bl	8003234 <_exit>
	...

0800b1c0 <__sflush_r>:
 800b1c0:	898a      	ldrh	r2, [r1, #12]
 800b1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	0710      	lsls	r0, r2, #28
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	d458      	bmi.n	800b280 <__sflush_r+0xc0>
 800b1ce:	684b      	ldr	r3, [r1, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dc05      	bgt.n	800b1e0 <__sflush_r+0x20>
 800b1d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dc02      	bgt.n	800b1e0 <__sflush_r+0x20>
 800b1da:	2000      	movs	r0, #0
 800b1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1e2:	2e00      	cmp	r6, #0
 800b1e4:	d0f9      	beq.n	800b1da <__sflush_r+0x1a>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1ec:	682f      	ldr	r7, [r5, #0]
 800b1ee:	602b      	str	r3, [r5, #0]
 800b1f0:	d032      	beq.n	800b258 <__sflush_r+0x98>
 800b1f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	075a      	lsls	r2, r3, #29
 800b1f8:	d505      	bpl.n	800b206 <__sflush_r+0x46>
 800b1fa:	6863      	ldr	r3, [r4, #4]
 800b1fc:	1ac0      	subs	r0, r0, r3
 800b1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b200:	b10b      	cbz	r3, 800b206 <__sflush_r+0x46>
 800b202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b204:	1ac0      	subs	r0, r0, r3
 800b206:	2300      	movs	r3, #0
 800b208:	4602      	mov	r2, r0
 800b20a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b20c:	6a21      	ldr	r1, [r4, #32]
 800b20e:	4628      	mov	r0, r5
 800b210:	47b0      	blx	r6
 800b212:	1c43      	adds	r3, r0, #1
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	d106      	bne.n	800b226 <__sflush_r+0x66>
 800b218:	6829      	ldr	r1, [r5, #0]
 800b21a:	291d      	cmp	r1, #29
 800b21c:	d82c      	bhi.n	800b278 <__sflush_r+0xb8>
 800b21e:	4a2a      	ldr	r2, [pc, #168]	; (800b2c8 <__sflush_r+0x108>)
 800b220:	40ca      	lsrs	r2, r1
 800b222:	07d6      	lsls	r6, r2, #31
 800b224:	d528      	bpl.n	800b278 <__sflush_r+0xb8>
 800b226:	2200      	movs	r2, #0
 800b228:	6062      	str	r2, [r4, #4]
 800b22a:	04d9      	lsls	r1, r3, #19
 800b22c:	6922      	ldr	r2, [r4, #16]
 800b22e:	6022      	str	r2, [r4, #0]
 800b230:	d504      	bpl.n	800b23c <__sflush_r+0x7c>
 800b232:	1c42      	adds	r2, r0, #1
 800b234:	d101      	bne.n	800b23a <__sflush_r+0x7a>
 800b236:	682b      	ldr	r3, [r5, #0]
 800b238:	b903      	cbnz	r3, 800b23c <__sflush_r+0x7c>
 800b23a:	6560      	str	r0, [r4, #84]	; 0x54
 800b23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b23e:	602f      	str	r7, [r5, #0]
 800b240:	2900      	cmp	r1, #0
 800b242:	d0ca      	beq.n	800b1da <__sflush_r+0x1a>
 800b244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b248:	4299      	cmp	r1, r3
 800b24a:	d002      	beq.n	800b252 <__sflush_r+0x92>
 800b24c:	4628      	mov	r0, r5
 800b24e:	f7ff fae3 	bl	800a818 <_free_r>
 800b252:	2000      	movs	r0, #0
 800b254:	6360      	str	r0, [r4, #52]	; 0x34
 800b256:	e7c1      	b.n	800b1dc <__sflush_r+0x1c>
 800b258:	6a21      	ldr	r1, [r4, #32]
 800b25a:	2301      	movs	r3, #1
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b0      	blx	r6
 800b260:	1c41      	adds	r1, r0, #1
 800b262:	d1c7      	bne.n	800b1f4 <__sflush_r+0x34>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d0c4      	beq.n	800b1f4 <__sflush_r+0x34>
 800b26a:	2b1d      	cmp	r3, #29
 800b26c:	d001      	beq.n	800b272 <__sflush_r+0xb2>
 800b26e:	2b16      	cmp	r3, #22
 800b270:	d101      	bne.n	800b276 <__sflush_r+0xb6>
 800b272:	602f      	str	r7, [r5, #0]
 800b274:	e7b1      	b.n	800b1da <__sflush_r+0x1a>
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b27c:	81a3      	strh	r3, [r4, #12]
 800b27e:	e7ad      	b.n	800b1dc <__sflush_r+0x1c>
 800b280:	690f      	ldr	r7, [r1, #16]
 800b282:	2f00      	cmp	r7, #0
 800b284:	d0a9      	beq.n	800b1da <__sflush_r+0x1a>
 800b286:	0793      	lsls	r3, r2, #30
 800b288:	680e      	ldr	r6, [r1, #0]
 800b28a:	bf08      	it	eq
 800b28c:	694b      	ldreq	r3, [r1, #20]
 800b28e:	600f      	str	r7, [r1, #0]
 800b290:	bf18      	it	ne
 800b292:	2300      	movne	r3, #0
 800b294:	eba6 0807 	sub.w	r8, r6, r7
 800b298:	608b      	str	r3, [r1, #8]
 800b29a:	f1b8 0f00 	cmp.w	r8, #0
 800b29e:	dd9c      	ble.n	800b1da <__sflush_r+0x1a>
 800b2a0:	6a21      	ldr	r1, [r4, #32]
 800b2a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2a4:	4643      	mov	r3, r8
 800b2a6:	463a      	mov	r2, r7
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b0      	blx	r6
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	dc06      	bgt.n	800b2be <__sflush_r+0xfe>
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	e78e      	b.n	800b1dc <__sflush_r+0x1c>
 800b2be:	4407      	add	r7, r0
 800b2c0:	eba8 0800 	sub.w	r8, r8, r0
 800b2c4:	e7e9      	b.n	800b29a <__sflush_r+0xda>
 800b2c6:	bf00      	nop
 800b2c8:	20400001 	.word	0x20400001

0800b2cc <_fflush_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	690b      	ldr	r3, [r1, #16]
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	b913      	cbnz	r3, 800b2dc <_fflush_r+0x10>
 800b2d6:	2500      	movs	r5, #0
 800b2d8:	4628      	mov	r0, r5
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	b118      	cbz	r0, 800b2e6 <_fflush_r+0x1a>
 800b2de:	6983      	ldr	r3, [r0, #24]
 800b2e0:	b90b      	cbnz	r3, 800b2e6 <_fflush_r+0x1a>
 800b2e2:	f000 f887 	bl	800b3f4 <__sinit>
 800b2e6:	4b14      	ldr	r3, [pc, #80]	; (800b338 <_fflush_r+0x6c>)
 800b2e8:	429c      	cmp	r4, r3
 800b2ea:	d11b      	bne.n	800b324 <_fflush_r+0x58>
 800b2ec:	686c      	ldr	r4, [r5, #4]
 800b2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d0ef      	beq.n	800b2d6 <_fflush_r+0xa>
 800b2f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2f8:	07d0      	lsls	r0, r2, #31
 800b2fa:	d404      	bmi.n	800b306 <_fflush_r+0x3a>
 800b2fc:	0599      	lsls	r1, r3, #22
 800b2fe:	d402      	bmi.n	800b306 <_fflush_r+0x3a>
 800b300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b302:	f000 f915 	bl	800b530 <__retarget_lock_acquire_recursive>
 800b306:	4628      	mov	r0, r5
 800b308:	4621      	mov	r1, r4
 800b30a:	f7ff ff59 	bl	800b1c0 <__sflush_r>
 800b30e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b310:	07da      	lsls	r2, r3, #31
 800b312:	4605      	mov	r5, r0
 800b314:	d4e0      	bmi.n	800b2d8 <_fflush_r+0xc>
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	059b      	lsls	r3, r3, #22
 800b31a:	d4dd      	bmi.n	800b2d8 <_fflush_r+0xc>
 800b31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b31e:	f000 f908 	bl	800b532 <__retarget_lock_release_recursive>
 800b322:	e7d9      	b.n	800b2d8 <_fflush_r+0xc>
 800b324:	4b05      	ldr	r3, [pc, #20]	; (800b33c <_fflush_r+0x70>)
 800b326:	429c      	cmp	r4, r3
 800b328:	d101      	bne.n	800b32e <_fflush_r+0x62>
 800b32a:	68ac      	ldr	r4, [r5, #8]
 800b32c:	e7df      	b.n	800b2ee <_fflush_r+0x22>
 800b32e:	4b04      	ldr	r3, [pc, #16]	; (800b340 <_fflush_r+0x74>)
 800b330:	429c      	cmp	r4, r3
 800b332:	bf08      	it	eq
 800b334:	68ec      	ldreq	r4, [r5, #12]
 800b336:	e7da      	b.n	800b2ee <_fflush_r+0x22>
 800b338:	0800cd5c 	.word	0x0800cd5c
 800b33c:	0800cd7c 	.word	0x0800cd7c
 800b340:	0800cd3c 	.word	0x0800cd3c

0800b344 <std>:
 800b344:	2300      	movs	r3, #0
 800b346:	b510      	push	{r4, lr}
 800b348:	4604      	mov	r4, r0
 800b34a:	e9c0 3300 	strd	r3, r3, [r0]
 800b34e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b352:	6083      	str	r3, [r0, #8]
 800b354:	8181      	strh	r1, [r0, #12]
 800b356:	6643      	str	r3, [r0, #100]	; 0x64
 800b358:	81c2      	strh	r2, [r0, #14]
 800b35a:	6183      	str	r3, [r0, #24]
 800b35c:	4619      	mov	r1, r3
 800b35e:	2208      	movs	r2, #8
 800b360:	305c      	adds	r0, #92	; 0x5c
 800b362:	f7fd fba7 	bl	8008ab4 <memset>
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <std+0x38>)
 800b368:	6263      	str	r3, [r4, #36]	; 0x24
 800b36a:	4b05      	ldr	r3, [pc, #20]	; (800b380 <std+0x3c>)
 800b36c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b36e:	4b05      	ldr	r3, [pc, #20]	; (800b384 <std+0x40>)
 800b370:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <std+0x44>)
 800b374:	6224      	str	r4, [r4, #32]
 800b376:	6323      	str	r3, [r4, #48]	; 0x30
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	bf00      	nop
 800b37c:	0800b695 	.word	0x0800b695
 800b380:	0800b6b7 	.word	0x0800b6b7
 800b384:	0800b6ef 	.word	0x0800b6ef
 800b388:	0800b713 	.word	0x0800b713

0800b38c <_cleanup_r>:
 800b38c:	4901      	ldr	r1, [pc, #4]	; (800b394 <_cleanup_r+0x8>)
 800b38e:	f000 b8af 	b.w	800b4f0 <_fwalk_reent>
 800b392:	bf00      	nop
 800b394:	0800b2cd 	.word	0x0800b2cd

0800b398 <__sfmoreglue>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	1e4a      	subs	r2, r1, #1
 800b39c:	2568      	movs	r5, #104	; 0x68
 800b39e:	4355      	muls	r5, r2
 800b3a0:	460e      	mov	r6, r1
 800b3a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3a6:	f7ff fa87 	bl	800a8b8 <_malloc_r>
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	b140      	cbz	r0, 800b3c0 <__sfmoreglue+0x28>
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	e9c0 1600 	strd	r1, r6, [r0]
 800b3b4:	300c      	adds	r0, #12
 800b3b6:	60a0      	str	r0, [r4, #8]
 800b3b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3bc:	f7fd fb7a 	bl	8008ab4 <memset>
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	bd70      	pop	{r4, r5, r6, pc}

0800b3c4 <__sfp_lock_acquire>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	; (800b3cc <__sfp_lock_acquire+0x8>)
 800b3c6:	f000 b8b3 	b.w	800b530 <__retarget_lock_acquire_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	200006cc 	.word	0x200006cc

0800b3d0 <__sfp_lock_release>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	; (800b3d8 <__sfp_lock_release+0x8>)
 800b3d2:	f000 b8ae 	b.w	800b532 <__retarget_lock_release_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	200006cc 	.word	0x200006cc

0800b3dc <__sinit_lock_acquire>:
 800b3dc:	4801      	ldr	r0, [pc, #4]	; (800b3e4 <__sinit_lock_acquire+0x8>)
 800b3de:	f000 b8a7 	b.w	800b530 <__retarget_lock_acquire_recursive>
 800b3e2:	bf00      	nop
 800b3e4:	200006c7 	.word	0x200006c7

0800b3e8 <__sinit_lock_release>:
 800b3e8:	4801      	ldr	r0, [pc, #4]	; (800b3f0 <__sinit_lock_release+0x8>)
 800b3ea:	f000 b8a2 	b.w	800b532 <__retarget_lock_release_recursive>
 800b3ee:	bf00      	nop
 800b3f0:	200006c7 	.word	0x200006c7

0800b3f4 <__sinit>:
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	f7ff fff0 	bl	800b3dc <__sinit_lock_acquire>
 800b3fc:	69a3      	ldr	r3, [r4, #24]
 800b3fe:	b11b      	cbz	r3, 800b408 <__sinit+0x14>
 800b400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b404:	f7ff bff0 	b.w	800b3e8 <__sinit_lock_release>
 800b408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b40c:	6523      	str	r3, [r4, #80]	; 0x50
 800b40e:	4b13      	ldr	r3, [pc, #76]	; (800b45c <__sinit+0x68>)
 800b410:	4a13      	ldr	r2, [pc, #76]	; (800b460 <__sinit+0x6c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	62a2      	str	r2, [r4, #40]	; 0x28
 800b416:	42a3      	cmp	r3, r4
 800b418:	bf04      	itt	eq
 800b41a:	2301      	moveq	r3, #1
 800b41c:	61a3      	streq	r3, [r4, #24]
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 f820 	bl	800b464 <__sfp>
 800b424:	6060      	str	r0, [r4, #4]
 800b426:	4620      	mov	r0, r4
 800b428:	f000 f81c 	bl	800b464 <__sfp>
 800b42c:	60a0      	str	r0, [r4, #8]
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 f818 	bl	800b464 <__sfp>
 800b434:	2200      	movs	r2, #0
 800b436:	60e0      	str	r0, [r4, #12]
 800b438:	2104      	movs	r1, #4
 800b43a:	6860      	ldr	r0, [r4, #4]
 800b43c:	f7ff ff82 	bl	800b344 <std>
 800b440:	68a0      	ldr	r0, [r4, #8]
 800b442:	2201      	movs	r2, #1
 800b444:	2109      	movs	r1, #9
 800b446:	f7ff ff7d 	bl	800b344 <std>
 800b44a:	68e0      	ldr	r0, [r4, #12]
 800b44c:	2202      	movs	r2, #2
 800b44e:	2112      	movs	r1, #18
 800b450:	f7ff ff78 	bl	800b344 <std>
 800b454:	2301      	movs	r3, #1
 800b456:	61a3      	str	r3, [r4, #24]
 800b458:	e7d2      	b.n	800b400 <__sinit+0xc>
 800b45a:	bf00      	nop
 800b45c:	0800c9b8 	.word	0x0800c9b8
 800b460:	0800b38d 	.word	0x0800b38d

0800b464 <__sfp>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	4607      	mov	r7, r0
 800b468:	f7ff ffac 	bl	800b3c4 <__sfp_lock_acquire>
 800b46c:	4b1e      	ldr	r3, [pc, #120]	; (800b4e8 <__sfp+0x84>)
 800b46e:	681e      	ldr	r6, [r3, #0]
 800b470:	69b3      	ldr	r3, [r6, #24]
 800b472:	b913      	cbnz	r3, 800b47a <__sfp+0x16>
 800b474:	4630      	mov	r0, r6
 800b476:	f7ff ffbd 	bl	800b3f4 <__sinit>
 800b47a:	3648      	adds	r6, #72	; 0x48
 800b47c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b480:	3b01      	subs	r3, #1
 800b482:	d503      	bpl.n	800b48c <__sfp+0x28>
 800b484:	6833      	ldr	r3, [r6, #0]
 800b486:	b30b      	cbz	r3, 800b4cc <__sfp+0x68>
 800b488:	6836      	ldr	r6, [r6, #0]
 800b48a:	e7f7      	b.n	800b47c <__sfp+0x18>
 800b48c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b490:	b9d5      	cbnz	r5, 800b4c8 <__sfp+0x64>
 800b492:	4b16      	ldr	r3, [pc, #88]	; (800b4ec <__sfp+0x88>)
 800b494:	60e3      	str	r3, [r4, #12]
 800b496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b49a:	6665      	str	r5, [r4, #100]	; 0x64
 800b49c:	f000 f847 	bl	800b52e <__retarget_lock_init_recursive>
 800b4a0:	f7ff ff96 	bl	800b3d0 <__sfp_lock_release>
 800b4a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4ac:	6025      	str	r5, [r4, #0]
 800b4ae:	61a5      	str	r5, [r4, #24]
 800b4b0:	2208      	movs	r2, #8
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4b8:	f7fd fafc 	bl	8008ab4 <memset>
 800b4bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c8:	3468      	adds	r4, #104	; 0x68
 800b4ca:	e7d9      	b.n	800b480 <__sfp+0x1c>
 800b4cc:	2104      	movs	r1, #4
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f7ff ff62 	bl	800b398 <__sfmoreglue>
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	6030      	str	r0, [r6, #0]
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d1d5      	bne.n	800b488 <__sfp+0x24>
 800b4dc:	f7ff ff78 	bl	800b3d0 <__sfp_lock_release>
 800b4e0:	230c      	movs	r3, #12
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	e7ee      	b.n	800b4c4 <__sfp+0x60>
 800b4e6:	bf00      	nop
 800b4e8:	0800c9b8 	.word	0x0800c9b8
 800b4ec:	ffff0001 	.word	0xffff0001

0800b4f0 <_fwalk_reent>:
 800b4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	4688      	mov	r8, r1
 800b4f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4fc:	2700      	movs	r7, #0
 800b4fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b502:	f1b9 0901 	subs.w	r9, r9, #1
 800b506:	d505      	bpl.n	800b514 <_fwalk_reent+0x24>
 800b508:	6824      	ldr	r4, [r4, #0]
 800b50a:	2c00      	cmp	r4, #0
 800b50c:	d1f7      	bne.n	800b4fe <_fwalk_reent+0xe>
 800b50e:	4638      	mov	r0, r7
 800b510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b514:	89ab      	ldrh	r3, [r5, #12]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d907      	bls.n	800b52a <_fwalk_reent+0x3a>
 800b51a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b51e:	3301      	adds	r3, #1
 800b520:	d003      	beq.n	800b52a <_fwalk_reent+0x3a>
 800b522:	4629      	mov	r1, r5
 800b524:	4630      	mov	r0, r6
 800b526:	47c0      	blx	r8
 800b528:	4307      	orrs	r7, r0
 800b52a:	3568      	adds	r5, #104	; 0x68
 800b52c:	e7e9      	b.n	800b502 <_fwalk_reent+0x12>

0800b52e <__retarget_lock_init_recursive>:
 800b52e:	4770      	bx	lr

0800b530 <__retarget_lock_acquire_recursive>:
 800b530:	4770      	bx	lr

0800b532 <__retarget_lock_release_recursive>:
 800b532:	4770      	bx	lr

0800b534 <__swhatbuf_r>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	460e      	mov	r6, r1
 800b538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53c:	2900      	cmp	r1, #0
 800b53e:	b096      	sub	sp, #88	; 0x58
 800b540:	4614      	mov	r4, r2
 800b542:	461d      	mov	r5, r3
 800b544:	da07      	bge.n	800b556 <__swhatbuf_r+0x22>
 800b546:	2300      	movs	r3, #0
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	89b3      	ldrh	r3, [r6, #12]
 800b54c:	061a      	lsls	r2, r3, #24
 800b54e:	d410      	bmi.n	800b572 <__swhatbuf_r+0x3e>
 800b550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b554:	e00e      	b.n	800b574 <__swhatbuf_r+0x40>
 800b556:	466a      	mov	r2, sp
 800b558:	f000 f902 	bl	800b760 <_fstat_r>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	dbf2      	blt.n	800b546 <__swhatbuf_r+0x12>
 800b560:	9a01      	ldr	r2, [sp, #4]
 800b562:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b566:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b56a:	425a      	negs	r2, r3
 800b56c:	415a      	adcs	r2, r3
 800b56e:	602a      	str	r2, [r5, #0]
 800b570:	e7ee      	b.n	800b550 <__swhatbuf_r+0x1c>
 800b572:	2340      	movs	r3, #64	; 0x40
 800b574:	2000      	movs	r0, #0
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	b016      	add	sp, #88	; 0x58
 800b57a:	bd70      	pop	{r4, r5, r6, pc}

0800b57c <__smakebuf_r>:
 800b57c:	898b      	ldrh	r3, [r1, #12]
 800b57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b580:	079d      	lsls	r5, r3, #30
 800b582:	4606      	mov	r6, r0
 800b584:	460c      	mov	r4, r1
 800b586:	d507      	bpl.n	800b598 <__smakebuf_r+0x1c>
 800b588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	2301      	movs	r3, #1
 800b592:	6163      	str	r3, [r4, #20]
 800b594:	b002      	add	sp, #8
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	ab01      	add	r3, sp, #4
 800b59a:	466a      	mov	r2, sp
 800b59c:	f7ff ffca 	bl	800b534 <__swhatbuf_r>
 800b5a0:	9900      	ldr	r1, [sp, #0]
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7ff f987 	bl	800a8b8 <_malloc_r>
 800b5aa:	b948      	cbnz	r0, 800b5c0 <__smakebuf_r+0x44>
 800b5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b0:	059a      	lsls	r2, r3, #22
 800b5b2:	d4ef      	bmi.n	800b594 <__smakebuf_r+0x18>
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	f043 0302 	orr.w	r3, r3, #2
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	e7e3      	b.n	800b588 <__smakebuf_r+0xc>
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <__smakebuf_r+0x7c>)
 800b5c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	6020      	str	r0, [r4, #0]
 800b5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5cc:	81a3      	strh	r3, [r4, #12]
 800b5ce:	9b00      	ldr	r3, [sp, #0]
 800b5d0:	6163      	str	r3, [r4, #20]
 800b5d2:	9b01      	ldr	r3, [sp, #4]
 800b5d4:	6120      	str	r0, [r4, #16]
 800b5d6:	b15b      	cbz	r3, 800b5f0 <__smakebuf_r+0x74>
 800b5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f000 f8d1 	bl	800b784 <_isatty_r>
 800b5e2:	b128      	cbz	r0, 800b5f0 <__smakebuf_r+0x74>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f023 0303 	bic.w	r3, r3, #3
 800b5ea:	f043 0301 	orr.w	r3, r3, #1
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	89a0      	ldrh	r0, [r4, #12]
 800b5f2:	4305      	orrs	r5, r0
 800b5f4:	81a5      	strh	r5, [r4, #12]
 800b5f6:	e7cd      	b.n	800b594 <__smakebuf_r+0x18>
 800b5f8:	0800b38d 	.word	0x0800b38d

0800b5fc <_malloc_usable_size_r>:
 800b5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b600:	1f18      	subs	r0, r3, #4
 800b602:	2b00      	cmp	r3, #0
 800b604:	bfbc      	itt	lt
 800b606:	580b      	ldrlt	r3, [r1, r0]
 800b608:	18c0      	addlt	r0, r0, r3
 800b60a:	4770      	bx	lr

0800b60c <_raise_r>:
 800b60c:	291f      	cmp	r1, #31
 800b60e:	b538      	push	{r3, r4, r5, lr}
 800b610:	4604      	mov	r4, r0
 800b612:	460d      	mov	r5, r1
 800b614:	d904      	bls.n	800b620 <_raise_r+0x14>
 800b616:	2316      	movs	r3, #22
 800b618:	6003      	str	r3, [r0, #0]
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b622:	b112      	cbz	r2, 800b62a <_raise_r+0x1e>
 800b624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b628:	b94b      	cbnz	r3, 800b63e <_raise_r+0x32>
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 f830 	bl	800b690 <_getpid_r>
 800b630:	462a      	mov	r2, r5
 800b632:	4601      	mov	r1, r0
 800b634:	4620      	mov	r0, r4
 800b636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63a:	f000 b817 	b.w	800b66c <_kill_r>
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d00a      	beq.n	800b658 <_raise_r+0x4c>
 800b642:	1c59      	adds	r1, r3, #1
 800b644:	d103      	bne.n	800b64e <_raise_r+0x42>
 800b646:	2316      	movs	r3, #22
 800b648:	6003      	str	r3, [r0, #0]
 800b64a:	2001      	movs	r0, #1
 800b64c:	e7e7      	b.n	800b61e <_raise_r+0x12>
 800b64e:	2400      	movs	r4, #0
 800b650:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b654:	4628      	mov	r0, r5
 800b656:	4798      	blx	r3
 800b658:	2000      	movs	r0, #0
 800b65a:	e7e0      	b.n	800b61e <_raise_r+0x12>

0800b65c <raise>:
 800b65c:	4b02      	ldr	r3, [pc, #8]	; (800b668 <raise+0xc>)
 800b65e:	4601      	mov	r1, r0
 800b660:	6818      	ldr	r0, [r3, #0]
 800b662:	f7ff bfd3 	b.w	800b60c <_raise_r>
 800b666:	bf00      	nop
 800b668:	200000a4 	.word	0x200000a4

0800b66c <_kill_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d07      	ldr	r5, [pc, #28]	; (800b68c <_kill_r+0x20>)
 800b670:	2300      	movs	r3, #0
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	602b      	str	r3, [r5, #0]
 800b67a:	f7f7 fdcb 	bl	8003214 <_kill>
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	d102      	bne.n	800b688 <_kill_r+0x1c>
 800b682:	682b      	ldr	r3, [r5, #0]
 800b684:	b103      	cbz	r3, 800b688 <_kill_r+0x1c>
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	bd38      	pop	{r3, r4, r5, pc}
 800b68a:	bf00      	nop
 800b68c:	200006c0 	.word	0x200006c0

0800b690 <_getpid_r>:
 800b690:	f7f7 bdb8 	b.w	8003204 <_getpid>

0800b694 <__sread>:
 800b694:	b510      	push	{r4, lr}
 800b696:	460c      	mov	r4, r1
 800b698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b69c:	f000 f894 	bl	800b7c8 <_read_r>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	bfab      	itete	ge
 800b6a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b6a8:	181b      	addge	r3, r3, r0
 800b6aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6ae:	bfac      	ite	ge
 800b6b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6b2:	81a3      	strhlt	r3, [r4, #12]
 800b6b4:	bd10      	pop	{r4, pc}

0800b6b6 <__swrite>:
 800b6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ba:	461f      	mov	r7, r3
 800b6bc:	898b      	ldrh	r3, [r1, #12]
 800b6be:	05db      	lsls	r3, r3, #23
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	d505      	bpl.n	800b6d4 <__swrite+0x1e>
 800b6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f000 f868 	bl	800b7a4 <_lseek_r>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6de:	81a3      	strh	r3, [r4, #12]
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	463b      	mov	r3, r7
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ea:	f000 b817 	b.w	800b71c <_write_r>

0800b6ee <__sseek>:
 800b6ee:	b510      	push	{r4, lr}
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f6:	f000 f855 	bl	800b7a4 <_lseek_r>
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	bf15      	itete	ne
 800b700:	6560      	strne	r0, [r4, #84]	; 0x54
 800b702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b70a:	81a3      	strheq	r3, [r4, #12]
 800b70c:	bf18      	it	ne
 800b70e:	81a3      	strhne	r3, [r4, #12]
 800b710:	bd10      	pop	{r4, pc}

0800b712 <__sclose>:
 800b712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b716:	f000 b813 	b.w	800b740 <_close_r>
	...

0800b71c <_write_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d07      	ldr	r5, [pc, #28]	; (800b73c <_write_r+0x20>)
 800b720:	4604      	mov	r4, r0
 800b722:	4608      	mov	r0, r1
 800b724:	4611      	mov	r1, r2
 800b726:	2200      	movs	r2, #0
 800b728:	602a      	str	r2, [r5, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f7f7 fda9 	bl	8003282 <_write>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_write_r+0x1e>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_write_r+0x1e>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	200006c0 	.word	0x200006c0

0800b740 <_close_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d06      	ldr	r5, [pc, #24]	; (800b75c <_close_r+0x1c>)
 800b744:	2300      	movs	r3, #0
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f7 fdb5 	bl	80032ba <_close>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_close_r+0x1a>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_close_r+0x1a>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	200006c0 	.word	0x200006c0

0800b760 <_fstat_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	; (800b780 <_fstat_r+0x20>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	4611      	mov	r1, r2
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	f7f7 fdb0 	bl	80032d2 <_fstat>
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	d102      	bne.n	800b77c <_fstat_r+0x1c>
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	b103      	cbz	r3, 800b77c <_fstat_r+0x1c>
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	bd38      	pop	{r3, r4, r5, pc}
 800b77e:	bf00      	nop
 800b780:	200006c0 	.word	0x200006c0

0800b784 <_isatty_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d06      	ldr	r5, [pc, #24]	; (800b7a0 <_isatty_r+0x1c>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	602b      	str	r3, [r5, #0]
 800b790:	f7f7 fdaf 	bl	80032f2 <_isatty>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_isatty_r+0x1a>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_isatty_r+0x1a>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	200006c0 	.word	0x200006c0

0800b7a4 <_lseek_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4d07      	ldr	r5, [pc, #28]	; (800b7c4 <_lseek_r+0x20>)
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	4608      	mov	r0, r1
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	602a      	str	r2, [r5, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	f7f7 fda8 	bl	8003308 <_lseek>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_lseek_r+0x1e>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_lseek_r+0x1e>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	200006c0 	.word	0x200006c0

0800b7c8 <_read_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	; (800b7e8 <_read_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7f7 fd36 	bl	8003248 <_read>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_read_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_read_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	200006c0 	.word	0x200006c0
 800b7ec:	00000000 	.word	0x00000000

0800b7f0 <atan>:
 800b7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	ec55 4b10 	vmov	r4, r5, d0
 800b7f8:	4bc3      	ldr	r3, [pc, #780]	; (800bb08 <atan+0x318>)
 800b7fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b7fe:	429e      	cmp	r6, r3
 800b800:	46ab      	mov	fp, r5
 800b802:	dd18      	ble.n	800b836 <atan+0x46>
 800b804:	4bc1      	ldr	r3, [pc, #772]	; (800bb0c <atan+0x31c>)
 800b806:	429e      	cmp	r6, r3
 800b808:	dc01      	bgt.n	800b80e <atan+0x1e>
 800b80a:	d109      	bne.n	800b820 <atan+0x30>
 800b80c:	b144      	cbz	r4, 800b820 <atan+0x30>
 800b80e:	4622      	mov	r2, r4
 800b810:	462b      	mov	r3, r5
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 fd51 	bl	80002bc <__adddf3>
 800b81a:	4604      	mov	r4, r0
 800b81c:	460d      	mov	r5, r1
 800b81e:	e006      	b.n	800b82e <atan+0x3e>
 800b820:	f1bb 0f00 	cmp.w	fp, #0
 800b824:	f300 8131 	bgt.w	800ba8a <atan+0x29a>
 800b828:	a59b      	add	r5, pc, #620	; (adr r5, 800ba98 <atan+0x2a8>)
 800b82a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b82e:	ec45 4b10 	vmov	d0, r4, r5
 800b832:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b836:	4bb6      	ldr	r3, [pc, #728]	; (800bb10 <atan+0x320>)
 800b838:	429e      	cmp	r6, r3
 800b83a:	dc14      	bgt.n	800b866 <atan+0x76>
 800b83c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b840:	429e      	cmp	r6, r3
 800b842:	dc0d      	bgt.n	800b860 <atan+0x70>
 800b844:	a396      	add	r3, pc, #600	; (adr r3, 800baa0 <atan+0x2b0>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	ee10 0a10 	vmov	r0, s0
 800b84e:	4629      	mov	r1, r5
 800b850:	f7f4 fd34 	bl	80002bc <__adddf3>
 800b854:	4baf      	ldr	r3, [pc, #700]	; (800bb14 <atan+0x324>)
 800b856:	2200      	movs	r2, #0
 800b858:	f7f5 f976 	bl	8000b48 <__aeabi_dcmpgt>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d1e6      	bne.n	800b82e <atan+0x3e>
 800b860:	f04f 3aff 	mov.w	sl, #4294967295
 800b864:	e02b      	b.n	800b8be <atan+0xce>
 800b866:	f000 f963 	bl	800bb30 <fabs>
 800b86a:	4bab      	ldr	r3, [pc, #684]	; (800bb18 <atan+0x328>)
 800b86c:	429e      	cmp	r6, r3
 800b86e:	ec55 4b10 	vmov	r4, r5, d0
 800b872:	f300 80bf 	bgt.w	800b9f4 <atan+0x204>
 800b876:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b87a:	429e      	cmp	r6, r3
 800b87c:	f300 80a0 	bgt.w	800b9c0 <atan+0x1d0>
 800b880:	ee10 2a10 	vmov	r2, s0
 800b884:	ee10 0a10 	vmov	r0, s0
 800b888:	462b      	mov	r3, r5
 800b88a:	4629      	mov	r1, r5
 800b88c:	f7f4 fd16 	bl	80002bc <__adddf3>
 800b890:	4ba0      	ldr	r3, [pc, #640]	; (800bb14 <atan+0x324>)
 800b892:	2200      	movs	r2, #0
 800b894:	f7f4 fd10 	bl	80002b8 <__aeabi_dsub>
 800b898:	2200      	movs	r2, #0
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	f7f4 fd09 	bl	80002bc <__adddf3>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7f4 ffe3 	bl	800087c <__aeabi_ddiv>
 800b8b6:	f04f 0a00 	mov.w	sl, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	460d      	mov	r5, r1
 800b8be:	4622      	mov	r2, r4
 800b8c0:	462b      	mov	r3, r5
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	f7f4 feaf 	bl	8000628 <__aeabi_dmul>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	4689      	mov	r9, r1
 800b8d2:	f7f4 fea9 	bl	8000628 <__aeabi_dmul>
 800b8d6:	a374      	add	r3, pc, #464	; (adr r3, 800baa8 <atan+0x2b8>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	4606      	mov	r6, r0
 800b8de:	460f      	mov	r7, r1
 800b8e0:	f7f4 fea2 	bl	8000628 <__aeabi_dmul>
 800b8e4:	a372      	add	r3, pc, #456	; (adr r3, 800bab0 <atan+0x2c0>)
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	f7f4 fce7 	bl	80002bc <__adddf3>
 800b8ee:	4632      	mov	r2, r6
 800b8f0:	463b      	mov	r3, r7
 800b8f2:	f7f4 fe99 	bl	8000628 <__aeabi_dmul>
 800b8f6:	a370      	add	r3, pc, #448	; (adr r3, 800bab8 <atan+0x2c8>)
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f7f4 fcde 	bl	80002bc <__adddf3>
 800b900:	4632      	mov	r2, r6
 800b902:	463b      	mov	r3, r7
 800b904:	f7f4 fe90 	bl	8000628 <__aeabi_dmul>
 800b908:	a36d      	add	r3, pc, #436	; (adr r3, 800bac0 <atan+0x2d0>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f7f4 fcd5 	bl	80002bc <__adddf3>
 800b912:	4632      	mov	r2, r6
 800b914:	463b      	mov	r3, r7
 800b916:	f7f4 fe87 	bl	8000628 <__aeabi_dmul>
 800b91a:	a36b      	add	r3, pc, #428	; (adr r3, 800bac8 <atan+0x2d8>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f7f4 fccc 	bl	80002bc <__adddf3>
 800b924:	4632      	mov	r2, r6
 800b926:	463b      	mov	r3, r7
 800b928:	f7f4 fe7e 	bl	8000628 <__aeabi_dmul>
 800b92c:	a368      	add	r3, pc, #416	; (adr r3, 800bad0 <atan+0x2e0>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	f7f4 fcc3 	bl	80002bc <__adddf3>
 800b936:	4642      	mov	r2, r8
 800b938:	464b      	mov	r3, r9
 800b93a:	f7f4 fe75 	bl	8000628 <__aeabi_dmul>
 800b93e:	a366      	add	r3, pc, #408	; (adr r3, 800bad8 <atan+0x2e8>)
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	4680      	mov	r8, r0
 800b946:	4689      	mov	r9, r1
 800b948:	4630      	mov	r0, r6
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f4 fe6c 	bl	8000628 <__aeabi_dmul>
 800b950:	a363      	add	r3, pc, #396	; (adr r3, 800bae0 <atan+0x2f0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fcaf 	bl	80002b8 <__aeabi_dsub>
 800b95a:	4632      	mov	r2, r6
 800b95c:	463b      	mov	r3, r7
 800b95e:	f7f4 fe63 	bl	8000628 <__aeabi_dmul>
 800b962:	a361      	add	r3, pc, #388	; (adr r3, 800bae8 <atan+0x2f8>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fca6 	bl	80002b8 <__aeabi_dsub>
 800b96c:	4632      	mov	r2, r6
 800b96e:	463b      	mov	r3, r7
 800b970:	f7f4 fe5a 	bl	8000628 <__aeabi_dmul>
 800b974:	a35e      	add	r3, pc, #376	; (adr r3, 800baf0 <atan+0x300>)
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	f7f4 fc9d 	bl	80002b8 <__aeabi_dsub>
 800b97e:	4632      	mov	r2, r6
 800b980:	463b      	mov	r3, r7
 800b982:	f7f4 fe51 	bl	8000628 <__aeabi_dmul>
 800b986:	a35c      	add	r3, pc, #368	; (adr r3, 800baf8 <atan+0x308>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f4 fc94 	bl	80002b8 <__aeabi_dsub>
 800b990:	4632      	mov	r2, r6
 800b992:	463b      	mov	r3, r7
 800b994:	f7f4 fe48 	bl	8000628 <__aeabi_dmul>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4640      	mov	r0, r8
 800b99e:	4649      	mov	r1, r9
 800b9a0:	f7f4 fc8c 	bl	80002bc <__adddf3>
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	462b      	mov	r3, r5
 800b9a8:	f7f4 fe3e 	bl	8000628 <__aeabi_dmul>
 800b9ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	d14b      	bne.n	800ba4e <atan+0x25e>
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f7f4 fc7d 	bl	80002b8 <__aeabi_dsub>
 800b9be:	e72c      	b.n	800b81a <atan+0x2a>
 800b9c0:	ee10 0a10 	vmov	r0, s0
 800b9c4:	4b53      	ldr	r3, [pc, #332]	; (800bb14 <atan+0x324>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	f7f4 fc75 	bl	80002b8 <__aeabi_dsub>
 800b9ce:	4b51      	ldr	r3, [pc, #324]	; (800bb14 <atan+0x324>)
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	460f      	mov	r7, r1
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7f4 fc6f 	bl	80002bc <__adddf3>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	f7f4 ff49 	bl	800087c <__aeabi_ddiv>
 800b9ea:	f04f 0a01 	mov.w	sl, #1
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	460d      	mov	r5, r1
 800b9f2:	e764      	b.n	800b8be <atan+0xce>
 800b9f4:	4b49      	ldr	r3, [pc, #292]	; (800bb1c <atan+0x32c>)
 800b9f6:	429e      	cmp	r6, r3
 800b9f8:	da1d      	bge.n	800ba36 <atan+0x246>
 800b9fa:	ee10 0a10 	vmov	r0, s0
 800b9fe:	4b48      	ldr	r3, [pc, #288]	; (800bb20 <atan+0x330>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	4629      	mov	r1, r5
 800ba04:	f7f4 fc58 	bl	80002b8 <__aeabi_dsub>
 800ba08:	4b45      	ldr	r3, [pc, #276]	; (800bb20 <atan+0x330>)
 800ba0a:	4606      	mov	r6, r0
 800ba0c:	460f      	mov	r7, r1
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4620      	mov	r0, r4
 800ba12:	4629      	mov	r1, r5
 800ba14:	f7f4 fe08 	bl	8000628 <__aeabi_dmul>
 800ba18:	4b3e      	ldr	r3, [pc, #248]	; (800bb14 <atan+0x324>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f7f4 fc4e 	bl	80002bc <__adddf3>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	4630      	mov	r0, r6
 800ba26:	4639      	mov	r1, r7
 800ba28:	f7f4 ff28 	bl	800087c <__aeabi_ddiv>
 800ba2c:	f04f 0a02 	mov.w	sl, #2
 800ba30:	4604      	mov	r4, r0
 800ba32:	460d      	mov	r5, r1
 800ba34:	e743      	b.n	800b8be <atan+0xce>
 800ba36:	462b      	mov	r3, r5
 800ba38:	ee10 2a10 	vmov	r2, s0
 800ba3c:	4939      	ldr	r1, [pc, #228]	; (800bb24 <atan+0x334>)
 800ba3e:	2000      	movs	r0, #0
 800ba40:	f7f4 ff1c 	bl	800087c <__aeabi_ddiv>
 800ba44:	f04f 0a03 	mov.w	sl, #3
 800ba48:	4604      	mov	r4, r0
 800ba4a:	460d      	mov	r5, r1
 800ba4c:	e737      	b.n	800b8be <atan+0xce>
 800ba4e:	4b36      	ldr	r3, [pc, #216]	; (800bb28 <atan+0x338>)
 800ba50:	4e36      	ldr	r6, [pc, #216]	; (800bb2c <atan+0x33c>)
 800ba52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ba56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ba5a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ba5e:	f7f4 fc2b 	bl	80002b8 <__aeabi_dsub>
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	f7f4 fc27 	bl	80002b8 <__aeabi_dsub>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ba72:	f7f4 fc21 	bl	80002b8 <__aeabi_dsub>
 800ba76:	f1bb 0f00 	cmp.w	fp, #0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	f6bf aed6 	bge.w	800b82e <atan+0x3e>
 800ba82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba86:	461d      	mov	r5, r3
 800ba88:	e6d1      	b.n	800b82e <atan+0x3e>
 800ba8a:	a51d      	add	r5, pc, #116	; (adr r5, 800bb00 <atan+0x310>)
 800ba8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba90:	e6cd      	b.n	800b82e <atan+0x3e>
 800ba92:	bf00      	nop
 800ba94:	f3af 8000 	nop.w
 800ba98:	54442d18 	.word	0x54442d18
 800ba9c:	bff921fb 	.word	0xbff921fb
 800baa0:	8800759c 	.word	0x8800759c
 800baa4:	7e37e43c 	.word	0x7e37e43c
 800baa8:	e322da11 	.word	0xe322da11
 800baac:	3f90ad3a 	.word	0x3f90ad3a
 800bab0:	24760deb 	.word	0x24760deb
 800bab4:	3fa97b4b 	.word	0x3fa97b4b
 800bab8:	a0d03d51 	.word	0xa0d03d51
 800babc:	3fb10d66 	.word	0x3fb10d66
 800bac0:	c54c206e 	.word	0xc54c206e
 800bac4:	3fb745cd 	.word	0x3fb745cd
 800bac8:	920083ff 	.word	0x920083ff
 800bacc:	3fc24924 	.word	0x3fc24924
 800bad0:	5555550d 	.word	0x5555550d
 800bad4:	3fd55555 	.word	0x3fd55555
 800bad8:	2c6a6c2f 	.word	0x2c6a6c2f
 800badc:	bfa2b444 	.word	0xbfa2b444
 800bae0:	52defd9a 	.word	0x52defd9a
 800bae4:	3fadde2d 	.word	0x3fadde2d
 800bae8:	af749a6d 	.word	0xaf749a6d
 800baec:	3fb3b0f2 	.word	0x3fb3b0f2
 800baf0:	fe231671 	.word	0xfe231671
 800baf4:	3fbc71c6 	.word	0x3fbc71c6
 800baf8:	9998ebc4 	.word	0x9998ebc4
 800bafc:	3fc99999 	.word	0x3fc99999
 800bb00:	54442d18 	.word	0x54442d18
 800bb04:	3ff921fb 	.word	0x3ff921fb
 800bb08:	440fffff 	.word	0x440fffff
 800bb0c:	7ff00000 	.word	0x7ff00000
 800bb10:	3fdbffff 	.word	0x3fdbffff
 800bb14:	3ff00000 	.word	0x3ff00000
 800bb18:	3ff2ffff 	.word	0x3ff2ffff
 800bb1c:	40038000 	.word	0x40038000
 800bb20:	3ff80000 	.word	0x3ff80000
 800bb24:	bff00000 	.word	0xbff00000
 800bb28:	0800cdc0 	.word	0x0800cdc0
 800bb2c:	0800cda0 	.word	0x0800cda0

0800bb30 <fabs>:
 800bb30:	ec51 0b10 	vmov	r0, r1, d0
 800bb34:	ee10 2a10 	vmov	r2, s0
 800bb38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb3c:	ec43 2b10 	vmov	d0, r2, r3
 800bb40:	4770      	bx	lr

0800bb42 <atan2>:
 800bb42:	f000 b8cd 	b.w	800bce0 <__ieee754_atan2>
	...

0800bb48 <sqrt>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	ed2d 8b02 	vpush	{d8}
 800bb4e:	ec55 4b10 	vmov	r4, r5, d0
 800bb52:	f000 f98f 	bl	800be74 <__ieee754_sqrt>
 800bb56:	4b15      	ldr	r3, [pc, #84]	; (800bbac <sqrt+0x64>)
 800bb58:	eeb0 8a40 	vmov.f32	s16, s0
 800bb5c:	eef0 8a60 	vmov.f32	s17, s1
 800bb60:	f993 3000 	ldrsb.w	r3, [r3]
 800bb64:	3301      	adds	r3, #1
 800bb66:	d019      	beq.n	800bb9c <sqrt+0x54>
 800bb68:	4622      	mov	r2, r4
 800bb6a:	462b      	mov	r3, r5
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7f4 fff4 	bl	8000b5c <__aeabi_dcmpun>
 800bb74:	b990      	cbnz	r0, 800bb9c <sqrt+0x54>
 800bb76:	2200      	movs	r2, #0
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7f4 ffc5 	bl	8000b0c <__aeabi_dcmplt>
 800bb82:	b158      	cbz	r0, 800bb9c <sqrt+0x54>
 800bb84:	f7fc ff6c 	bl	8008a60 <__errno>
 800bb88:	2321      	movs	r3, #33	; 0x21
 800bb8a:	6003      	str	r3, [r0, #0]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2300      	movs	r3, #0
 800bb90:	4610      	mov	r0, r2
 800bb92:	4619      	mov	r1, r3
 800bb94:	f7f4 fe72 	bl	800087c <__aeabi_ddiv>
 800bb98:	ec41 0b18 	vmov	d8, r0, r1
 800bb9c:	eeb0 0a48 	vmov.f32	s0, s16
 800bba0:	eef0 0a68 	vmov.f32	s1, s17
 800bba4:	ecbd 8b02 	vpop	{d8}
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	20000274 	.word	0x20000274

0800bbb0 <powf>:
 800bbb0:	b508      	push	{r3, lr}
 800bbb2:	ed2d 8b04 	vpush	{d8-d9}
 800bbb6:	eeb0 9a40 	vmov.f32	s18, s0
 800bbba:	eef0 8a60 	vmov.f32	s17, s1
 800bbbe:	f000 fa0d 	bl	800bfdc <__ieee754_powf>
 800bbc2:	4b43      	ldr	r3, [pc, #268]	; (800bcd0 <powf+0x120>)
 800bbc4:	f993 3000 	ldrsb.w	r3, [r3]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	eeb0 8a40 	vmov.f32	s16, s0
 800bbce:	d012      	beq.n	800bbf6 <powf+0x46>
 800bbd0:	eef4 8a68 	vcmp.f32	s17, s17
 800bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd8:	d60d      	bvs.n	800bbf6 <powf+0x46>
 800bbda:	eeb4 9a49 	vcmp.f32	s18, s18
 800bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe2:	d70d      	bvc.n	800bc00 <powf+0x50>
 800bbe4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bbf0:	bf08      	it	eq
 800bbf2:	eeb0 8a67 	vmoveq.f32	s16, s15
 800bbf6:	eeb0 0a48 	vmov.f32	s0, s16
 800bbfa:	ecbd 8b04 	vpop	{d8-d9}
 800bbfe:	bd08      	pop	{r3, pc}
 800bc00:	eddf 9a34 	vldr	s19, [pc, #208]	; 800bcd4 <powf+0x124>
 800bc04:	eeb4 9a69 	vcmp.f32	s18, s19
 800bc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0c:	d116      	bne.n	800bc3c <powf+0x8c>
 800bc0e:	eef4 8a69 	vcmp.f32	s17, s19
 800bc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc16:	d057      	beq.n	800bcc8 <powf+0x118>
 800bc18:	eeb0 0a68 	vmov.f32	s0, s17
 800bc1c:	f000 fca8 	bl	800c570 <finitef>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d0e8      	beq.n	800bbf6 <powf+0x46>
 800bc24:	eef4 8ae9 	vcmpe.f32	s17, s19
 800bc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2c:	d5e3      	bpl.n	800bbf6 <powf+0x46>
 800bc2e:	f7fc ff17 	bl	8008a60 <__errno>
 800bc32:	2321      	movs	r3, #33	; 0x21
 800bc34:	6003      	str	r3, [r0, #0]
 800bc36:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800bcd8 <powf+0x128>
 800bc3a:	e7dc      	b.n	800bbf6 <powf+0x46>
 800bc3c:	f000 fc98 	bl	800c570 <finitef>
 800bc40:	bb50      	cbnz	r0, 800bc98 <powf+0xe8>
 800bc42:	eeb0 0a49 	vmov.f32	s0, s18
 800bc46:	f000 fc93 	bl	800c570 <finitef>
 800bc4a:	b328      	cbz	r0, 800bc98 <powf+0xe8>
 800bc4c:	eeb0 0a68 	vmov.f32	s0, s17
 800bc50:	f000 fc8e 	bl	800c570 <finitef>
 800bc54:	b300      	cbz	r0, 800bc98 <powf+0xe8>
 800bc56:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5e:	d706      	bvc.n	800bc6e <powf+0xbe>
 800bc60:	f7fc fefe 	bl	8008a60 <__errno>
 800bc64:	2321      	movs	r3, #33	; 0x21
 800bc66:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800bc6a:	6003      	str	r3, [r0, #0]
 800bc6c:	e7c3      	b.n	800bbf6 <powf+0x46>
 800bc6e:	f7fc fef7 	bl	8008a60 <__errno>
 800bc72:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800bc76:	2322      	movs	r3, #34	; 0x22
 800bc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7c:	6003      	str	r3, [r0, #0]
 800bc7e:	d508      	bpl.n	800bc92 <powf+0xe2>
 800bc80:	eeb0 0a68 	vmov.f32	s0, s17
 800bc84:	f000 fc88 	bl	800c598 <rintf>
 800bc88:	eeb4 0a68 	vcmp.f32	s0, s17
 800bc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc90:	d1d1      	bne.n	800bc36 <powf+0x86>
 800bc92:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800bcdc <powf+0x12c>
 800bc96:	e7ae      	b.n	800bbf6 <powf+0x46>
 800bc98:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca0:	d1a9      	bne.n	800bbf6 <powf+0x46>
 800bca2:	eeb0 0a49 	vmov.f32	s0, s18
 800bca6:	f000 fc63 	bl	800c570 <finitef>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0a3      	beq.n	800bbf6 <powf+0x46>
 800bcae:	eeb0 0a68 	vmov.f32	s0, s17
 800bcb2:	f000 fc5d 	bl	800c570 <finitef>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d09d      	beq.n	800bbf6 <powf+0x46>
 800bcba:	f7fc fed1 	bl	8008a60 <__errno>
 800bcbe:	2322      	movs	r3, #34	; 0x22
 800bcc0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800bcd4 <powf+0x124>
 800bcc4:	6003      	str	r3, [r0, #0]
 800bcc6:	e796      	b.n	800bbf6 <powf+0x46>
 800bcc8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800bccc:	e793      	b.n	800bbf6 <powf+0x46>
 800bcce:	bf00      	nop
 800bcd0:	20000274 	.word	0x20000274
 800bcd4:	00000000 	.word	0x00000000
 800bcd8:	ff800000 	.word	0xff800000
 800bcdc:	7f800000 	.word	0x7f800000

0800bce0 <__ieee754_atan2>:
 800bce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	ec57 6b11 	vmov	r6, r7, d1
 800bce8:	4273      	negs	r3, r6
 800bcea:	f8df e184 	ldr.w	lr, [pc, #388]	; 800be70 <__ieee754_atan2+0x190>
 800bcee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bcf2:	4333      	orrs	r3, r6
 800bcf4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bcf8:	4573      	cmp	r3, lr
 800bcfa:	ec51 0b10 	vmov	r0, r1, d0
 800bcfe:	ee11 8a10 	vmov	r8, s2
 800bd02:	d80a      	bhi.n	800bd1a <__ieee754_atan2+0x3a>
 800bd04:	4244      	negs	r4, r0
 800bd06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd0a:	4304      	orrs	r4, r0
 800bd0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bd10:	4574      	cmp	r4, lr
 800bd12:	ee10 9a10 	vmov	r9, s0
 800bd16:	468c      	mov	ip, r1
 800bd18:	d907      	bls.n	800bd2a <__ieee754_atan2+0x4a>
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	f7f4 facd 	bl	80002bc <__adddf3>
 800bd22:	ec41 0b10 	vmov	d0, r0, r1
 800bd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bd2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bd32:	4334      	orrs	r4, r6
 800bd34:	d103      	bne.n	800bd3e <__ieee754_atan2+0x5e>
 800bd36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd3a:	f7ff bd59 	b.w	800b7f0 <atan>
 800bd3e:	17bc      	asrs	r4, r7, #30
 800bd40:	f004 0402 	and.w	r4, r4, #2
 800bd44:	ea53 0909 	orrs.w	r9, r3, r9
 800bd48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bd4c:	d107      	bne.n	800bd5e <__ieee754_atan2+0x7e>
 800bd4e:	2c02      	cmp	r4, #2
 800bd50:	d060      	beq.n	800be14 <__ieee754_atan2+0x134>
 800bd52:	2c03      	cmp	r4, #3
 800bd54:	d1e5      	bne.n	800bd22 <__ieee754_atan2+0x42>
 800bd56:	a142      	add	r1, pc, #264	; (adr r1, 800be60 <__ieee754_atan2+0x180>)
 800bd58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd5c:	e7e1      	b.n	800bd22 <__ieee754_atan2+0x42>
 800bd5e:	ea52 0808 	orrs.w	r8, r2, r8
 800bd62:	d106      	bne.n	800bd72 <__ieee754_atan2+0x92>
 800bd64:	f1bc 0f00 	cmp.w	ip, #0
 800bd68:	da5f      	bge.n	800be2a <__ieee754_atan2+0x14a>
 800bd6a:	a13f      	add	r1, pc, #252	; (adr r1, 800be68 <__ieee754_atan2+0x188>)
 800bd6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd70:	e7d7      	b.n	800bd22 <__ieee754_atan2+0x42>
 800bd72:	4572      	cmp	r2, lr
 800bd74:	d10f      	bne.n	800bd96 <__ieee754_atan2+0xb6>
 800bd76:	4293      	cmp	r3, r2
 800bd78:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd7c:	d107      	bne.n	800bd8e <__ieee754_atan2+0xae>
 800bd7e:	2c02      	cmp	r4, #2
 800bd80:	d84c      	bhi.n	800be1c <__ieee754_atan2+0x13c>
 800bd82:	4b35      	ldr	r3, [pc, #212]	; (800be58 <__ieee754_atan2+0x178>)
 800bd84:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bd88:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bd8c:	e7c9      	b.n	800bd22 <__ieee754_atan2+0x42>
 800bd8e:	2c02      	cmp	r4, #2
 800bd90:	d848      	bhi.n	800be24 <__ieee754_atan2+0x144>
 800bd92:	4b32      	ldr	r3, [pc, #200]	; (800be5c <__ieee754_atan2+0x17c>)
 800bd94:	e7f6      	b.n	800bd84 <__ieee754_atan2+0xa4>
 800bd96:	4573      	cmp	r3, lr
 800bd98:	d0e4      	beq.n	800bd64 <__ieee754_atan2+0x84>
 800bd9a:	1a9b      	subs	r3, r3, r2
 800bd9c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bda0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bda4:	da1e      	bge.n	800bde4 <__ieee754_atan2+0x104>
 800bda6:	2f00      	cmp	r7, #0
 800bda8:	da01      	bge.n	800bdae <__ieee754_atan2+0xce>
 800bdaa:	323c      	adds	r2, #60	; 0x3c
 800bdac:	db1e      	blt.n	800bdec <__ieee754_atan2+0x10c>
 800bdae:	4632      	mov	r2, r6
 800bdb0:	463b      	mov	r3, r7
 800bdb2:	f7f4 fd63 	bl	800087c <__aeabi_ddiv>
 800bdb6:	ec41 0b10 	vmov	d0, r0, r1
 800bdba:	f7ff feb9 	bl	800bb30 <fabs>
 800bdbe:	f7ff fd17 	bl	800b7f0 <atan>
 800bdc2:	ec51 0b10 	vmov	r0, r1, d0
 800bdc6:	2c01      	cmp	r4, #1
 800bdc8:	d013      	beq.n	800bdf2 <__ieee754_atan2+0x112>
 800bdca:	2c02      	cmp	r4, #2
 800bdcc:	d015      	beq.n	800bdfa <__ieee754_atan2+0x11a>
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	d0a7      	beq.n	800bd22 <__ieee754_atan2+0x42>
 800bdd2:	a319      	add	r3, pc, #100	; (adr r3, 800be38 <__ieee754_atan2+0x158>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa6e 	bl	80002b8 <__aeabi_dsub>
 800bddc:	a318      	add	r3, pc, #96	; (adr r3, 800be40 <__ieee754_atan2+0x160>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	e014      	b.n	800be0e <__ieee754_atan2+0x12e>
 800bde4:	a118      	add	r1, pc, #96	; (adr r1, 800be48 <__ieee754_atan2+0x168>)
 800bde6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdea:	e7ec      	b.n	800bdc6 <__ieee754_atan2+0xe6>
 800bdec:	2000      	movs	r0, #0
 800bdee:	2100      	movs	r1, #0
 800bdf0:	e7e9      	b.n	800bdc6 <__ieee754_atan2+0xe6>
 800bdf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	e793      	b.n	800bd22 <__ieee754_atan2+0x42>
 800bdfa:	a30f      	add	r3, pc, #60	; (adr r3, 800be38 <__ieee754_atan2+0x158>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	f7f4 fa5a 	bl	80002b8 <__aeabi_dsub>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	a10d      	add	r1, pc, #52	; (adr r1, 800be40 <__ieee754_atan2+0x160>)
 800be0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be0e:	f7f4 fa53 	bl	80002b8 <__aeabi_dsub>
 800be12:	e786      	b.n	800bd22 <__ieee754_atan2+0x42>
 800be14:	a10a      	add	r1, pc, #40	; (adr r1, 800be40 <__ieee754_atan2+0x160>)
 800be16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be1a:	e782      	b.n	800bd22 <__ieee754_atan2+0x42>
 800be1c:	a10c      	add	r1, pc, #48	; (adr r1, 800be50 <__ieee754_atan2+0x170>)
 800be1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be22:	e77e      	b.n	800bd22 <__ieee754_atan2+0x42>
 800be24:	2000      	movs	r0, #0
 800be26:	2100      	movs	r1, #0
 800be28:	e77b      	b.n	800bd22 <__ieee754_atan2+0x42>
 800be2a:	a107      	add	r1, pc, #28	; (adr r1, 800be48 <__ieee754_atan2+0x168>)
 800be2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be30:	e777      	b.n	800bd22 <__ieee754_atan2+0x42>
 800be32:	bf00      	nop
 800be34:	f3af 8000 	nop.w
 800be38:	33145c07 	.word	0x33145c07
 800be3c:	3ca1a626 	.word	0x3ca1a626
 800be40:	54442d18 	.word	0x54442d18
 800be44:	400921fb 	.word	0x400921fb
 800be48:	54442d18 	.word	0x54442d18
 800be4c:	3ff921fb 	.word	0x3ff921fb
 800be50:	54442d18 	.word	0x54442d18
 800be54:	3fe921fb 	.word	0x3fe921fb
 800be58:	0800cde0 	.word	0x0800cde0
 800be5c:	0800cdf8 	.word	0x0800cdf8
 800be60:	54442d18 	.word	0x54442d18
 800be64:	c00921fb 	.word	0xc00921fb
 800be68:	54442d18 	.word	0x54442d18
 800be6c:	bff921fb 	.word	0xbff921fb
 800be70:	7ff00000 	.word	0x7ff00000

0800be74 <__ieee754_sqrt>:
 800be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	ec55 4b10 	vmov	r4, r5, d0
 800be7c:	4e56      	ldr	r6, [pc, #344]	; (800bfd8 <__ieee754_sqrt+0x164>)
 800be7e:	43ae      	bics	r6, r5
 800be80:	ee10 0a10 	vmov	r0, s0
 800be84:	ee10 3a10 	vmov	r3, s0
 800be88:	4629      	mov	r1, r5
 800be8a:	462a      	mov	r2, r5
 800be8c:	d110      	bne.n	800beb0 <__ieee754_sqrt+0x3c>
 800be8e:	ee10 2a10 	vmov	r2, s0
 800be92:	462b      	mov	r3, r5
 800be94:	f7f4 fbc8 	bl	8000628 <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4620      	mov	r0, r4
 800be9e:	4629      	mov	r1, r5
 800bea0:	f7f4 fa0c 	bl	80002bc <__adddf3>
 800bea4:	4604      	mov	r4, r0
 800bea6:	460d      	mov	r5, r1
 800bea8:	ec45 4b10 	vmov	d0, r4, r5
 800beac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	dc10      	bgt.n	800bed6 <__ieee754_sqrt+0x62>
 800beb4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800beb8:	4330      	orrs	r0, r6
 800beba:	d0f5      	beq.n	800bea8 <__ieee754_sqrt+0x34>
 800bebc:	b15d      	cbz	r5, 800bed6 <__ieee754_sqrt+0x62>
 800bebe:	ee10 2a10 	vmov	r2, s0
 800bec2:	462b      	mov	r3, r5
 800bec4:	ee10 0a10 	vmov	r0, s0
 800bec8:	f7f4 f9f6 	bl	80002b8 <__aeabi_dsub>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	f7f4 fcd4 	bl	800087c <__aeabi_ddiv>
 800bed4:	e7e6      	b.n	800bea4 <__ieee754_sqrt+0x30>
 800bed6:	1509      	asrs	r1, r1, #20
 800bed8:	d076      	beq.n	800bfc8 <__ieee754_sqrt+0x154>
 800beda:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bede:	07ce      	lsls	r6, r1, #31
 800bee0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bee4:	bf5e      	ittt	pl
 800bee6:	0fda      	lsrpl	r2, r3, #31
 800bee8:	005b      	lslpl	r3, r3, #1
 800beea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800beee:	0fda      	lsrs	r2, r3, #31
 800bef0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bef4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bef8:	2000      	movs	r0, #0
 800befa:	106d      	asrs	r5, r5, #1
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	f04f 0e16 	mov.w	lr, #22
 800bf02:	4684      	mov	ip, r0
 800bf04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf08:	eb0c 0401 	add.w	r4, ip, r1
 800bf0c:	4294      	cmp	r4, r2
 800bf0e:	bfde      	ittt	le
 800bf10:	1b12      	suble	r2, r2, r4
 800bf12:	eb04 0c01 	addle.w	ip, r4, r1
 800bf16:	1840      	addle	r0, r0, r1
 800bf18:	0052      	lsls	r2, r2, #1
 800bf1a:	f1be 0e01 	subs.w	lr, lr, #1
 800bf1e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bf22:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bf26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf2a:	d1ed      	bne.n	800bf08 <__ieee754_sqrt+0x94>
 800bf2c:	4671      	mov	r1, lr
 800bf2e:	2720      	movs	r7, #32
 800bf30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bf34:	4562      	cmp	r2, ip
 800bf36:	eb04 060e 	add.w	r6, r4, lr
 800bf3a:	dc02      	bgt.n	800bf42 <__ieee754_sqrt+0xce>
 800bf3c:	d113      	bne.n	800bf66 <__ieee754_sqrt+0xf2>
 800bf3e:	429e      	cmp	r6, r3
 800bf40:	d811      	bhi.n	800bf66 <__ieee754_sqrt+0xf2>
 800bf42:	2e00      	cmp	r6, #0
 800bf44:	eb06 0e04 	add.w	lr, r6, r4
 800bf48:	da43      	bge.n	800bfd2 <__ieee754_sqrt+0x15e>
 800bf4a:	f1be 0f00 	cmp.w	lr, #0
 800bf4e:	db40      	blt.n	800bfd2 <__ieee754_sqrt+0x15e>
 800bf50:	f10c 0801 	add.w	r8, ip, #1
 800bf54:	eba2 020c 	sub.w	r2, r2, ip
 800bf58:	429e      	cmp	r6, r3
 800bf5a:	bf88      	it	hi
 800bf5c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bf60:	1b9b      	subs	r3, r3, r6
 800bf62:	4421      	add	r1, r4
 800bf64:	46c4      	mov	ip, r8
 800bf66:	0052      	lsls	r2, r2, #1
 800bf68:	3f01      	subs	r7, #1
 800bf6a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bf6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bf72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf76:	d1dd      	bne.n	800bf34 <__ieee754_sqrt+0xc0>
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	d006      	beq.n	800bf8a <__ieee754_sqrt+0x116>
 800bf7c:	1c4c      	adds	r4, r1, #1
 800bf7e:	bf13      	iteet	ne
 800bf80:	3101      	addne	r1, #1
 800bf82:	3001      	addeq	r0, #1
 800bf84:	4639      	moveq	r1, r7
 800bf86:	f021 0101 	bicne.w	r1, r1, #1
 800bf8a:	1043      	asrs	r3, r0, #1
 800bf8c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bf90:	0849      	lsrs	r1, r1, #1
 800bf92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bf96:	07c2      	lsls	r2, r0, #31
 800bf98:	bf48      	it	mi
 800bf9a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bf9e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	463d      	mov	r5, r7
 800bfa6:	e77f      	b.n	800bea8 <__ieee754_sqrt+0x34>
 800bfa8:	0ada      	lsrs	r2, r3, #11
 800bfaa:	3815      	subs	r0, #21
 800bfac:	055b      	lsls	r3, r3, #21
 800bfae:	2a00      	cmp	r2, #0
 800bfb0:	d0fa      	beq.n	800bfa8 <__ieee754_sqrt+0x134>
 800bfb2:	02d7      	lsls	r7, r2, #11
 800bfb4:	d50a      	bpl.n	800bfcc <__ieee754_sqrt+0x158>
 800bfb6:	f1c1 0420 	rsb	r4, r1, #32
 800bfba:	fa23 f404 	lsr.w	r4, r3, r4
 800bfbe:	1e4d      	subs	r5, r1, #1
 800bfc0:	408b      	lsls	r3, r1
 800bfc2:	4322      	orrs	r2, r4
 800bfc4:	1b41      	subs	r1, r0, r5
 800bfc6:	e788      	b.n	800beda <__ieee754_sqrt+0x66>
 800bfc8:	4608      	mov	r0, r1
 800bfca:	e7f0      	b.n	800bfae <__ieee754_sqrt+0x13a>
 800bfcc:	0052      	lsls	r2, r2, #1
 800bfce:	3101      	adds	r1, #1
 800bfd0:	e7ef      	b.n	800bfb2 <__ieee754_sqrt+0x13e>
 800bfd2:	46e0      	mov	r8, ip
 800bfd4:	e7be      	b.n	800bf54 <__ieee754_sqrt+0xe0>
 800bfd6:	bf00      	nop
 800bfd8:	7ff00000 	.word	0x7ff00000

0800bfdc <__ieee754_powf>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	ee10 5a90 	vmov	r5, s1
 800bfe4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800bfe8:	ed2d 8b02 	vpush	{d8}
 800bfec:	eeb0 8a40 	vmov.f32	s16, s0
 800bff0:	eef0 8a60 	vmov.f32	s17, s1
 800bff4:	f000 8291 	beq.w	800c51a <__ieee754_powf+0x53e>
 800bff8:	ee10 8a10 	vmov	r8, s0
 800bffc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c000:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c004:	dc06      	bgt.n	800c014 <__ieee754_powf+0x38>
 800c006:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c00a:	dd0a      	ble.n	800c022 <__ieee754_powf+0x46>
 800c00c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c010:	f000 8283 	beq.w	800c51a <__ieee754_powf+0x53e>
 800c014:	ecbd 8b02 	vpop	{d8}
 800c018:	48d8      	ldr	r0, [pc, #864]	; (800c37c <__ieee754_powf+0x3a0>)
 800c01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c01e:	f000 bab5 	b.w	800c58c <nanf>
 800c022:	f1b8 0f00 	cmp.w	r8, #0
 800c026:	da1f      	bge.n	800c068 <__ieee754_powf+0x8c>
 800c028:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800c02c:	da2e      	bge.n	800c08c <__ieee754_powf+0xb0>
 800c02e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c032:	f2c0 827b 	blt.w	800c52c <__ieee754_powf+0x550>
 800c036:	15fb      	asrs	r3, r7, #23
 800c038:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c03c:	fa47 f603 	asr.w	r6, r7, r3
 800c040:	fa06 f303 	lsl.w	r3, r6, r3
 800c044:	42bb      	cmp	r3, r7
 800c046:	f040 8271 	bne.w	800c52c <__ieee754_powf+0x550>
 800c04a:	f006 0601 	and.w	r6, r6, #1
 800c04e:	f1c6 0602 	rsb	r6, r6, #2
 800c052:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c056:	d120      	bne.n	800c09a <__ieee754_powf+0xbe>
 800c058:	2d00      	cmp	r5, #0
 800c05a:	f280 8264 	bge.w	800c526 <__ieee754_powf+0x54a>
 800c05e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c062:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c066:	e00d      	b.n	800c084 <__ieee754_powf+0xa8>
 800c068:	2600      	movs	r6, #0
 800c06a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c06e:	d1f0      	bne.n	800c052 <__ieee754_powf+0x76>
 800c070:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c074:	f000 8251 	beq.w	800c51a <__ieee754_powf+0x53e>
 800c078:	dd0a      	ble.n	800c090 <__ieee754_powf+0xb4>
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	f280 8250 	bge.w	800c520 <__ieee754_powf+0x544>
 800c080:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800c380 <__ieee754_powf+0x3a4>
 800c084:	ecbd 8b02 	vpop	{d8}
 800c088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08c:	2602      	movs	r6, #2
 800c08e:	e7ec      	b.n	800c06a <__ieee754_powf+0x8e>
 800c090:	2d00      	cmp	r5, #0
 800c092:	daf5      	bge.n	800c080 <__ieee754_powf+0xa4>
 800c094:	eeb1 0a68 	vneg.f32	s0, s17
 800c098:	e7f4      	b.n	800c084 <__ieee754_powf+0xa8>
 800c09a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800c09e:	d102      	bne.n	800c0a6 <__ieee754_powf+0xca>
 800c0a0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c0a4:	e7ee      	b.n	800c084 <__ieee754_powf+0xa8>
 800c0a6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800c0aa:	eeb0 0a48 	vmov.f32	s0, s16
 800c0ae:	d108      	bne.n	800c0c2 <__ieee754_powf+0xe6>
 800c0b0:	f1b8 0f00 	cmp.w	r8, #0
 800c0b4:	db05      	blt.n	800c0c2 <__ieee754_powf+0xe6>
 800c0b6:	ecbd 8b02 	vpop	{d8}
 800c0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0be:	f000 ba4d 	b.w	800c55c <__ieee754_sqrtf>
 800c0c2:	f000 fa4e 	bl	800c562 <fabsf>
 800c0c6:	b124      	cbz	r4, 800c0d2 <__ieee754_powf+0xf6>
 800c0c8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800c0cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c0d0:	d117      	bne.n	800c102 <__ieee754_powf+0x126>
 800c0d2:	2d00      	cmp	r5, #0
 800c0d4:	bfbc      	itt	lt
 800c0d6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c0da:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c0de:	f1b8 0f00 	cmp.w	r8, #0
 800c0e2:	dacf      	bge.n	800c084 <__ieee754_powf+0xa8>
 800c0e4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800c0e8:	ea54 0306 	orrs.w	r3, r4, r6
 800c0ec:	d104      	bne.n	800c0f8 <__ieee754_powf+0x11c>
 800c0ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c0f2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c0f6:	e7c5      	b.n	800c084 <__ieee754_powf+0xa8>
 800c0f8:	2e01      	cmp	r6, #1
 800c0fa:	d1c3      	bne.n	800c084 <__ieee754_powf+0xa8>
 800c0fc:	eeb1 0a40 	vneg.f32	s0, s0
 800c100:	e7c0      	b.n	800c084 <__ieee754_powf+0xa8>
 800c102:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800c106:	3801      	subs	r0, #1
 800c108:	ea56 0300 	orrs.w	r3, r6, r0
 800c10c:	d104      	bne.n	800c118 <__ieee754_powf+0x13c>
 800c10e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c112:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c116:	e7b5      	b.n	800c084 <__ieee754_powf+0xa8>
 800c118:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800c11c:	dd6b      	ble.n	800c1f6 <__ieee754_powf+0x21a>
 800c11e:	4b99      	ldr	r3, [pc, #612]	; (800c384 <__ieee754_powf+0x3a8>)
 800c120:	429c      	cmp	r4, r3
 800c122:	dc06      	bgt.n	800c132 <__ieee754_powf+0x156>
 800c124:	2d00      	cmp	r5, #0
 800c126:	daab      	bge.n	800c080 <__ieee754_powf+0xa4>
 800c128:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800c388 <__ieee754_powf+0x3ac>
 800c12c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c130:	e7a8      	b.n	800c084 <__ieee754_powf+0xa8>
 800c132:	4b96      	ldr	r3, [pc, #600]	; (800c38c <__ieee754_powf+0x3b0>)
 800c134:	429c      	cmp	r4, r3
 800c136:	dd02      	ble.n	800c13e <__ieee754_powf+0x162>
 800c138:	2d00      	cmp	r5, #0
 800c13a:	dcf5      	bgt.n	800c128 <__ieee754_powf+0x14c>
 800c13c:	e7a0      	b.n	800c080 <__ieee754_powf+0xa4>
 800c13e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c142:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c146:	eddf 6a92 	vldr	s13, [pc, #584]	; 800c390 <__ieee754_powf+0x3b4>
 800c14a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c14e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c152:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c156:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c15a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c162:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800c394 <__ieee754_powf+0x3b8>
 800c166:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800c16a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800c398 <__ieee754_powf+0x3bc>
 800c16e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c172:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c39c <__ieee754_powf+0x3c0>
 800c176:	eef0 6a67 	vmov.f32	s13, s15
 800c17a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c17e:	ee16 3a90 	vmov	r3, s13
 800c182:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c186:	f023 030f 	bic.w	r3, r3, #15
 800c18a:	ee00 3a90 	vmov	s1, r3
 800c18e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800c192:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c196:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800c19a:	f025 050f 	bic.w	r5, r5, #15
 800c19e:	ee07 5a10 	vmov	s14, r5
 800c1a2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c1a6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c1aa:	ee07 3a90 	vmov	s15, r3
 800c1ae:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c1b2:	3e01      	subs	r6, #1
 800c1b4:	ea56 0200 	orrs.w	r2, r6, r0
 800c1b8:	ee07 5a10 	vmov	s14, r5
 800c1bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c1c4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c1c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c1cc:	ee17 4a10 	vmov	r4, s14
 800c1d0:	bf08      	it	eq
 800c1d2:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c1dc:	f340 8184 	ble.w	800c4e8 <__ieee754_powf+0x50c>
 800c1e0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c1e4:	f340 80fc 	ble.w	800c3e0 <__ieee754_powf+0x404>
 800c1e8:	eddf 7a67 	vldr	s15, [pc, #412]	; 800c388 <__ieee754_powf+0x3ac>
 800c1ec:	ee28 0a27 	vmul.f32	s0, s16, s15
 800c1f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1f4:	e746      	b.n	800c084 <__ieee754_powf+0xa8>
 800c1f6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800c1fa:	bf01      	itttt	eq
 800c1fc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800c3a0 <__ieee754_powf+0x3c4>
 800c200:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c204:	f06f 0217 	mvneq.w	r2, #23
 800c208:	ee17 4a90 	vmoveq	r4, s15
 800c20c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800c210:	bf18      	it	ne
 800c212:	2200      	movne	r2, #0
 800c214:	3b7f      	subs	r3, #127	; 0x7f
 800c216:	4413      	add	r3, r2
 800c218:	4a62      	ldr	r2, [pc, #392]	; (800c3a4 <__ieee754_powf+0x3c8>)
 800c21a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800c21e:	4294      	cmp	r4, r2
 800c220:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800c224:	dd06      	ble.n	800c234 <__ieee754_powf+0x258>
 800c226:	4a60      	ldr	r2, [pc, #384]	; (800c3a8 <__ieee754_powf+0x3cc>)
 800c228:	4294      	cmp	r4, r2
 800c22a:	f340 80a4 	ble.w	800c376 <__ieee754_powf+0x39a>
 800c22e:	3301      	adds	r3, #1
 800c230:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c234:	2400      	movs	r4, #0
 800c236:	4a5d      	ldr	r2, [pc, #372]	; (800c3ac <__ieee754_powf+0x3d0>)
 800c238:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c23c:	ee07 1a90 	vmov	s15, r1
 800c240:	ed92 7a00 	vldr	s14, [r2]
 800c244:	4a5a      	ldr	r2, [pc, #360]	; (800c3b0 <__ieee754_powf+0x3d4>)
 800c246:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c24a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c24e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800c252:	1049      	asrs	r1, r1, #1
 800c254:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c258:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c25c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800c260:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800c264:	ee06 1a10 	vmov	s12, r1
 800c268:	ee65 4a26 	vmul.f32	s9, s10, s13
 800c26c:	ee36 7a47 	vsub.f32	s14, s12, s14
 800c270:	ee14 7a90 	vmov	r7, s9
 800c274:	4017      	ands	r7, r2
 800c276:	ee05 7a90 	vmov	s11, r7
 800c27a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800c27e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c282:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c3b4 <__ieee754_powf+0x3d8>
 800c286:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800c28a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c28e:	ee25 6a26 	vmul.f32	s12, s10, s13
 800c292:	eddf 6a49 	vldr	s13, [pc, #292]	; 800c3b8 <__ieee754_powf+0x3dc>
 800c296:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c29a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c3bc <__ieee754_powf+0x3e0>
 800c29e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c2a2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800c390 <__ieee754_powf+0x3b4>
 800c2a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2aa:	eddf 6a45 	vldr	s13, [pc, #276]	; 800c3c0 <__ieee754_powf+0x3e4>
 800c2ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c2b2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800c3c4 <__ieee754_powf+0x3e8>
 800c2b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2ba:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800c2be:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800c2c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c2c6:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c2ca:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800c2ce:	eef0 7a45 	vmov.f32	s15, s10
 800c2d2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800c2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2da:	ee17 1a90 	vmov	r1, s15
 800c2de:	4011      	ands	r1, r2
 800c2e0:	ee07 1a90 	vmov	s15, r1
 800c2e4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800c2e8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800c2ec:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c2f0:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c2f4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c2f8:	eeb0 6a47 	vmov.f32	s12, s14
 800c2fc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800c300:	ee16 1a10 	vmov	r1, s12
 800c304:	4011      	ands	r1, r2
 800c306:	ee06 1a90 	vmov	s13, r1
 800c30a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800c30e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c3c8 <__ieee754_powf+0x3ec>
 800c312:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c3cc <__ieee754_powf+0x3f0>
 800c316:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c31a:	ee06 1a10 	vmov	s12, r1
 800c31e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c322:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c3d0 <__ieee754_powf+0x3f4>
 800c326:	492b      	ldr	r1, [pc, #172]	; (800c3d4 <__ieee754_powf+0x3f8>)
 800c328:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c32c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c330:	edd1 7a00 	vldr	s15, [r1]
 800c334:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c338:	ee07 3a90 	vmov	s15, r3
 800c33c:	4b26      	ldr	r3, [pc, #152]	; (800c3d8 <__ieee754_powf+0x3fc>)
 800c33e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c342:	eef0 7a47 	vmov.f32	s15, s14
 800c346:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c34a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c34e:	edd4 0a00 	vldr	s1, [r4]
 800c352:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c35a:	ee17 3a90 	vmov	r3, s15
 800c35e:	4013      	ands	r3, r2
 800c360:	ee07 3a90 	vmov	s15, r3
 800c364:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c368:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800c36c:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c370:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c374:	e70f      	b.n	800c196 <__ieee754_powf+0x1ba>
 800c376:	2401      	movs	r4, #1
 800c378:	e75d      	b.n	800c236 <__ieee754_powf+0x25a>
 800c37a:	bf00      	nop
 800c37c:	0800cc30 	.word	0x0800cc30
 800c380:	00000000 	.word	0x00000000
 800c384:	3f7ffff7 	.word	0x3f7ffff7
 800c388:	7149f2ca 	.word	0x7149f2ca
 800c38c:	3f800007 	.word	0x3f800007
 800c390:	3eaaaaab 	.word	0x3eaaaaab
 800c394:	3fb8aa3b 	.word	0x3fb8aa3b
 800c398:	36eca570 	.word	0x36eca570
 800c39c:	3fb8aa00 	.word	0x3fb8aa00
 800c3a0:	4b800000 	.word	0x4b800000
 800c3a4:	001cc471 	.word	0x001cc471
 800c3a8:	005db3d6 	.word	0x005db3d6
 800c3ac:	0800ce10 	.word	0x0800ce10
 800c3b0:	fffff000 	.word	0xfffff000
 800c3b4:	3e6c3255 	.word	0x3e6c3255
 800c3b8:	3e53f142 	.word	0x3e53f142
 800c3bc:	3e8ba305 	.word	0x3e8ba305
 800c3c0:	3edb6db7 	.word	0x3edb6db7
 800c3c4:	3f19999a 	.word	0x3f19999a
 800c3c8:	3f76384f 	.word	0x3f76384f
 800c3cc:	3f763800 	.word	0x3f763800
 800c3d0:	369dc3a0 	.word	0x369dc3a0
 800c3d4:	0800ce20 	.word	0x0800ce20
 800c3d8:	0800ce18 	.word	0x0800ce18
 800c3dc:	3338aa3c 	.word	0x3338aa3c
 800c3e0:	f040 8092 	bne.w	800c508 <__ieee754_powf+0x52c>
 800c3e4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c3dc <__ieee754_powf+0x400>
 800c3e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c3ec:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c3f0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f8:	f73f aef6 	bgt.w	800c1e8 <__ieee754_powf+0x20c>
 800c3fc:	15db      	asrs	r3, r3, #23
 800c3fe:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c402:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c406:	4103      	asrs	r3, r0
 800c408:	4423      	add	r3, r4
 800c40a:	4949      	ldr	r1, [pc, #292]	; (800c530 <__ieee754_powf+0x554>)
 800c40c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c410:	3a7f      	subs	r2, #127	; 0x7f
 800c412:	4111      	asrs	r1, r2
 800c414:	ea23 0101 	bic.w	r1, r3, r1
 800c418:	ee07 1a10 	vmov	s14, r1
 800c41c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c424:	f1c2 0217 	rsb	r2, r2, #23
 800c428:	4110      	asrs	r0, r2
 800c42a:	2c00      	cmp	r4, #0
 800c42c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c430:	bfb8      	it	lt
 800c432:	4240      	neglt	r0, r0
 800c434:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c438:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800c534 <__ieee754_powf+0x558>
 800c43c:	ee17 3a10 	vmov	r3, s14
 800c440:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c444:	f023 030f 	bic.w	r3, r3, #15
 800c448:	ee07 3a10 	vmov	s14, r3
 800c44c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c450:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c454:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c538 <__ieee754_powf+0x55c>
 800c458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c460:	eddf 6a36 	vldr	s13, [pc, #216]	; 800c53c <__ieee754_powf+0x560>
 800c464:	eeb0 0a67 	vmov.f32	s0, s15
 800c468:	eea7 0a26 	vfma.f32	s0, s14, s13
 800c46c:	eeb0 6a40 	vmov.f32	s12, s0
 800c470:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c474:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c478:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c47c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c540 <__ieee754_powf+0x564>
 800c480:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800c544 <__ieee754_powf+0x568>
 800c484:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c488:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800c548 <__ieee754_powf+0x56c>
 800c48c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c490:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800c54c <__ieee754_powf+0x570>
 800c494:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c498:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800c550 <__ieee754_powf+0x574>
 800c49c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c4a0:	eeb0 6a40 	vmov.f32	s12, s0
 800c4a4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c4a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c4ac:	eeb0 7a46 	vmov.f32	s14, s12
 800c4b0:	ee77 6a66 	vsub.f32	s13, s14, s13
 800c4b4:	ee20 6a06 	vmul.f32	s12, s0, s12
 800c4b8:	eee0 7a27 	vfma.f32	s15, s0, s15
 800c4bc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c4c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c4c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c4cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c4d0:	ee10 3a10 	vmov	r3, s0
 800c4d4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c4d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4dc:	da1a      	bge.n	800c514 <__ieee754_powf+0x538>
 800c4de:	f000 f8b7 	bl	800c650 <scalbnf>
 800c4e2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c4e6:	e5cd      	b.n	800c084 <__ieee754_powf+0xa8>
 800c4e8:	4a1a      	ldr	r2, [pc, #104]	; (800c554 <__ieee754_powf+0x578>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	dd02      	ble.n	800c4f4 <__ieee754_powf+0x518>
 800c4ee:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800c558 <__ieee754_powf+0x57c>
 800c4f2:	e67b      	b.n	800c1ec <__ieee754_powf+0x210>
 800c4f4:	d108      	bne.n	800c508 <__ieee754_powf+0x52c>
 800c4f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4fa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c502:	f6ff af7b 	blt.w	800c3fc <__ieee754_powf+0x420>
 800c506:	e7f2      	b.n	800c4ee <__ieee754_powf+0x512>
 800c508:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c50c:	f73f af76 	bgt.w	800c3fc <__ieee754_powf+0x420>
 800c510:	2000      	movs	r0, #0
 800c512:	e78f      	b.n	800c434 <__ieee754_powf+0x458>
 800c514:	ee00 3a10 	vmov	s0, r3
 800c518:	e7e3      	b.n	800c4e2 <__ieee754_powf+0x506>
 800c51a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c51e:	e5b1      	b.n	800c084 <__ieee754_powf+0xa8>
 800c520:	eeb0 0a68 	vmov.f32	s0, s17
 800c524:	e5ae      	b.n	800c084 <__ieee754_powf+0xa8>
 800c526:	eeb0 0a48 	vmov.f32	s0, s16
 800c52a:	e5ab      	b.n	800c084 <__ieee754_powf+0xa8>
 800c52c:	2600      	movs	r6, #0
 800c52e:	e590      	b.n	800c052 <__ieee754_powf+0x76>
 800c530:	007fffff 	.word	0x007fffff
 800c534:	3f317218 	.word	0x3f317218
 800c538:	35bfbe8c 	.word	0x35bfbe8c
 800c53c:	3f317200 	.word	0x3f317200
 800c540:	3331bb4c 	.word	0x3331bb4c
 800c544:	b5ddea0e 	.word	0xb5ddea0e
 800c548:	388ab355 	.word	0x388ab355
 800c54c:	bb360b61 	.word	0xbb360b61
 800c550:	3e2aaaab 	.word	0x3e2aaaab
 800c554:	43160000 	.word	0x43160000
 800c558:	0da24260 	.word	0x0da24260

0800c55c <__ieee754_sqrtf>:
 800c55c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c560:	4770      	bx	lr

0800c562 <fabsf>:
 800c562:	ee10 3a10 	vmov	r3, s0
 800c566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c56a:	ee00 3a10 	vmov	s0, r3
 800c56e:	4770      	bx	lr

0800c570 <finitef>:
 800c570:	b082      	sub	sp, #8
 800c572:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c576:	9801      	ldr	r0, [sp, #4]
 800c578:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c57c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c580:	bfac      	ite	ge
 800c582:	2000      	movge	r0, #0
 800c584:	2001      	movlt	r0, #1
 800c586:	b002      	add	sp, #8
 800c588:	4770      	bx	lr
	...

0800c58c <nanf>:
 800c58c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c594 <nanf+0x8>
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	7fc00000 	.word	0x7fc00000

0800c598 <rintf>:
 800c598:	ee10 2a10 	vmov	r2, s0
 800c59c:	b513      	push	{r0, r1, r4, lr}
 800c59e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c5a2:	397f      	subs	r1, #127	; 0x7f
 800c5a4:	2916      	cmp	r1, #22
 800c5a6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c5aa:	dc47      	bgt.n	800c63c <rintf+0xa4>
 800c5ac:	b32b      	cbz	r3, 800c5fa <rintf+0x62>
 800c5ae:	2900      	cmp	r1, #0
 800c5b0:	ee10 3a10 	vmov	r3, s0
 800c5b4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800c5b8:	da21      	bge.n	800c5fe <rintf+0x66>
 800c5ba:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800c5be:	425b      	negs	r3, r3
 800c5c0:	4921      	ldr	r1, [pc, #132]	; (800c648 <rintf+0xb0>)
 800c5c2:	0a5b      	lsrs	r3, r3, #9
 800c5c4:	0d12      	lsrs	r2, r2, #20
 800c5c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5ca:	0512      	lsls	r2, r2, #20
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	edd1 6a00 	vldr	s13, [r1]
 800c5da:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800c5de:	ed8d 7a01 	vstr	s14, [sp, #4]
 800c5e2:	eddd 7a01 	vldr	s15, [sp, #4]
 800c5e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c5ea:	ee17 3a90 	vmov	r3, s15
 800c5ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5f2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800c5f6:	ee00 3a10 	vmov	s0, r3
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	4a13      	ldr	r2, [pc, #76]	; (800c64c <rintf+0xb4>)
 800c600:	410a      	asrs	r2, r1
 800c602:	4213      	tst	r3, r2
 800c604:	d0f9      	beq.n	800c5fa <rintf+0x62>
 800c606:	0854      	lsrs	r4, r2, #1
 800c608:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800c60c:	d006      	beq.n	800c61c <rintf+0x84>
 800c60e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c612:	ea23 0304 	bic.w	r3, r3, r4
 800c616:	fa42 f101 	asr.w	r1, r2, r1
 800c61a:	430b      	orrs	r3, r1
 800c61c:	4a0a      	ldr	r2, [pc, #40]	; (800c648 <rintf+0xb0>)
 800c61e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c622:	ed90 7a00 	vldr	s14, [r0]
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c62e:	edcd 7a01 	vstr	s15, [sp, #4]
 800c632:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c636:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c63a:	e7de      	b.n	800c5fa <rintf+0x62>
 800c63c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c640:	d3db      	bcc.n	800c5fa <rintf+0x62>
 800c642:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c646:	e7d8      	b.n	800c5fa <rintf+0x62>
 800c648:	0800ce28 	.word	0x0800ce28
 800c64c:	007fffff 	.word	0x007fffff

0800c650 <scalbnf>:
 800c650:	ee10 3a10 	vmov	r3, s0
 800c654:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c658:	d025      	beq.n	800c6a6 <scalbnf+0x56>
 800c65a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c65e:	d302      	bcc.n	800c666 <scalbnf+0x16>
 800c660:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c664:	4770      	bx	lr
 800c666:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c66a:	d122      	bne.n	800c6b2 <scalbnf+0x62>
 800c66c:	4b2a      	ldr	r3, [pc, #168]	; (800c718 <scalbnf+0xc8>)
 800c66e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c71c <scalbnf+0xcc>
 800c672:	4298      	cmp	r0, r3
 800c674:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c678:	db16      	blt.n	800c6a8 <scalbnf+0x58>
 800c67a:	ee10 3a10 	vmov	r3, s0
 800c67e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c682:	3a19      	subs	r2, #25
 800c684:	4402      	add	r2, r0
 800c686:	2afe      	cmp	r2, #254	; 0xfe
 800c688:	dd15      	ble.n	800c6b6 <scalbnf+0x66>
 800c68a:	ee10 3a10 	vmov	r3, s0
 800c68e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c720 <scalbnf+0xd0>
 800c692:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c724 <scalbnf+0xd4>
 800c696:	2b00      	cmp	r3, #0
 800c698:	eeb0 7a67 	vmov.f32	s14, s15
 800c69c:	bfb8      	it	lt
 800c69e:	eef0 7a66 	vmovlt.f32	s15, s13
 800c6a2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c6a6:	4770      	bx	lr
 800c6a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c728 <scalbnf+0xd8>
 800c6ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6b0:	4770      	bx	lr
 800c6b2:	0dd2      	lsrs	r2, r2, #23
 800c6b4:	e7e6      	b.n	800c684 <scalbnf+0x34>
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	dd06      	ble.n	800c6c8 <scalbnf+0x78>
 800c6ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c6c2:	ee00 3a10 	vmov	s0, r3
 800c6c6:	4770      	bx	lr
 800c6c8:	f112 0f16 	cmn.w	r2, #22
 800c6cc:	da1a      	bge.n	800c704 <scalbnf+0xb4>
 800c6ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6d2:	4298      	cmp	r0, r3
 800c6d4:	ee10 3a10 	vmov	r3, s0
 800c6d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6dc:	dd0a      	ble.n	800c6f4 <scalbnf+0xa4>
 800c6de:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c720 <scalbnf+0xd0>
 800c6e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c724 <scalbnf+0xd4>
 800c6e6:	eef0 7a40 	vmov.f32	s15, s0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bf18      	it	ne
 800c6ee:	eeb0 0a47 	vmovne.f32	s0, s14
 800c6f2:	e7db      	b.n	800c6ac <scalbnf+0x5c>
 800c6f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c728 <scalbnf+0xd8>
 800c6f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c72c <scalbnf+0xdc>
 800c6fc:	eef0 7a40 	vmov.f32	s15, s0
 800c700:	2b00      	cmp	r3, #0
 800c702:	e7f3      	b.n	800c6ec <scalbnf+0x9c>
 800c704:	3219      	adds	r2, #25
 800c706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c70a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c70e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c730 <scalbnf+0xe0>
 800c712:	ee07 3a10 	vmov	s14, r3
 800c716:	e7c4      	b.n	800c6a2 <scalbnf+0x52>
 800c718:	ffff3cb0 	.word	0xffff3cb0
 800c71c:	4c000000 	.word	0x4c000000
 800c720:	7149f2ca 	.word	0x7149f2ca
 800c724:	f149f2ca 	.word	0xf149f2ca
 800c728:	0da24260 	.word	0x0da24260
 800c72c:	8da24260 	.word	0x8da24260
 800c730:	33000000 	.word	0x33000000

0800c734 <_init>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	bf00      	nop
 800c738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73a:	bc08      	pop	{r3}
 800c73c:	469e      	mov	lr, r3
 800c73e:	4770      	bx	lr

0800c740 <_fini>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	bf00      	nop
 800c744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c746:	bc08      	pop	{r3}
 800c748:	469e      	mov	lr, r3
 800c74a:	4770      	bx	lr
